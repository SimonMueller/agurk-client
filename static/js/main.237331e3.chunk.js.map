{"version":3,"sources":["styled/Button.tsx","PlayingCard.tsx","SelectableCardList.tsx","TextSecondTimer.tsx","Hand.tsx","styled/Badge.tsx","Player.tsx","PlayerStateList.tsx","Turn.tsx","TurnList.tsx","Stack.tsx","Game.tsx","redux/game.ts","redux/lobby.ts","communication/webSocketServerApi.ts","PlayerIdList.tsx","redux/authentication.ts","Lobby.tsx","Login.tsx","App.tsx","serviceWorker.ts","redux/index.ts","styled/theme.ts","index.tsx"],"names":["styled","button","theme","colors","primary","CardRankText","p","CardAttributeText","Card","div","isSelected","accent","text","CardPlaceholder","generateCardKey","card","kind","JOKER_CARD_KIND","color","rank","suit","JokerCard","SuitCard","PlayingCard","PlayingCardPlaceholder","Flex","Box","UnstyledButton","CardList","cards","handleSelect","cardItems","map","key","onClick","TextSecondTimer","timeoutInSeconds","useState","timeLeftInSeconds","setTimeLeftInSeconds","useEffect","interval","setInterval","clearInterval","MutedParagraph","muted","PlayTurn","handlePlayClick","turnTimeoutInMillis","turnRetriesLeft","type","Hand","playCards","cardsInHand","isServerRequestingCards","selectableCards","setSelectableCards","clicked","cardEquals","selectedCards","filter","span","PenaltyBadge","Badge","warn","opacityPulse","keyframes","PlayerName","props","isOut","ActivePlayerName","InactivePlayerName","Player","player","penaltySum","penalties","reduce","accumulator","current","id","Li","li","PlayerStateList","playerItems","players","MutedFlex","CardBox","Centered","TurnBox","ErrorBadge","error","generateTurnKey","turn","playerId","valid","Valid","InvalidHiddenAfterTimeout","isVisible","setIsVisible","timeout","setTimeout","clearTimeout","length","invalidReason","Turn","TurnList","turnItems","turns","SuccessBadge","success","LastPlayedMaxCard","playedCards","playedTurns","flatMap","highestPlayedCard","maxRankCard","currentCard","compareRanks","Stack","connect","state","ownProps","game","validatedTurns","playerState","find","serverApi","sendPlayCards","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","outPlayers","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerIds","highestTurnPlayerId","filterAvailableCardsAfterTurn","cardInHand","undefined","turnCard","INITIAL_STATE","isRunning","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","sendStartGame","subject","next","name","MessageName","START_GAME","PLAY_CARDS","data","sendAuthenticate","token","AUTHENTICATE","Element","PlayerIdList","playerIds","authenticateWithToken","authenticationError","message","extractSubjectFromToken","jwtDecode","sub","isAuthenticated","isGameStarted","lobby","authenticationToken","authentication","dispatch","webSocket","process","gameApi","bind","createGameApi","subscribe","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","startGame","BROADCAST_END_GAME","isValid","winner","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","timeoutInMillis","retriesLeft","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","complete","pipe","REQUEST_AUTHENTICATION","createAuthenticationApi","className","Input","input","SpacedForm","form","ErrorMessage","nameInput","setNameInput","tokenInput","setTokenInput","onSubmit","event","fetch","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","preventDefault","placeholder","value","onChange","currentTarget","required","Container","Footer","footer","Main","main","MutedLink","href","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"soBAGeA,UAAOC,OAAtB,KAOsB,qBAAGC,MAAqCC,OAAOC,WAE1D,qBAAGF,MAAqCC,OAAOC,WAGlC,qBAAGF,MAAqCC,OAAOC,W,otBCKvE,IAAMC,EAAeL,IAAOM,EAAV,KASZC,EAAoBP,IAAOM,EAAV,KASjBE,EAAOR,IAAOS,IAAV,KACE,gBAAGC,EAAH,EAAGA,WAAYR,EAAf,EAAeA,MAAf,MACE,oBAAVQ,EAA0BR,EAAMC,OAAOQ,OAAwBT,EAAMC,OAAOS,SAY1EC,EAAkBb,YAAOQ,EAAPR,CAAH,KACT,gBAAGE,EAAH,EAAGA,MAAH,2BAAgDA,EAAMC,OAAOS,SAGlE,SAASE,EAAgBC,GAC9B,OAAIA,EAAKC,OAASC,kBACTF,EAAKG,MAAQH,EAAKI,KAEpBJ,EAAKK,KAAOL,EAAKI,KAG1B,SAASE,EAAT,GAA8C,IAAzBN,EAAwB,EAAxBA,KACnB,OACE,oCACE,kBAACV,EAAD,UAGA,kBAACE,EAAD,KACIQ,EAAKG,QAMf,SAASI,EAAT,GAA4C,IAAxBP,EAAuB,EAAvBA,KAClB,OACE,oCACE,kBAACV,EAAD,KACIU,EAAKI,MAET,kBAACZ,EAAD,KACIQ,EAAKK,OAMA,SAASG,EAAT,GAAsE,IAA/CR,EAA8C,EAA9CA,KAA8C,IAAxCL,kBAAwC,SAClF,OACE,kBAACF,EAAD,CAAME,WAAYA,GACdK,EAAKC,OAASC,kBACZ,kBAACI,EAAD,CAAWN,KAAMA,IACjB,kBAACO,EAAD,CAAUP,KAAMA,KAKnB,SAASS,IACd,OACE,kBAACX,EAAD,CAAiBH,YAAY,I,kYCzFjC,IAAMe,EAAOzB,IAAOS,IAAV,KAOJiB,EAAM1B,IAAOS,IAAV,KAKHkB,EAAiB3B,IAAOC,OAAV,KAKL,SAAS2B,EAAT,GAAmD,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,aAClCC,EAAYF,EAAMG,KAAI,SAACjB,GAAD,OAC1B,kBAACW,EAAD,CAAKO,IAAKnB,EAAgBC,IACxB,kBAACY,EAAD,CAAgBO,QAAS,kBAAMJ,EAAaf,KAC1C,kBAACQ,EAAD,CAAaR,KAAMA,EAAML,WAAYK,EAAKL,kBAKhD,OACE,kBAACe,EAAD,KACIM,GClCO,SAASI,EAAT,GAAuD,IAA5BC,EAA2B,EAA3BA,iBAA2B,EACjBC,mBAAiBD,GADA,mBAC5DE,EAD4D,KACzCC,EADyC,KAanE,OAVAC,qBAAU,WACR,IAAMC,EAAmBC,aAAY,WAEnC,OAD4BJ,EAAoB,EACnB,EACzBK,cAAcF,GACdF,EAAqBD,EAAoB,KAC5C,KACH,OAAO,kBAAMK,cAAcF,OAGrB,oCAAIH,G,6GCGd,IAAMM,EAAiB5C,IAAOM,EAAV,KACT,qBAAGJ,MAAqCC,OAAO0C,SAI1D,SAASC,EAAT,GAA6F,IAAzEC,EAAwE,EAAxEA,gBAAiBC,EAAuD,EAAvDA,oBAAqBC,EAAkC,EAAlCA,gBACxD,OACE,oCACE,kBAAC,EAAD,CAAeC,KAAK,SAAShB,QAASa,GAAtC,aAEI,IACAC,GACF,kCAEE,kBAACb,EAAD,CAAiBC,iBAAkBY,EAAsB,MAF3D,MAQF,kBAACJ,EAAD,KACIK,EACA,IACoB,IAApBA,EACE,aACA,iBAMG,SAASE,EAAT,GAEJ,IADTC,EACQ,EADRA,UAAWC,EACH,EADGA,YAAaC,EAChB,EADgBA,wBAAyBN,EACzC,EADyCA,oBAAqBC,EAC9D,EAD8DA,gBAC9D,EACsCZ,mBAA2B,IADjE,mBACDkB,EADC,KACgBC,EADhB,KAmBR,OAhBAhB,qBAAU,WACR,IAAMX,EAAQwB,EAAYrB,KAAI,SAACjB,GAAD,sBAAgBA,EAAhB,CAAsBL,YAAY,OAChE8C,EAAmB3B,KAClB,CAACwB,IAcF,6BACE,oCAEA,kBAAC,EAAD,CAAoBxB,MAAO0B,EAAiBzB,aAVhD,SAA0B2B,GACxBD,EAAmBD,EAAgBvB,KAAI,SAACjB,GAAD,OAAW2C,qBAAW3C,EAAM0C,GAAjB,eACzC1C,EADyC,CACnCL,YAAaK,EAAKL,aAC7BK,SASAuC,GAEE,kBAACR,EAAD,CACEC,gBApBV,WACE,IAAMY,EAAgBJ,EAAgBK,QAAO,SAAC7C,GAAD,OAAUA,EAAKL,cAC5D0C,EAAUO,IAmBFX,oBAAqBA,EACrBC,gBAAiBA,K,2PCnFdjD,UAAO6D,KAAtB,K,8lBCQO,IAAMC,EAAe9D,YAAO+D,EAAP/D,CAAH,KACH,qBAAGE,MAAqCC,OAAO6D,QAI/DC,EAAeC,YAAH,KAcZC,GAAanE,IAAO6D,KAAV,KACU,SAACO,GAAD,OAAgCA,EAAMC,MAAQ,eAAiB,UAGnFC,GAAmBtE,YAAOmE,GAAPnE,CAAH,IACPiE,GAITM,GAAqBvE,YAAOmE,GAAPnE,CAAH,KAIT,SAASwE,GAAT,GAAoC,IAAlBC,EAAiB,EAAjBA,OACzBC,EAAaD,EAAOE,UAAUC,QAAO,SAACC,EAAaC,GAAd,OAA0BA,EAAQ/D,KAAKI,KAAO0D,IAAa,GAEtG,OACE,oCACIJ,EAAOnB,wBACL,kBAACgB,GAAD,CAAkBD,MAAOI,EAAOJ,OAASI,EAAOM,IAChD,kBAACR,GAAD,CAAoBF,MAAOI,EAAOJ,OAASI,EAAOM,IACtD,kBAACjB,EAAD,eAEG,IACAY,I,kGC5CT,IAAMM,GAAKhF,IAAOiF,GAAV,MAIO,SAASC,GAAT,GAA8C,IACrDC,EADoD,EAAlBC,QACZpD,KAAI,SAACyC,GAAD,OAAY,kBAACO,GAAD,CAAI/C,IAAKwC,EAAOM,IAAI,kBAACP,GAAD,CAAQC,OAAQA,QAEhF,OACE,6BACE,uCAEA,4BACIU,I,uqBCVV,IAAM1D,GAAOzB,IAAOS,IAAV,MAMJ4E,GAAYrF,YAAOyB,GAAPzB,CAAH,MACJ,qBAAGE,MAAqCC,OAAO0C,SAGpDyC,GAAUtF,IAAOS,IAAV,MAKP8E,GAAWvF,IAAOS,IAAV,MAIR+E,GAAUxF,IAAOS,IAAV,MAKAgF,GAAazF,YAAO+D,EAAP/D,CAAH,MACD,qBAAGE,MAAqCC,OAAOuF,SAI9D,SAASC,GAAgBC,GAC9B,OAAOA,EAAKC,SAAWD,EAAKE,MAG9B,SAASC,GAAT,GAA+C,IAA9BH,EAA6B,EAA7BA,KACT7D,EAAY6D,EAAK/D,MAAMG,KAAI,SAACjB,GAAD,OAC/B,kBAACuE,GAAD,CAASrD,IAAKnB,EAAgBC,IAC5B,kBAACQ,EAAD,CAAaR,KAAMA,QAIvB,OACE,kBAACyE,GAAD,KACE,kBAAC,GAAD,KACIzD,GAEJ,kBAACwD,GAAD,KAAU,8BAAOK,EAAKC,YAK5B,SAASG,GAAT,GAAqE,IAAhCJ,EAA+B,EAA/BA,KAA+B,EAEhCvD,oBAAkB,GAFc,mBAE3D4D,EAF2D,KAEhDC,EAFgD,KAG5DnE,EAAY6D,EAAK/D,MAAMG,KAAI,SAACjB,GAAD,OAC/B,kBAACuE,GAAD,CAASrD,IAAKnB,EAAgBC,IAC5B,kBAACQ,EAAD,CAAaU,IAAKnB,EAAgBC,GAAOA,KAAMA,QAWnD,OAPAyB,qBAAU,WACR,IAAM2D,EAAkBC,YAAW,WACjCF,GAAa,KAViB,KAYhC,OAAO,kBAAMG,aAAaF,OAGrBF,EAEH,kBAACT,GAAD,KACE,kBAACH,GAAD,KACyB,IAArBtD,EAAUuE,OACR,kBAAC9E,EAAD,MACAO,GAEN,kBAACwD,GAAD,KAAU,8BAAOK,EAAKC,WACtB,kBAACN,GAAD,KACE,kBAACE,GAAD,KAAaG,EAAKW,iBAItB,KAGS,SAASC,GAAT,GAAgC,IAAhBZ,EAAe,EAAfA,KAC7B,OAAOA,EAAKE,MACR,kBAACC,GAAD,CAAOH,KAAMA,IACb,kBAACI,GAAD,CAA2BJ,KAAMA,I,+GCxFvC,IAAMnE,GAAOzB,IAAOS,IAAV,MAKK,SAASgG,GAAT,GAAqC,IAC5CC,EAD2C,EAAhBC,MACT3E,KAAI,SAAC4D,GAAD,OAAW,kBAACY,GAAD,CAAMvE,IAAK0D,GAAgBC,GAAOA,KAAMA,OAE/E,OACE,kBAAC,GAAD,KACIc,G,2hBCPR,IAAMjF,GAAOzB,IAAOS,IAAV,MAKJiB,GAAM1B,IAAOS,IAAV,MAKImG,GAAe5G,YAAO+D,EAAP/D,CAAH,MACH,qBAAGE,MAAqCC,OAAO0G,WAI/DtB,GAAWvF,IAAOS,IAAV,MAIR6E,GAAUtF,IAAOS,IAAV,MAIb,SAASqG,GAAT,GAAoD,IAE5CC,EAF2C,EAAtBC,YACIpD,QAAO,SAACgC,GAAD,OAAUA,EAAKE,SACtBmB,SAAQ,SAACrB,GAAD,OAAUA,EAAK/D,SAChDqF,EAAoBH,EAAYT,OAAS,EAE3C,kBAAC/E,EAAD,CAAaR,KAAMgG,EAAYnC,QAC7B,SAACuC,EAAaC,GAAd,OAA+BC,uBAAaF,EAAaC,GAAe,EAAID,EAAcC,OAI5F,kBAAC5F,EAAD,MAEJ,OACE,oCACE,kBAAC,GAAD,KACI0F,GAEJ,kBAAC,GAAD,KACE,kBAACN,GAAD,8BAMO,SAASU,GAAT,GAAwC,IAAvBN,EAAsB,EAAtBA,YAC9B,OACE,6BACE,qCAEA,kBAAC,GAAD,KACE,kBAAC,GAAD,KACE,kBAACF,GAAD,CAAmBE,YAAaA,KAElC,kBAAC,GAAD,KACE,kBAACP,GAAD,CAAUE,MAAOK,OC/B3B,IAUeO,gBAVS,SAACC,EAAcC,GAAf,MAA8D,CACpFpE,YAAamE,EAAME,KAAKrE,YACxB+B,QAASoC,EAAME,KAAKtC,QACpB4B,YAAaQ,EAAME,KAAKC,eACxBC,YAAaJ,EAAME,KAAKtC,QAAQyC,MAAK,SAACpD,GAAD,OAAYA,EAAOM,KAAOyC,EAAME,KAAK7B,YAC1EzC,UAAW,SAACvB,GAAD,OAAmB4F,EAASK,UAAUC,cAAclG,IAC/DmB,oBAAqBwE,EAAME,KAAK1E,oBAChCC,gBAAiBuE,EAAME,KAAKzE,mBAGfsE,EA5Bf,YAEW,IADTnC,EACQ,EADRA,QAAS4B,EACD,EADCA,YAAa3D,EACd,EADcA,YAAaD,EAC3B,EAD2BA,UAAWwE,EACtC,EADsCA,YAAa5E,EACnD,EADmDA,oBAAqBC,EACxE,EADwEA,gBAEhF,OACE,6BACE,kBAACiC,GAAD,CAAiBE,QAASA,IAC1B,kBAACkC,GAAD,CAAON,YAAaA,IACpB,kBAAC7D,EAAD,CACEG,wBAAyBsE,EAAYtE,wBACrCN,oBAAqBA,EACrBC,gBAAiBA,EACjBI,YAAaA,EACbD,UAAWA,Q,SC4InB,SAAS4E,GAA2BrD,EAAsBkB,GACxD,OAAOlB,EAAUf,QAAO,SAACqE,GAAD,OAAaA,EAAQpC,WAAaA,KAG5D,SAASqC,GAAkBC,EAAyBtC,GAClD,OAAOsC,EAAWC,MAAK,SAACC,GAAD,OAAeA,EAAUtD,KAAOc,KAGzD,SAASyC,GAAkCC,EAAkC1C,GAC3E,OAAO0C,EAAqBH,MAAK,SAACI,GAAD,OAAyBA,IAAwB3C,KAGpF,SAAS4C,GAA8BpF,EAAqBuC,GAC1D,OAAOvC,EAAYO,QAAO,SAAC8E,GAAD,YACkCC,IADlB/C,EAAK/D,MAC5CgG,MAAK,SAACe,GAAD,OAAclF,qBAAWgF,EAAYE,SAuB/C,IAAMC,GAAuB,CAC3BC,WAAW,EACXjD,cAAU8C,EACVvD,QAAS,GACTuC,eAAgB,GAChBtE,YAAa,GACbL,yBAAqB2F,EACrB1F,gBAAiB,GAGb8F,GAAuB,CAC3BC,cAAc,EACdC,eAAe,EACfC,0BAA0B,EAC1BvE,UAAW,GACXN,OAAO,EACPf,yBAAyB,GC3M3B,IAAMuF,GAAuB,CAC3BzD,QAAS,ICQX,SAAS+D,GAAcC,GACrB,OAAOA,EAAQC,KAAK,CAAEC,KAAMC,cAAYC,aAG1C,SAASzB,GAAcqB,EAAoCvH,GACzD,OAAOuH,EAAQC,KAAK,CAAEC,KAAMC,cAAYE,WAAYC,KAAM7H,IAG5D,SAAS8H,GAAiBP,EAAoCQ,GAC5D,OAAOR,EAAQC,KAAK,CAAEC,KAAMC,cAAYM,aAAcH,KAAME,I,kGChC9D,IAAME,GAAU9J,IAAOiF,GAAV,MAIE,SAAS8E,GAAT,GAA6C,IACpD5E,EADmD,EAApB6E,UACPhI,KAAI,SAAC6D,GAAD,OAAc,kBAACiE,GAAD,CAAS7H,IAAK4D,GAAWA,MAEzE,OACE,6BACE,uCAEA,4BACIV,I,qDCMH,SAAS8E,GAAsBL,EAAeR,GACnD,MAAO,CACLlG,KArBmC,0BAsBnC0G,QACAR,WAWG,SAASc,GAAoBC,GAClC,MAAO,CACLjH,KAnCgC,uBAoChCiH,WAIJ,SAASC,GAAwBR,GAC/B,OAAQS,KAAUT,GAAsBU,IAgC1C,IAAMzB,GAAuB,CAC3BO,QAAS,GACTmB,iBAAiB,EACjBX,MAAO,GACPlE,WAAOiD,GCzBT,IAMepB,gBANS,SAACC,GAAD,MAAmB,CACzCgD,cAAehD,EAAME,KAAKoB,UAC1B1D,QAASoC,EAAMiD,MAAMrF,QACrBsF,oBAAqBlD,EAAMmD,eAAef,SAG7BrC,EA1Cf,YAEW,IADTqD,EACQ,EADRA,SAAUF,EACF,EADEA,oBAAqBF,EACvB,EADuBA,cAAepF,EACtC,EADsCA,QACtC,EACU/C,mBAAoCwI,YAZjCC,qCAYd1B,EADC,oBAEF2B,EHgDD,SAAuB3B,GAC5B,MAAO,CACLD,cAAeA,GAAc6B,KAAK,KAAM5B,GACxCrB,cAAeA,GAAciD,KAAK,KAAM5B,IGnD1B6B,CAAc7B,GAkB9B,OAhBA5G,qBAAU,WAGR,OAFA4G,EAAQ8B,WAAU,SAACf,GAAD,OHYf,SAA2CA,EAAkBS,GAElE,OAAQT,EAAQb,MACd,KAAKC,cAAY4B,wBACf,OAAOP,EDnCJ,CACL1H,KAV6B,oBAW7B8G,UCiCkCG,EAAQT,OAC1C,KAAKH,cAAY6B,qBACf,OAAOR,EFoCN,SAAmBZ,GACxB,MAAO,CACL9G,KAjFsB,aAkFtB8G,aEvCkBqB,CAAUlB,EAAQT,KAAKtE,UACzC,KAAKmE,cAAY+B,mBAMf,OALInB,EAAQT,KAAK6B,QACfX,EFsDC,CACL1H,KApG4B,mBAqG5BsI,OExD4BrB,EAAQT,KAAK8B,SAErCZ,EF6CC,CACL1H,KA5F0B,iBA6F1BwC,ME/C0ByE,EAAQT,KAAKhE,QAE9BkF,EFqCJ,CACL1H,KA7EsB,eEwCtB,KAAKqG,cAAYkC,sBACf,OAAOb,EF2EN,SAAoBZ,GACzB,MAAO,CACL9G,KA5HuB,cA6HvB8G,aE9EkB0B,CAAWvB,EAAQT,KAAKtE,UAC1C,KAAKmE,cAAYoC,oBACf,OAAOf,EFgFN,SAAkBY,EAA8B7G,EAAsBwD,GAC3E,MAAO,CACLjF,KAlIqB,YAmIrBsI,SACA7G,YACAwD,cErFkByD,CAASzB,EAAQT,KAAK8B,OAAQrB,EAAQT,KAAK/E,UAAWwF,EAAQT,KAAKvB,aACrF,KAAKoB,cAAYsC,sBACf,OAAOjB,EFwFJ,CACL1H,KA1IuB,cA2IvB4I,iBE1F6B3B,EAAQT,KAAKqC,iBAC1C,KAAKxC,cAAYyC,oBACf,OAAOpB,GF4FYzC,EE5FMgC,EAAQT,KAAKvB,WF6FnC,CACLjF,KAhJqB,YAiJrBqF,qBE/FoD4B,EAAQT,KAAKuC,mBFgGjE9D,gBE/FA,KAAKoB,cAAY2C,sBACf,OAAOtB,EFsDJ,CACL1H,KA/G2B,kBAgH3B0C,KExDgCuE,EAAQT,OACxC,KAAKH,cAAY4C,wBACf,OAAOvB,EF6CJ,CACL1H,KAzG6B,oBA0G7BrB,ME/C0CsI,EAAQT,OAClD,KAAKH,cAAY6C,cACf,OAAOxB,GF8FgB5H,EE9FMmH,EAAQT,KAAK2C,gBF8FUpJ,EE9FOkH,EAAQT,KAAK4C,YF+FrE,CACLpJ,KAvJyB,gBAwJzBF,sBACAC,qBEjGA,KAAKsG,cAAYgD,4BACf,OAAO3B,EFuDJ,CACL1H,KAhH6B,oBAiH7B2C,SEzDkCsE,EAAQT,OFsDvC,IAsCsB1G,EAA6BC,EARjCkF,EK7HUqE,CAAkCrC,EAASS,MACxE,kBAAMA,EDGH,CACL1H,KA3BqC,4BA4BrCiH,QCLyC,6DAClC,kBAAMf,EAAQqD,cACpB,CAACrD,EAASwB,IAEbpI,qBAAU,WAOR,OANA4G,EAAQsD,KACN9I,aAAO,SAACuG,GAAD,OAAaA,EAAQb,OAASC,cAAYoD,2BACjDzB,WAAU,YH4CT,SAAiC9B,GACtC,MAAO,CACLO,iBAAkBA,GAAiBqB,KAAK,KAAM5B,KG7CTwD,CAAwBxD,GAChCO,iBAAiBe,MAEvC,kBAAMtB,EAAQqD,cACpB,CAACrD,EAASsB,IAGX,yBAAKmC,UAAU,SACXrC,EACE,kBAAC,GAAD,CAAM1C,UAAWiD,IAEjB,oCACE,kBAAChB,GAAD,CAAcC,UAAW5E,IACzB,kBAAC,EAAD,CAAelC,KAAK,SAAShB,QAAS6I,EAAQ5B,eAA9C,mB,scCtCZ,IAAM2D,GAAQ9M,IAAO+M,MAAV,MASLC,GAAahN,IAAOiN,KAAV,MAIVC,GAAelN,IAAOS,IAAV,MACI,qBAAGP,MAAqCC,OAAOuF,SAyDrE,IAIe6B,gBAJS,SAACC,GAAD,MAAmB,CACzC9B,MAAO8B,EAAMmD,eAAejF,SAGf6B,EAtDf,YAA4C,IAA3BqD,EAA0B,EAA1BA,SAAUlF,EAAgB,EAAhBA,MAAgB,EACPrD,mBAAiB,IADV,mBAClC8K,EADkC,KACvBC,EADuB,OAEL/K,mBAAiB,IAFZ,mBAElCgL,EAFkC,KAEtBC,EAFsB,KAiBzC,OACE,oCACE,qCAEA,kBAACN,GAAD,CAAYO,SAjBhB,SAAsBC,GFYjB,IAAsB9D,EEXzBkB,GFWyBlB,EEXH,CAAEJ,KAAM6D,EAAWvD,MAAOyD,GFY3C,SAA4BzC,GACjC6C,MAAM,GAAD,OAjDc3C,qCAiDd,iBAAmC,CACtC4C,OAAQ,OACRC,KAAM,OACNC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUrE,KAEpBsE,KANH,yCAMQ,WAAOC,GAAP,oBAAAC,EAAA,0DACAD,EAASE,GADT,iCAEiBF,EAASG,OAF1B,OAEIP,EAFJ,OAGIjE,EAAQiE,EAAKQ,IACbjF,EAAUgB,GAAwByD,EAAKQ,KAC7CzD,EAASX,GAAsBL,EAAOR,IACtCwB,EJaD,CACL1H,KA3EyB,gBA4EzB2C,SIf2BuD,IANnB,wBAQFwB,EAASV,GAAoB,0BAR3B,4CANR,uDAgBK,kBAAMU,EAASV,GAAoB,uDE5BxCsD,EAAMc,mBAgBF,kBAACxB,GAAD,CACEyB,YAAY,cACZxJ,GAAG,OACHyJ,MAAOrB,EACPsB,SAjBR,SAA0BjB,GACxBJ,EAAaI,EAAMkB,cAAcF,QAiB3BtL,KAAK,OACLoG,KAAK,OACLqF,UAAQ,IAGV,kBAAC7B,GAAD,CACEyB,YAAY,eACZxJ,GAAG,QACHyJ,MAAOnB,EACPoB,SAvBR,SAA2BjB,GACzBF,EAAcE,EAAMkB,cAAcF,QAuB5BtL,KAAK,WACLoG,KAAK,QACLqF,UAAQ,IAGV,kBAAC,EAAD,CAAezL,KAAK,UAApB,WAGAwC,GAAS,kBAACwH,GAAD,KAAexH,O,ggBCrEhC,IAAMkJ,GAAY5O,IAAOS,IAAV,MAMToO,GAAS7O,IAAO8O,OAAV,MAKNC,GAAO/O,IAAOgP,KAAV,MAIJC,GAAYjP,IAAOkO,EAAV,MACJ,qBAAGhO,MAAqCC,OAAO0C,SA0B1D,IAIe0E,gBAJS,SAACC,GAAD,MAAmB,CACzC+C,gBAAiB/C,EAAMmD,eAAeJ,mBAGzBhD,EAtBf,YAA0C,IAA3BgD,EAA0B,EAA1BA,gBACb,OACE,kBAACqE,GAAD,CAAW/B,UAAU,OACnB,4BAAQA,UAAU,cAChB,sCAIF,kBAACkC,GAAD,KACIxE,EAAkB,kBAAC,GAAD,MAAY,kBAAC,GAAD,OAElC,kBAACsE,GAAD,KACE,kBAACI,GAAD,CAAWC,KAAK,sDAAhB,uBCpCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPSC,iCAAuB,CACpC7E,eL4EK,WAAqF,IAApEnD,EAAmE,uDAApDqB,GAAe4G,EAAqC,uCACzF,OAAQA,EAAOvM,MACb,IAnFmC,0BAoFjC,OAAO,eACFsE,EADL,CAEE4B,QAASqG,EAAOrG,QAChBmB,iBAAiB,EACjBX,MAAO6F,EAAO7F,MACdlE,WAAOiD,IAEX,IA1FgC,uBA2F9B,OAAO,eACFnB,EADL,CAEE9B,MAAO+J,EAAOtF,UAElB,IA9FqC,4BA+FnC,OAAO,eACF3C,EADL,GAEKqB,GAFL,CAGEnD,MAAO+J,EAAOtF,UAElB,QACE,OAAO3C,IKjGXE,KTuNK,WAA2E,IAA1DF,EAAyD,uDAA1CqB,GAAe4G,EAA2B,uCAC/E,OAAQA,EAAOvM,MACb,IAjOyB,gBAkOvB,OAAO,eACFsE,EADL,CAEE3B,SAAU4J,EAAO5J,WAErB,IArOsB,aAsOpB,OAAO,eACF2B,EADL,CAEEsB,WAAW,EACX1D,QAASqK,EAAOzF,UAAUhI,KAAI,SAAC6D,GAAD,sBACzBkD,GADyB,CAE5BhE,GAAIc,SAGV,IA7O4B,mBA8O1B,OAAO,eACF2B,EADL,CAEEpC,QAASoC,EAAMpC,QAAQpD,KAAI,SAACyC,GAAD,sBACtBA,EADsB,CAEzBuE,aAAcvE,EAAOM,KAAO0K,EAAOjE,OACnClI,yBAAyB,OAE3BqE,eAAgB,GAChBtE,YAAa,KAEjB,IA9OsB,aA+OpB,OAAO,eACFmE,EADL,CAEEpC,QAASoC,EAAMpC,QAAQpD,KAAI,SAACyC,GAAD,sBACtBA,EADsB,GAEtBsE,QAEFF,GANL,CAOEhD,SAAU2B,EAAM3B,WAEpB,IAjQ0B,iBAkQxB,OAAO2B,EACT,IAlQ6B,oBAmQ3B,OAAO,eACFA,EADL,CAEEnE,YAAaoM,EAAO5N,QAExB,IAtQ2B,kBAuQzB,OAAO,eACF2F,EADL,CAEEG,eAAe,GAAD,oBACTH,EAAMG,gBADG,CAEZ8H,EAAO7J,OAETR,QAASoC,EAAMpC,QAAQpD,KAAI,SAACyC,GAAD,sBACtBA,EADsB,CAEzBnB,wBAAyBmM,EAAO7J,KAAKC,WAAapB,EAAOM,IAAaN,EAAOnB,6BAE/ED,YAAcoM,EAAO7J,KAAKC,WAAa2B,EAAM3B,UAAY4J,EAAO7J,KAAKE,MACjE2C,GAA8BjB,EAAMnE,YAAaoM,EAAO7J,MACxD4B,EAAMnE,cAEd,IApRuB,cAqRrB,OAAOmE,EACT,IArRqB,YAsRnB,OAAO,eACFA,EADL,CAEEpC,QAASoC,EAAMpC,QAAQpD,KAAI,SAACyC,GAAD,sBACtBA,EADsB,CAEzBE,UAAU,GAAD,oBACJF,EAAOE,WADH,aAEJqD,GAA2ByH,EAAO9K,UAAWF,EAAOM,MAEzDV,MAAO6D,GAAkBuH,EAAOtH,WAAY1D,EAAOM,IACnDkE,cAAexE,EAAOM,KAAO0K,EAAOjE,cAG1C,IAjSuB,cAkSrB,OAAO,eACFhE,EADL,CAEEG,eAAgB,KAEpB,IArSqB,YAsSnB,OAAO,eACFH,EADL,CAEEpC,QAASoC,EAAMpC,QAAQpD,KAAI,SAACyC,GAAD,sBACtBA,EADsB,CAEzByE,yBAA0BZ,GAAkCmH,EAAOlH,qBAAsB9D,EAAOM,IAChGV,MAAO6D,GAAkBuH,EAAOtH,WAAY1D,EAAOM,WAGzD,IA7SyB,gBA8SvB,OAAO,eACFyC,EADL,CAEExE,oBAAqByM,EAAOzM,oBAC5BC,gBAAiBwM,EAAOxM,kBAE5B,IAlT6B,oBAmT3B,OAAO,eACFuE,EADL,CAEEpC,QAASoC,EAAMpC,QAAQpD,KAAI,SAACyC,GAAD,sBACtBA,EADsB,CAEzBnB,wBAAyBmM,EAAO5J,WAAapB,EAAOM,UAG1D,QACE,OAAOyC,IS7TXiD,MRYK,WAA4E,IAA3DjD,EAA0D,uDAA3CqB,GAAe4G,EAA4B,uCAChF,OAAQA,EAAOvM,MACb,IAzB6B,oBA0B3B,OAAO,eACFsE,EADL,CAEEpC,QAASqK,EAAOzF,YAEpB,QACE,OAAOxC,MSVEtH,I,MAZM,CACnBC,OAAQ,CACNC,QAAS,UACTO,OAAQ,UACRkC,MAAO,UACPjC,KAAM,OACN8E,MAAO,yBACP1B,KAAM,UACN6C,QAAS,0BCPP6I,GAAQC,sBAAYC,GAASC,8BAAoBC,0BAAgBC,OAEvEC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,CAAexP,MAAOA,IACpB,kBAAC,GAAD,QAGJgQ,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.237331e3.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport default styled.button`\n  display: inline-block;\n  font-size: 1em;\n  height: 3em;\n  padding: 0.75em;\n  width: 100%;\n  background-color: transparent;\n  border: 2px solid ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n  font-weight: bold;\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n\n  &:hover {\n    background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n    color: white;\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Theme } from './styled/theme';\n\ninterface PlayingCardProps {\n  card: CardData;\n  isSelected?: boolean;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nconst CardRankText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 3em;\n  margin: 0;\n`;\n\nconst CardAttributeText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 0.7em;\n  margin: 0;\n`;\n\nconst Card = styled.div`\n  border: ${({ isSelected, theme }: { isSelected: boolean, theme: Theme }) => (\n    isSelected ? `1px solid ${theme.colors.accent}` : `1px solid ${theme.colors.text}`\n  )};\n  border-radius: 4px;\n  width: 4.5em;\n  height: 7em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n`;\n\nconst CardPlaceholder = styled(Card)`\n  border: ${({ theme }: { theme: Theme }) => (`1px dotted ${theme.colors.text}`)};\n`;\n\nexport function generateCardKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <>\n      <CardRankText>\n        J\n      </CardRankText>\n      <CardAttributeText>\n        { card.color }\n      </CardAttributeText>\n    </>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <>\n      <CardRankText>\n        { card.rank }\n      </CardRankText>\n      <CardAttributeText>\n        { card.suit }\n      </CardAttributeText>\n    </>\n  );\n}\n\nexport default function PlayingCard({ card, isSelected = false }: PlayingCardProps) {\n  return (\n    <Card isSelected={isSelected}>\n      { card.kind === JOKER_CARD_KIND\n        ? <JokerCard card={card} />\n        : <SuitCard card={card} /> }\n    </Card>\n  );\n}\n\nexport function PlayingCardPlaceholder() {\n  return (\n    <CardPlaceholder isSelected={false} />\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { generateCardKey } from './PlayingCard';\n\nexport type SelectableCard = CardData & { isSelected: boolean };\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 1em;\n  justify-content: center;\n`;\n\nconst Box = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst UnstyledButton = styled.button`\n  all: unset;\n  cursor: pointer;\n`;\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <Box key={generateCardKey(card)}>\n      <UnstyledButton onClick={() => handleSelect(card)}>\n        <PlayingCard card={card} isSelected={card.isSelected} />\n      </UnstyledButton>\n    </Box>\n  ));\n\n  return (\n    <Flex>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  timeoutInSeconds: number;\n}\n\nexport default function TextSecondTimer({ timeoutInSeconds }: Props) {\n  const [timeLeftInSeconds, setTimeLeftInSeconds] = useState<number>(timeoutInSeconds);\n\n  useEffect(() => {\n    const interval: number = setInterval(() => {\n      const newTimeLeftInMillis = timeLeftInSeconds - 1;\n      return newTimeLeftInMillis < 0\n        ? clearInterval(interval)\n        : setTimeLeftInSeconds(timeLeftInSeconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  return (<>{ timeLeftInSeconds }</>);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport styled from 'styled-components';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\nimport PrimaryButton from './styled/Button';\nimport TextSecondTimer from './TextSecondTimer';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\ninterface PlayTurnProps {\n  handlePlayClick: () => void;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\nconst MutedParagraph = styled.p`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n  text-align: center;\n`;\n\nfunction PlayTurn({ handlePlayClick, turnTimeoutInMillis, turnRetriesLeft }: PlayTurnProps) {\n  return (\n    <>\n      <PrimaryButton type=\"button\" onClick={handlePlayClick}>\n      Play Cards\n        { ' ' }\n        { turnTimeoutInMillis && (\n        <span>\n          (\n          <TextSecondTimer timeoutInSeconds={turnTimeoutInMillis / 1000} />\n          )\n        </span>\n        ) }\n      </PrimaryButton>\n\n      <MutedParagraph>\n        { turnRetriesLeft }\n        { ' ' }\n        { turnRetriesLeft === 1\n          ? 'Retry left'\n          : 'Retries left' }\n      </MutedParagraph>\n    </>\n  );\n}\n\nexport default function Hand({\n  playCards, cardsInHand, isServerRequestingCards, turnTimeoutInMillis, turnRetriesLeft,\n}: Props) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n\n      { isServerRequestingCards\n        && (\n          <PlayTurn\n            handlePlayClick={playSelectedCards}\n            turnTimeoutInMillis={turnTimeoutInMillis}\n            turnRetriesLeft={turnRetriesLeft}\n          />\n        )}\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport default styled.span`\n  background-color: transparent;\n  border-radius: 0.25em;\n  font-size: 0.7em;\n  margin: 0 0.5em;\n  padding: 0.15em 0.25em;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { PlayerState } from './redux/game';\nimport Badge from './styled/Badge';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  player: PlayerState;\n}\n\nexport const PenaltyBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.warn)};\n  color: white;\n`;\n\nconst opacityPulse = keyframes`\n  0% {\n    opacity: 0.6;\n  }\n\n  50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0.6;\n  }\n`;\n\nconst PlayerName = styled.span`\n  text-decoration-line: ${(props: { isOut: boolean }) => (props.isOut ? 'line-through' : 'none')};\n`;\n\nconst ActivePlayerName = styled(PlayerName)`\n  animation: ${opacityPulse} 2s infinite;\n  font-weight: bold;\n`;\n\nconst InactivePlayerName = styled(PlayerName)`\n  font-weight: normal;\n`;\n\nexport default function Player({ player }: Props) {\n  const penaltySum = player.penalties.reduce((accumulator, current) => current.card.rank + accumulator, 0);\n\n  return (\n    <>\n      { player.isServerRequestingCards\n        ? <ActivePlayerName isOut={player.isOut}>{ player.id }</ActivePlayerName>\n        : <InactivePlayerName isOut={player.isOut}>{ player.id }</InactivePlayerName>}\n      <PenaltyBadge>\n        Penalty\n        {' '}\n        {penaltySum}\n      </PenaltyBadge>\n    </>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Player from './Player';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nconst Li = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerStateList({ players }: Props) {\n  const playerItems = players.map((player) => <Li key={player.id}><Player player={player} /></Li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { InvalidTurn, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport PlayingCard, { generateCardKey, PlayingCardPlaceholder } from './PlayingCard';\nimport Badge from './styled/Badge';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  turn: ValidatedTurn;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MutedFlex = styled(Flex)`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n`;\n\nconst CardBox = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst TurnBox = styled.div`\n  margin-right: 1em;\n  margin-bottom: 1em;\n`;\n\nexport const ErrorBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  color: white;\n`;\n\nexport function generateTurnKey(turn: ValidatedTurn): string {\n  return turn.playerId + turn.valid;\n}\n\nfunction Valid({ turn }: { turn: ValidTurn }) {\n  const cardItems = turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard card={card} />\n    </CardBox>\n  ));\n\n  return (\n    <TurnBox>\n      <Flex>\n        { cardItems }\n      </Flex>\n      <Centered><span>{turn.playerId}</span></Centered>\n    </TurnBox>\n  );\n}\n\nfunction InvalidHiddenAfterTimeout({ turn }: { turn: InvalidTurn }) {\n  const SHOW_INVALID_TURN_TIMEOUT = 2000;\n  const [isVisible, setIsVisible] = useState<boolean>(true);\n  const cardItems = turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard key={generateCardKey(card)} card={card} />\n    </CardBox>\n  ));\n\n  useEffect(() => {\n    const timeout: number = setTimeout(() => {\n      setIsVisible(false);\n    }, SHOW_INVALID_TURN_TIMEOUT);\n    return () => clearTimeout(timeout);\n  });\n\n  return isVisible\n    ? (\n      <TurnBox>\n        <MutedFlex>\n          { cardItems.length === 0\n            ? <PlayingCardPlaceholder />\n            : cardItems }\n        </MutedFlex>\n        <Centered><span>{turn.playerId}</span></Centered>\n        <Centered>\n          <ErrorBadge>{turn.invalidReason}</ErrorBadge>\n        </Centered>\n      </TurnBox>\n    )\n    : null;\n}\n\nexport default function Turn({ turn }: Props) {\n  return turn.valid\n    ? <Valid turn={turn} />\n    : <InvalidHiddenAfterTimeout turn={turn} />;\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport Turn, { generateTurnKey } from './Turn';\n\ninterface Props {\n  turns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport default function TurnList({ turns }: Props) {\n  const turnItems = turns.map((turn) => (<Turn key={generateTurnKey(turn)} turn={turn} />));\n\n  return (\n    <Flex>\n      { turnItems }\n    </Flex>\n  );\n}\n","import React from 'react';\nimport { compareRanks, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { PlayingCardPlaceholder } from './PlayingCard';\nimport { Theme } from './styled/theme';\nimport Badge from './styled/Badge';\nimport TurnList from './TurnList';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Box = styled.div`\n  margin-right: 1em;\n  margin-bottom: 1em;\n`;\n\nexport const SuccessBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.success)};\n  color: white;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst CardBox = styled.div`\n  margin-bottom: 0.5em;\n`;\n\nfunction LastPlayedMaxCard({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid) as ValidTurn[];\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n  const highestPlayedCard = playedCards.length > 0\n    ? (\n      <PlayingCard card={playedCards.reduce(\n        (maxRankCard, currentCard) => (compareRanks(maxRankCard, currentCard) > 0 ? maxRankCard : currentCard),\n      )}\n      />\n    )\n    : <PlayingCardPlaceholder />;\n\n  return (\n    <>\n      <CardBox>\n        { highestPlayedCard }\n      </CardBox>\n      <Centered>\n        <SuccessBadge>Highest played card</SuccessBadge>\n      </Centered>\n    </>\n  );\n}\n\nexport default function Stack({ playedTurns }: Props) {\n  return (\n    <div>\n      <h2>Stack</h2>\n\n      <Flex>\n        <Box>\n          <LastPlayedMaxCard playedTurns={playedTurns} />\n        </Box>\n        <Box>\n          <TurnList turns={playedTurns} />\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport Hand from './Hand';\nimport PlayerStateList from './PlayerStateList';\nimport Stack from './Stack';\nimport { State } from './redux';\nimport { WebSocketGameApi } from './communication/webSocketServerApi';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  players: PlayerState[];\n  playedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  playCards: (cards: Card[]) => void;\n  playerState: PlayerState;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\nfunction Game({\n  players, playedTurns, cardsInHand, playCards, playerState, turnTimeoutInMillis, turnRetriesLeft,\n}: Props) {\n  return (\n    <div>\n      <PlayerStateList players={players} />\n      <Stack playedTurns={playedTurns} />\n      <Hand\n        isServerRequestingCards={playerState.isServerRequestingCards}\n        turnTimeoutInMillis={turnTimeoutInMillis}\n        turnRetriesLeft={turnRetriesLeft}\n        cardsInHand={cardsInHand}\n        playCards={playCards}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi }) => ({\n  cardsInHand: state.game.cardsInHand,\n  players: state.game.players,\n  playedTurns: state.game.validatedTurns,\n  playerState: state.game.players.find((player) => player.id === state.game.playerId) as PlayerState,\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n  turnTimeoutInMillis: state.game.turnTimeoutInMillis,\n  turnRetriesLeft: state.game.turnRetriesLeft,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import {\n  Card, cardEquals, Error, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_PLAYER_ID = 'SET_PLAYER_ID';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface SetPlayerIdAction extends Action<typeof SET_PLAYER_ID> {\n  readonly playerId: PlayerId;\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{\n  readonly turnTimeoutInMillis: number;\n  readonly turnRetriesLeft: number;\n}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | SetPlayerIdAction;\n\nexport function setPlayerId(playerId: string): GameAction {\n  return {\n    type: SET_PLAYER_ID,\n    playerId,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(turnTimeoutInMillis: number, turnRetriesLeft: number): GameAction {\n  return {\n    type: REQUEST_CARDS,\n    turnTimeoutInMillis,\n    turnRetriesLeft,\n  };\n}\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface State {\n  isRunning: boolean;\n  playerId: PlayerId | undefined;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number,\n}\n\nconst INITIAL_STATE: State = {\n  isRunning: false,\n  playerId: undefined,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n  turnTimeoutInMillis: undefined,\n  turnRetriesLeft: 0,\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nexport function reducer(state: State = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case SET_PLAYER_ID:\n      return {\n        ...state,\n        playerId: action.playerId,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        isRunning: true,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n          isServerRequestingCards: false,\n        })),\n        validatedTurns: [],\n        cardsInHand: [],\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          ...INITIAL_PLAYER_STATE,\n        })),\n        ...INITIAL_STATE,\n        playerId: state.playerId,\n      };\n    case END_GAME_ERROR:\n      return state;\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.turn.playerId === player.id ? false : player.isServerRequestingCards,\n        })),\n        cardsInHand: (action.turn.playerId === state.playerId && action.turn.valid\n          ? filterAvailableCardsAfterTurn(state.cardsInHand, action.turn)\n          : state.cardsInHand),\n      };\n    case START_ROUND:\n      return state;\n    case END_ROUND:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        validatedTurns: [],\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n        })),\n      };\n    case REQUEST_CARDS:\n      return {\n        ...state,\n        turnTimeoutInMillis: action.turnTimeoutInMillis,\n        turnRetriesLeft: action.turnRetriesLeft,\n      };\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\nexport type LobbyAction = SetLobbyPlayersAction;\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n\nexport interface State {\n  players: PlayerId[];\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n};\n\nexport function reducer(state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action } from 'redux';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  resetGame,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game';\nimport { setLobbyPlayers } from '../redux/lobby';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: Action) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      return dispatch(startGame(message.data.players));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(resetGame());\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards(message.data.timeoutInMillis, message.data.retriesLeft));\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport styled from 'styled-components';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nconst Element = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerIdList({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => <Element key={playerId}>{playerId}</Element>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\nimport { setPlayerId } from './game';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\nexport const UNAUTHENTICATE_WITH_ERROR = 'UNAUTHENTICATE_WITH_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\ninterface UnauthenticateWithErrorAction extends Action<typeof UNAUTHENTICATE_WITH_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError | UnauthenticateWithErrorAction;\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function unauthenticateWithError(message: string): AuthenticationAction {\n  return {\n    type: UNAUTHENTICATE_WITH_ERROR,\n    message,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n          dispatch(setPlayerId(subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport function reducer(state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    case UNAUTHENTICATE_WITH_ERROR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName, PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action, Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport PrimaryButton from './styled/Button';\nimport Game from './Game';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from './communication/webSocketServerApi';\nimport { State } from './redux';\nimport PlayerIdList from './PlayerIdList';\nimport { unauthenticateWithError } from './redux/authentication';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<Action>;\n  authenticationToken: string;\n  isGameStarted: boolean;\n  players: PlayerId[];\n}\n\nfunction Lobby({\n  dispatch, authenticationToken, isGameStarted, players,\n}: Props) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch),\n      () => dispatch(unauthenticateWithError('Could not contact the game server. Try again later...')));\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    subject.pipe(\n      filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION),\n    ).subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    });\n    return () => subject.complete();\n  }, [subject, authenticationToken]);\n\n  return (\n    <div className=\"Lobby\">\n      { isGameStarted\n        ? <Game serverApi={gameApi} />\n        : (\n          <>\n            <PlayerIdList playerIds={players} />\n            <PrimaryButton type=\"button\" onClick={gameApi.sendStartGame}>Start Game</PrimaryButton>\n          </>\n        ) }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isGameStarted: state.game.isRunning,\n  players: state.lobby.players,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport styled from 'styled-components';\nimport PrimaryButton from './styled/Button';\nimport { GameAction } from './redux/game';\nimport { authenticate } from './redux/authentication';\nimport { State } from './redux';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nconst Input = styled.input`\n  padding: 0.5em;\n  width: 100%;\n  height: 3em;\n  margin-bottom: 1em;\n  display: block;\n  font-size: 1em;\n`;\n\nconst SpacedForm = styled.form`\n  margin-bottom: 1em;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  padding: 0.5em;\n  width: 100%;\n  color: white;\n  font-weight: bold;\n`;\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <>\n      <h2>Login</h2>\n\n      <SpacedForm onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"Player name\"\n          id=\"name\"\n          value={nameInput}\n          onChange={handleNameChange}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n\n        <Input\n          placeholder=\"Access token\"\n          id=\"token\"\n          value={tokenInput}\n          onChange={handleTokenChange}\n          type=\"password\"\n          name=\"token\"\n          required\n        />\n\n        <PrimaryButton type=\"submit\">Log in</PrimaryButton>\n      </SpacedForm>\n\n      { error && <ErrorMessage>{error}</ErrorMessage>}\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Lobby from './Lobby';\nimport { State } from './redux';\nimport Login from './Login';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: auto;\n  padding: 0 2em;\n`;\n\nconst Footer = styled.footer`\n  text-align: center;\n  margin-bottom: 2em;\n`;\n\nconst Main = styled.main`\n  margin-bottom: 2em;\n`;\n\nconst MutedLink = styled.a`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <Container className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Agurk\n        </h1>\n      </header>\n      <Main>\n        { isAuthenticated ? <Lobby /> : <Login /> }\n      </Main>\n      <Footer>\n        <MutedLink href=\"https://github.com/SimonMueller/agurk-server#rules\">Read the rules</MutedLink>\n      </Footer>\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { reducer as authenticationReducer, State as AuthenticationState } from './authentication';\nimport { reducer as gameReducer, State as GameState } from './game';\nimport { reducer as lobbyReducer, State as LobbyState } from './lobby';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","export interface Theme {\n  colors: {\n    primary: string;\n    accent: string;\n    muted: string;\n    text: string;\n    error: string;\n    warn: string;\n    success: string;\n  };\n}\n\nconst theme: Theme = {\n  colors: {\n    primary: '#007fff',\n    accent: '#ff007f',\n    muted: '#737373',\n    text: '#000',\n    error: 'rgba(227, 38, 54, 0.9)',\n    warn: '#ff4f00',\n    success: 'rgba(0, 140, 0, 0.9)',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux/index';\nimport './index.css';\nimport theme from './styled/theme';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}