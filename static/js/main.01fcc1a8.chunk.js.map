{"version":3,"sources":["redux/authentication.action.ts","components/Message.tsx","components/Login.tsx","redux/game.action.ts","redux/lobby.action.ts","communication/webSocketServerApi.ts","components/board/PlayerIdList.tsx","components/Lobby.tsx","components/board/PlayingCard.tsx","components/board/SelectableCardList.tsx","components/board/Hand.tsx","components/Badge.tsx","components/board/Player.tsx","components/board/PlayerStateList.tsx","components/TextSecondTimer.tsx","redux/gameState.reducer.ts","components/board/Overview.tsx","components/board/Turn.tsx","components/board/TurnList.tsx","components/board/LastPlayedMaxCard.tsx","components/board/TurnStack.tsx","components/board/PlayedTurns.tsx","components/board/Board.tsx","components/Game.tsx","components/Header.tsx","components/App.tsx","serviceWorker.ts","theme.ts","redux/authentication.reducer.ts","redux/gamePlayers.reducer.ts","redux/game.reducer.ts","redux/lobby.reducer.ts","redux/root.reducer.ts","redux/store.ts","index.tsx"],"names":["authenticateWithToken","token","subject","type","unauthenticateWithError","message","authenticationError","extractSubjectFromToken","jwtDecode","sub","MessageBox","styled","Box","theme","severity","palette","main","Message","children","padding","connect","state","error","authentication","dispatch","useState","nameInput","setNameInput","tokenInput","setTokenInput","Container","maxWidth","Typography","variant","gutterBottom","marginBottom","onSubmit","event","data","name","fetch","process","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","preventDefault","TextField","label","id","value","onChange","target","fullWidth","margin","size","required","autoFocus","Button","color","addOutPlayers","outPlayers","setIsInGame","isInGame","sendStartGame","next","MessageName","START_GAME","sendPlayCards","cards","PLAY_CARDS","sendAuthenticate","AUTHENTICATE","PlayerIdList","playerItems","playerIds","map","playerId","ListItem","key","ListItemText","List","lobby","players","startGame","onClick","Card","Paper","selected","primary","breakpoints","values","sm","md","Image","img","generateCardKey","card","kind","JOKER_CARD_KIND","rank","suit","JokerCard","lowercaseColor","toLowerCase","src","alt","SuitCard","lowercaseSuit","cardSrcFile","PlayingCardPlaceholder","elevation","PlayingCard","isSelected","Flex","OverlappingBox","CardList","handleSelect","cardItems","ButtonBase","PlayTurn","handlePlayClick","Hand","playCards","cardsInHand","isServerRequestingCards","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","selectedCards","filter","span","typography","caption","fontSize","spacing","opacityPulse","keyframes","PlayerName","props","isOut","ActivePlayerName","InactivePlayerName","Player","player","penaltySum","penalties","reduce","accumulator","current","Badge","byOrderAsc","first","second","Math","sign","order","ActiveOrderedPlayers","orderedActivePlayers","sort","currentActivePlayerIndex","findIndex","isSingleActivePlayer","length","activePlayerItems","isCompleted","Step","active","completed","StepLabel","Stepper","orientation","OutPlayers","outPlayerItems","secondary","outReason","PlayerStateList","TextSecondTimer","timeoutInSeconds","timeLeftInSeconds","setTimeLeftInSeconds","interval","setInterval","clearInterval","prevState","GameStage","INITIAL_STATE","stage","START","validatedTurns","isLastCycleOfRound","turnTimeoutInMillis","undefined","turnRetriesLeft","BoldTypography","YourTurn","turnTimeoutInSeconds","Grid","container","justify","alignItems","TheirTurn","currentTurnPlayer","find","TurnIndicator","HighestCyclePlayers","highestCyclePlayerIds","isCycleHighestTurnPlayer","join","RoundWinner","roundWinner","isRoundWinner","GameWinner","gameWinner","isGameWinner","Overview","gameStage","IN_CYCLE","BETWEEN_CYCLES","BETWEEN_ROUNDS","END","generateTurnKey","turn","valid","createCardItems","marginRight","Valid","align","Invalid","invalidReason","Turn","TurnList","turnItems","turns","reduceRight","acc","Centered","div","toMaxRankedCard","maxRankCard","currentCard","compareRanks","LastPlayedMaxCard","playedCards","playedTurns","flatMap","highestPlayedCard","findLastTurn","MostRecentTurn","displayedTurn","setDisplayedTurn","previousTurn","previousValidTurn","timeout","setTimeout","clearTimeout","TurnStack","PlayedTurns","OverviewBox","PlayedTurnsBox","HandBox","PlayersBox","NavigationBox","ownProps","game","playerState","serverApi","closeGame","respondToAuthenticationRequestFromServer","authenticationToken","pipe","REQUEST_AUTHENTICATION","subscribe","bind","createAuthenticationApi","handleMessagesFromServer","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","BROADCAST_END_GAME","isValid","winner","errorMessage","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","isLastOfRound","BROADCAST_END_CYCLE","highestTurnPlayerIds","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","timeoutInMillis","retriesLeft","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","authenticatedSubject","webSocketSubject","webSocket","url","closeObserver","closeEvent","reason","gameApi","createGameApi","complete","Header","AppBar","position","Toolbar","href","isAuthenticated","paddingTop","Boolean","window","location","hostname","match","createMuiTheme","h1","h2","h3","h4","h5","h6","light","dark","contrastText","warning","info","success","responsiveFontSizes","filterPenaltiesForPlayerId","penalty","isPlayerIdOneOfHighestTurnPlayers","some","highestTurnPlayerId","isPlayerWithIdOut","outPlayer","findPlayerOutReason","foundOutPlayer","findPlayerOrder","INITIAL_PLAYER_STATE","combineReducers","action","BEFORE_CYCLE","gameReducer","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","injectFirst","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01fcc1a8.chunk.js","sourcesContent":["import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\nexport const UNAUTHENTICATE_WITH_ERROR = 'UNAUTHENTICATE_WITH_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\ninterface UnauthenticateWithErrorAction extends Action<typeof UNAUTHENTICATE_WITH_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError | UnauthenticateWithErrorAction;\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function unauthenticateWithError(message: string): AuthenticationAction {\n  return {\n    type: UNAUTHENTICATE_WITH_ERROR,\n    message,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { Box } from '@material-ui/core';\nimport { Severity, Theme } from '../theme';\n\ninterface Props {\n  children: ReactNode | ReactNode[];\n  severity: Severity;\n}\n\nconst MessageBox = styled(Box)`\n  width: 100%;\n  color: white;\n  background-color: ${({ theme, severity }: { theme: Theme, severity: Severity }) => (theme.palette[severity].main)};\n`;\n\nexport default function Message({ children, severity }: Props) {\n  return (\n    <MessageBox padding={1} severity={severity}>\n      {children}\n    </MessageBox>\n  );\n}\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport {\n  Button, Container, TextField, Typography, Box,\n} from '@material-ui/core';\nimport { GameAction } from '../redux/game.action';\nimport { authenticate } from '../redux/authentication.action';\nimport { State } from '../redux/root.reducer';\nimport Message from './Message';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: ChangeEvent<HTMLInputElement>) {\n    setNameInput(event.target.value);\n  }\n\n  function handleTokenChange(event: ChangeEvent<HTMLInputElement>) {\n    setTokenInput(event.target.value);\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h1\" gutterBottom>Login</Typography>\n\n      <Box marginBottom={2}>\n        <form onSubmit={handleSubmit}>\n          <Box marginBottom={1}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Player name\"\n              id=\"name\"\n              value={nameInput}\n              onChange={handleNameChange}\n              type=\"text\"\n              name=\"name\"\n              fullWidth\n              margin=\"dense\"\n              size=\"medium\"\n              required\n              autoFocus\n            />\n\n            <TextField\n              variant=\"outlined\"\n              label=\"Access token\"\n              id=\"token\"\n              value={tokenInput}\n              onChange={handleTokenChange}\n              type=\"password\"\n              name=\"token\"\n              fullWidth\n              margin=\"dense\"\n              size=\"medium\"\n              required\n            />\n          </Box>\n\n          <Button size=\"large\" fullWidth variant=\"contained\" color=\"secondary\" type=\"submit\">Log in</Button>\n        </form>\n      </Box>\n\n      { error && <Message severity=\"error\"><Typography variant=\"body1\">{error}</Typography></Message> }\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import {\n  Card, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const ADD_OUT_PLAYERS = 'SET_OUT_PLAYERS';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface AddOutPlayersAction extends Action<typeof ADD_OUT_PLAYERS> {\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly errorMessage: string;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n  readonly isLastOfRound: boolean;\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{\n  readonly turnTimeoutInMillis: number;\n  readonly turnRetriesLeft: number;\n}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | AddOutPlayersAction;\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(errorMessage: string): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    errorMessage,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function addOutPlayers(outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: ADD_OUT_PLAYERS,\n    outPlayers,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[], isLastOfRound: boolean): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n    isLastOfRound,\n  };\n}\n\nexport function endCycle(highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n  };\n}\n\nexport function requestCards(turnTimeoutInMillis: number, turnRetriesLeft: number): GameAction {\n  return {\n    type: REQUEST_CARDS,\n    turnTimeoutInMillis,\n    turnRetriesLeft,\n  };\n}\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\nexport const SET_IS_IN_GAME = 'SET_IS_IN_GAME';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface SetIsInGameAction extends Action<typeof SET_IS_IN_GAME> {\n  readonly isInGame: boolean;\n}\n\nexport type LobbyAction = SetLobbyPlayersAction | SetIsInGameAction;\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n\nexport function setIsInGame(isInGame: boolean): LobbyAction {\n  return {\n    type: SET_IS_IN_GAME,\n    isInGame,\n  };\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action, Dispatch } from 'redux';\nimport {\n  addOutPlayers,\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game.action';\nimport { setIsInGame, setLobbyPlayers } from '../redux/lobby.action';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: Dispatch<Action>) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      dispatch(startGame(message.data.players));\n      return dispatch(setIsInGame(true));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        return dispatch(endGameSuccess(message.data.winner));\n      }\n      return dispatch(endGameError(message.data.errorMessage));\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      dispatch(addOutPlayers(message.data.outPlayers));\n      return dispatch(endRound(message.data.winner, message.data.penalties));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers, message.data.isLastOfRound));\n    case MessageName.BROADCAST_END_CYCLE:\n      dispatch(addOutPlayers(message.data.outPlayers));\n      return dispatch(endCycle(message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards(message.data.timeoutInMillis, message.data.retriesLeft));\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport {\n  List, ListItem, ListItemText, Typography,\n} from '@material-ui/core';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nexport default function PlayerIdList({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => (\n    <ListItem key={playerId}>\n      <ListItemText>{playerId}</ListItemText>\n    </ListItem>\n  ));\n\n  return (\n    <div>\n      <Typography variant=\"h2\" gutterBottom>Players</Typography>\n\n      <List>\n        { playerItems }\n      </List>\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport PlayerIdList from './board/PlayerIdList';\nimport { State } from '../redux/root.reducer';\n\ninterface Props {\n  playerIds: PlayerId[];\n  startGame: () => void;\n}\n\nfunction Lobby({ playerIds, startGame }: Props) {\n  return (\n    <div>\n      <PlayerIdList playerIds={playerIds} />\n      <Button size=\"large\" fullWidth variant=\"contained\" color=\"secondary\" onClick={startGame}>\n        Start Game\n      </Button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  playerIds: state.lobby.players,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Paper } from '@material-ui/core';\nimport { Theme } from '../../theme';\n\ninterface PlayingCardProps {\n  card: CardData;\n  isSelected?: boolean;\n  size?: 'small' | 'normal';\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\ninterface StyledCardProps {\n  selected?: boolean;\n  size: 'small' | 'normal';\n  theme: Theme;\n}\n\nconst Card = styled(Paper)`\n  border-color: ${({ selected, theme }: StyledCardProps) => (\n    selected ? `${theme.palette.primary.main}` : 'transparent'\n  )};\n  border-width: 2px;\n  border-style: solid;\n  border-radius: 6%;\n  margin: auto;\n  width: ${({ size }: StyledCardProps) => (size === 'small' ? '4.5rem' : '5.5rem')};\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.sm)}px) {\n    width: ${({ size }: StyledCardProps) => (size === 'small' ? '5rem' : '6rem')};\n  }\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    width: ${({ size }: StyledCardProps) => (size === 'small' ? '5.5rem' : '6.5rem')};\n  }\n`;\n\nconst Image = styled.img`\n  width: 100%;\n`;\n\nexport function generateCardKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  const lowercaseColor = card.color.toLowerCase();\n  const cardSrcFile = '/agurk-client/images/joker.svg';\n  return <Image src={cardSrcFile} alt={`joker of rank ${card.rank} and color ${lowercaseColor}`} />;\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  const lowercaseSuit = card.suit.toLowerCase();\n  const cardSrcFile = `/agurk-client/images/${card.rank}-${lowercaseSuit}.svg`;\n  return <Image src={cardSrcFile} alt={`card of rank ${card.rank} and suit ${lowercaseSuit}`} />;\n}\n\nexport function PlayingCardPlaceholder({ size = 'normal' }: Pick<PlayingCardProps, 'size'>) {\n  const cardSrcFile = '/agurk-client/images/placeholder.svg';\n  return (\n    <Card elevation={6} size={size}>\n      <Image src={cardSrcFile} alt=\"card placeholder\" />\n    </Card>\n  );\n}\n\nexport default function PlayingCard({ card, isSelected = false, size = 'normal' }: PlayingCardProps) {\n  return (\n    <Card elevation={6} selected={isSelected} size={size}>\n      { card.kind === JOKER_CARD_KIND\n        ? <JokerCard card={card} />\n        : <SuitCard card={card} /> }\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Box, ButtonBase } from '@material-ui/core';\nimport PlayingCard, { generateCardKey } from './PlayingCard';\nimport { Theme } from '../../theme';\n\nexport type SelectableCard = CardData & { isSelected: boolean };\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nconst Flex = styled(Box)`\n  display: flex;\n  flex-wrap: wrap;\n  width: calc(100% - 3.25rem);\n\n @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.sm)}px) {\n    width: calc(100% - 2.5rem);\n  }\n`;\n\nconst OverlappingBox = styled(Box)`\n  margin-right: -3.25rem;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.sm)}px) {\n    margin-right: -2.5rem;\n  }\n`;\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <OverlappingBox key={generateCardKey(card)} marginBottom={1}>\n      <ButtonBase onClick={() => handleSelect(card)}>\n        <PlayingCard card={card} isSelected={card.isSelected} />\n      </ButtonBase>\n    </OverlappingBox>\n  ));\n\n  return (\n    <Flex marginBottom={1}>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport { Box, Button, Typography } from '@material-ui/core';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\n\ninterface Props {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n}\n\ninterface PlayTurnProps {\n  handlePlayClick: () => void;\n}\n\nfunction PlayTurn({ handlePlayClick }: PlayTurnProps) {\n  return (\n    <Button size=\"large\" fullWidth variant=\"contained\" color=\"secondary\" onClick={handlePlayClick}>\n      Play Cards\n    </Button>\n  );\n}\n\nexport default function Hand({ playCards, cardsInHand, isServerRequestingCards }: Props) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h2\" gutterBottom>Your hand</Typography>\n\n      <Box marginBottom={2}>\n        <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n      </Box>\n\n      { isServerRequestingCards && <PlayTurn handlePlayClick={playSelectedCards} /> }\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { Severity, Theme } from '../theme';\n\nexport default styled.span`\n  background-color: ${({ theme, severity }: { theme: Theme, severity: Severity }) => (theme.palette[severity].main)};\n  border-radius: 0.25rem;\n  font-size: ${({ theme }: { theme: Theme }) => (theme.typography.caption.fontSize)};\n  margin: 0 ${({ theme }: { theme: Theme }) => (theme.spacing(1))}px;\n  padding: 0.15rem 0.25rem;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: white;\n`;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Badge from '../Badge';\nimport { PlayerState } from '../../redux/gamePlayers.reducer';\n\ninterface Props {\n  player: PlayerState;\n}\n\nconst opacityPulse = keyframes`\n  0% {\n    opacity: 0.6;\n  }\n\n  50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0.6;\n  }\n`;\n\nconst PlayerName = styled.span`\n  text-decoration-line: ${(props: { isOut: boolean }) => (props.isOut ? 'line-through' : 'none')};\n`;\n\nconst ActivePlayerName = styled(PlayerName)`\n  animation: ${opacityPulse} 2s infinite;\n  font-weight: bold;\n`;\n\nconst InactivePlayerName = styled(PlayerName)`\n  font-weight: normal;\n`;\n\nexport default function Player({ player }: Props) {\n  const penaltySum = player.penalties.reduce((accumulator, current) => current.card.rank + accumulator, 0);\n\n  return (\n    <>\n      { player.isServerRequestingCards\n        ? <ActivePlayerName isOut={player.isOut}>{ player.id }</ActivePlayerName>\n        : <InactivePlayerName isOut={player.isOut}>{ player.id }</InactivePlayerName>}\n      <Badge severity=\"warning\">\n        Penalty\n        {' '}\n        {penaltySum}\n      </Badge>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  List, ListItem, ListItemText, Step, StepLabel, Stepper, Typography,\n} from '@material-ui/core';\nimport Player from './Player';\nimport { PlayerState } from '../../redux/gamePlayers.reducer';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nfunction byOrderAsc(first: PlayerState, second: PlayerState) {\n  return Math.sign(first.order - second.order);\n}\n\nfunction ActiveOrderedPlayers({ players }: Props) {\n  const orderedActivePlayers = players.filter((player) => !player.isOut).sort(byOrderAsc);\n  const currentActivePlayerIndex = orderedActivePlayers.findIndex((player) => player.isServerRequestingCards);\n  const isSingleActivePlayer = orderedActivePlayers.length === 1;\n  const activePlayerItems = orderedActivePlayers.map((player) => {\n    const isCompleted = currentActivePlayerIndex > player.order || isSingleActivePlayer;\n    return (\n      <Step\n        active={player.isServerRequestingCards}\n        completed={isCompleted}\n        key={player.id}\n      >\n        <StepLabel>\n          <Player player={player} />\n        </StepLabel>\n      </Step>\n    );\n  });\n\n  return activePlayerItems.length\n    ? <Stepper orientation=\"vertical\">{ activePlayerItems }</Stepper>\n    : null;\n}\n\nfunction OutPlayers({ players }: Props) {\n  const outPlayers = players.filter((player) => player.isOut);\n  const outPlayerItems = outPlayers.map((player) => (\n    <ListItem key={player.id}>\n      <ListItemText secondary={player.outReason}>\n        <Player player={player} />\n      </ListItemText>\n    </ListItem>\n  ));\n\n  return outPlayerItems.length\n    ? <List>{ outPlayerItems }</List>\n    : null;\n}\n\nexport default function PlayerStateList({ players }: Props) {\n  return (\n    <div>\n      <Typography variant=\"h2\" gutterBottom>Players</Typography>\n\n      <ActiveOrderedPlayers players={players} />\n      <OutPlayers players={players} />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  timeoutInSeconds: number;\n}\n\nexport default function TextSecondTimer({ timeoutInSeconds }: Props) {\n  const [timeLeftInSeconds, setTimeLeftInSeconds] = useState<number>(timeoutInSeconds);\n\n  useEffect(() => {\n    setTimeLeftInSeconds(timeoutInSeconds);\n  }, [timeoutInSeconds]);\n\n  useEffect(() => {\n    const interval: number = setInterval(() => {\n      const newTimeLeftInMillis = timeLeftInSeconds - 1;\n      return newTimeLeftInMillis < 0\n        ? clearInterval(interval)\n        : setTimeLeftInSeconds((prevState) => prevState - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  return (<>{ timeLeftInSeconds }</>);\n}\n","import { Card, ValidatedTurn } from 'agurk-shared';\nimport {\n  ADD_OUT_PLAYERS,\n  ADD_PLAYER_TURN,\n  END_CYCLE,\n  END_GAME_ERROR,\n  END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  REQUEST_CARDS,\n  RESET_GAME,\n  SET_CARDS_IN_HAND,\n  START_CYCLE,\n  START_GAME,\n  START_ROUND,\n} from './game.action';\n\nexport enum GameStage {\n  START = 'START',\n  END = 'END',\n  BETWEEN_ROUNDS = 'BETWEEN_ROUNDS',\n  BETWEEN_CYCLES = 'BETWEEN_CYCLES',\n  BEFORE_CYCLE = 'BEFORE_CYCLE',\n  IN_CYCLE = 'IN_CYCLE',\n}\n\nexport interface State {\n  stage: GameStage;\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  isLastCycleOfRound: boolean;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\nconst INITIAL_STATE: State = {\n  stage: GameStage.START,\n  validatedTurns: [],\n  cardsInHand: [],\n  isLastCycleOfRound: false,\n  turnTimeoutInMillis: undefined,\n  turnRetriesLeft: 0,\n};\n\nexport default function (state = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case ADD_OUT_PLAYERS:\n      return state;\n    case START_GAME:\n      return { ...state, stage: GameStage.START };\n    case END_GAME_SUCCESS:\n      return { ...state, stage: GameStage.END };\n    case RESET_GAME:\n      return INITIAL_STATE;\n    case END_GAME_ERROR:\n      return { ...state, stage: GameStage.END };\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n      };\n    case START_ROUND:\n      return { ...state, stage: GameStage.BEFORE_CYCLE };\n    case END_ROUND:\n      return { ...state, stage: GameStage.BETWEEN_ROUNDS };\n    case START_CYCLE:\n      return {\n        ...state,\n        stage: GameStage.IN_CYCLE,\n        validatedTurns: [],\n        isLastCycleOfRound: action.isLastOfRound,\n      };\n    case END_CYCLE:\n      return { ...state, stage: GameStage.BETWEEN_CYCLES };\n    case REQUEST_CARDS:\n      return {\n        ...state,\n        turnTimeoutInMillis: action.turnTimeoutInMillis,\n        turnRetriesLeft: action.turnRetriesLeft,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Grid, Typography } from '@material-ui/core';\nimport TextSecondTimer from '../TextSecondTimer';\nimport { GameStage } from '../../redux/gameState.reducer';\nimport { PlayerState } from '../../redux/gamePlayers.reducer';\n\ninterface Props {\n  isServerRequestingCards: boolean;\n  players: PlayerState[];\n  turnRetriesLeft: number;\n  turnTimeoutInSeconds: number | undefined;\n  gameStage: GameStage;\n}\n\nconst BoldTypography = styled(Typography)`\n  font-weight: bold;\n`;\n\nfunction YourTurn({ turnTimeoutInSeconds, turnRetriesLeft }: Pick<Props, 'turnTimeoutInSeconds' | 'turnRetriesLeft'>) {\n  return (\n    <Grid container justify=\"space-between\" alignItems=\"baseline\">\n      <Typography variant=\"h2\">\n        Your turn\n        { ' ' }\n      </Typography>\n      { turnTimeoutInSeconds && (\n        <BoldTypography variant=\"subtitle1\">\n          <TextSecondTimer timeoutInSeconds={turnTimeoutInSeconds} />\n          { ' ' }\n          seconds and\n          { ' ' }\n          { turnRetriesLeft }\n          { ' ' }\n          { turnRetriesLeft === 1\n            ? 'retry left'\n            : 'retries left' }\n        </BoldTypography>\n      ) }\n    </Grid>\n  );\n}\n\nfunction TheirTurn({ players }: Pick<Props, 'players'>) {\n  const currentTurnPlayer = players.find((player) => player.isServerRequestingCards);\n  return (\n    <Typography variant=\"h2\">\n      { currentTurnPlayer?.id }\n      { '\\'s turn' }\n    </Typography>\n  );\n}\n\nfunction TurnIndicator({\n  isServerRequestingCards, players, turnTimeoutInSeconds, turnRetriesLeft,\n}: Pick<Props, 'turnTimeoutInSeconds' | 'turnRetriesLeft' | 'players' | 'isServerRequestingCards'>) {\n  return (isServerRequestingCards\n    ? <YourTurn turnTimeoutInSeconds={turnTimeoutInSeconds} turnRetriesLeft={turnRetriesLeft} />\n    : <TheirTurn players={players} />\n  );\n}\n\nfunction HighestCyclePlayers({ players }: Pick<Props, 'players'>) {\n  const highestCyclePlayerIds = players\n    .filter((player) => player.isCycleHighestTurnPlayer)\n    .map((player) => player.id);\n\n  if (highestCyclePlayerIds.length === 0) {\n    return <Typography variant=\"h2\">No cycle winner</Typography>;\n  }\n\n  return (\n    <Typography variant=\"h2\">\n      { highestCyclePlayerIds.join(' and ') }\n      { ' ' }\n      { highestCyclePlayerIds.length === 1\n        ? 'wins the cycle'\n        : 'win the cycle' }\n    </Typography>\n  );\n}\n\nfunction RoundWinner({ players }: Pick<Props, 'players'>) {\n  const roundWinner = players.find((player) => player.isRoundWinner);\n  return (\n    <Typography variant=\"h2\">\n      { roundWinner\n        ? `${roundWinner.id} wins the round`\n        : 'No round winner' }\n    </Typography>\n  );\n}\n\nfunction GameWinner({ players }: Pick<Props, 'players'>) {\n  const gameWinner = players.find((player) => player.isGameWinner);\n  return (\n    <Typography variant=\"h2\">\n      { gameWinner\n        ? `${gameWinner.id} wins the game 🎉🎉`\n        : 'No game winner' }\n    </Typography>\n  );\n}\n\nexport default function Overview({\n  isServerRequestingCards, players, turnTimeoutInSeconds, turnRetriesLeft, gameStage,\n}: Props) {\n  switch (gameStage) {\n    case GameStage.IN_CYCLE:\n      return (\n        <TurnIndicator\n          isServerRequestingCards={isServerRequestingCards}\n          players={players}\n          turnRetriesLeft={turnRetriesLeft}\n          turnTimeoutInSeconds={turnTimeoutInSeconds}\n        />\n      );\n    case GameStage.BETWEEN_CYCLES:\n      return (\n        <HighestCyclePlayers players={players} />\n      );\n    case GameStage.BETWEEN_ROUNDS:\n      return (\n        <RoundWinner players={players} />\n      );\n    case GameStage.END:\n      return (\n        <GameWinner players={players} />\n      );\n    default:\n      return null;\n  }\n}\n","import React from 'react';\nimport { InvalidTurn, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport PlayingCard, { generateCardKey, PlayingCardPlaceholder } from './PlayingCard';\nimport Badge from '../Badge';\n\ninterface Props {\n  turn: ValidatedTurn;\n}\n\nexport function generateTurnKey(turn: ValidatedTurn): string {\n  return turn.playerId + turn.valid;\n}\n\nfunction createCardItems(turn: ValidatedTurn) {\n  return turn.cards.map((card) => (\n    <Box marginRight={1} key={generateCardKey(card)}>\n      <PlayingCard size=\"small\" card={card} />\n    </Box>\n  ));\n}\n\nfunction Valid({ turn }: { turn: ValidTurn }) {\n  const cardItems = createCardItems(turn);\n\n  return (\n    <>\n      <Box marginBottom={1}>\n        <Grid container justify=\"center\">\n          { cardItems }\n        </Grid>\n      </Box>\n      <Typography variant=\"body1\" align=\"center\">\n        {turn.playerId}\n      </Typography>\n    </>\n  );\n}\n\nfunction Invalid({ turn }: { turn: InvalidTurn }) {\n  const cardItems = createCardItems(turn);\n\n  return (\n    <>\n      <Box marginBottom={1}>\n        <Grid container justify=\"center\">\n          { cardItems.length === 0\n            ? <PlayingCardPlaceholder size=\"small\" />\n            : cardItems }\n        </Grid>\n      </Box>\n      <Typography variant=\"body1\" align=\"center\">\n        {turn.playerId}\n      </Typography>\n      <Typography variant=\"body1\" align=\"center\">\n        <Badge severity=\"error\">\n          {turn.invalidReason}\n        </Badge>\n      </Typography>\n    </>\n  );\n}\n\nexport default function Turn({ turn }: Props) {\n  return (\n    <Box>\n      {turn.valid\n        ? <Valid turn={turn} />\n        : <Invalid turn={turn} />}\n    </Box>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport { Box, Grid } from '@material-ui/core';\nimport Turn, { generateTurnKey } from './Turn';\n\ninterface Props {\n  turns: ValidatedTurn[];\n}\n\nexport default function TurnList({ turns }: Props) {\n  const mostRecentPlayerTurns = turns.reduceRight<ValidatedTurn[]>((acc, current) => {\n    const isMostRecentPlayerTurn = acc.find((turn) => turn.playerId === current.playerId) === undefined;\n    return isMostRecentPlayerTurn\n      ? [current, ...acc]\n      : acc;\n  }, []);\n  const turnItems = mostRecentPlayerTurns.map((turn) => (\n    <Box marginRight={1} marginBottom={1} key={generateTurnKey(turn)}>\n      <Turn turn={turn} />\n    </Box>\n  ));\n\n  return (\n    <Grid container>\n      { turnItems }\n    </Grid>\n  );\n}\n","import React from 'react';\nimport {\n  Card, compareRanks, ValidatedTurn, ValidTurn,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Box } from '@material-ui/core';\nimport PlayingCard, { PlayingCardPlaceholder } from './PlayingCard';\nimport Badge from '../Badge';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nfunction toMaxRankedCard(maxRankCard: Card, currentCard: Card) {\n  return compareRanks(maxRankCard, currentCard) > 0 ? maxRankCard : currentCard;\n}\n\nexport default function LastPlayedMaxCard({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid) as ValidTurn[];\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n  const highestPlayedCard = playedCards.length > 0\n    ? <PlayingCard size=\"small\" card={playedCards.reduce(toMaxRankedCard)} />\n    : <PlayingCardPlaceholder size=\"small\" />;\n\n  return (\n    <Box>\n      <Box marginBottom={1}>\n        { highestPlayedCard }\n      </Box>\n      <Centered>\n        <Badge severity=\"info\">Highest card</Badge>\n      </Centered>\n    </Box>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport { Box, Grid } from '@material-ui/core';\nimport Turn from './Turn';\nimport LastPlayedMaxCard from './LastPlayedMaxCard';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nfunction findLastTurn(playedTurns: ValidatedTurn[]): ValidatedTurn | undefined {\n  return playedTurns[playedTurns.length - 1];\n}\n\nfunction MostRecentTurn({ playedTurns }: Props) {\n  const [displayedTurn, setDisplayedTurn] = useState<ValidatedTurn | undefined>(undefined);\n  const SHOW_INVALID_TURN_TIMEOUT = 2000;\n\n  useEffect(() => {\n    const previousTurn = findLastTurn(playedTurns);\n    setDisplayedTurn(previousTurn);\n\n    if (previousTurn && !previousTurn.valid) {\n      const validTurns = playedTurns.filter((turn) => turn.valid);\n      const previousValidTurn = findLastTurn(validTurns);\n\n      const timeout: number = setTimeout(() => {\n        setDisplayedTurn(previousValidTurn);\n      }, SHOW_INVALID_TURN_TIMEOUT);\n      return () => clearTimeout(timeout);\n    }\n  }, [playedTurns]);\n\n  return displayedTurn\n    ? <Turn turn={displayedTurn} />\n    : null;\n}\n\nexport default function TurnStack({ playedTurns }: Props) {\n  return (\n    <Grid container>\n      <Box marginBottom={1} marginRight={2}>\n        <LastPlayedMaxCard playedTurns={playedTurns} />\n      </Box>\n      <Box marginBottom={1}>\n        <MostRecentTurn playedTurns={playedTurns} />\n      </Box>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport TurnList from './TurnList';\nimport TurnStack from './TurnStack';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n  isLastCycleOfRound: boolean;\n}\n\nexport default function PlayedTurns({ playedTurns, isLastCycleOfRound }: Props) {\n  return isLastCycleOfRound\n    ? <TurnList turns={playedTurns} />\n    : <TurnStack playedTurns={playedTurns} />;\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, PlayerId, ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Action, Dispatch } from 'redux';\nimport { Box, Button } from '@material-ui/core';\nimport Hand from './Hand';\nimport PlayerStateList from './PlayerStateList';\nimport { State } from '../../redux/root.reducer';\nimport { WebSocketGameApi } from '../../communication/webSocketServerApi';\nimport { resetGame } from '../../redux/game.action';\nimport Overview from './Overview';\nimport { setIsInGame } from '../../redux/lobby.action';\nimport PlayedTurns from './PlayedTurns';\nimport { Theme } from '../../theme';\nimport { GameStage } from '../../redux/gameState.reducer';\nimport { PlayerState } from '../../redux/gamePlayers.reducer';\n\ninterface Props {\n  playerId: PlayerId;\n  state: {\n    players: PlayerState[]\n    playedTurns: ValidatedTurn[];\n    cardsInHand: Card[];\n    playerState: PlayerState | undefined;\n    stage: GameStage;\n    isLastCycleOfRound: boolean;\n    turnTimeoutInSeconds: number | undefined;\n    turnRetriesLeft: number;\n  };\n  playCards: (cards: Card[]) => void;\n  closeGame: () => void;\n}\n\nconst Grid = styled.div`\n  display: grid;\n  row-gap: ${({ theme }: { theme: Theme }) => (theme.spacing(2))}px;\n  margin-bottom: ${({ theme }: { theme: Theme }) => (theme.spacing(2))}px;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    grid-template-columns: 30% 65%;\n    grid-template-rows: auto auto auto;\n    column-gap: 5%;\n    row-gap: 2em;\n  }\n`;\n\nconst OverviewBox = styled(Box)`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 1;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 1;\n    grid-row-end: span 1;\n  }\n`;\n\nconst PlayedTurnsBox = styled(Box)`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 2;\n  grid-row-end: span 1;\n  min-height: 25vh;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 2;\n    grid-row-end: span 1;\n  }\n`;\n\nconst HandBox = styled(Box)`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 3;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 3;\n    grid-row-end: span 1;\n  }\n`;\n\nconst PlayersBox = styled(Box)`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 4;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    grid-column-start: 1;\n    grid-column-end: span 1;\n    grid-row-start: 1;\n    grid-row-end: span 2;\n  }\n`;\n\nconst NavigationBox = styled(Box)`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 6;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.values.md)}px) {\n    grid-column-start: 1;\n    grid-column-end: span 1;\n    grid-row-start: 3;\n    grid-row-end: span 1;\n  }\n`;\n\nfunction Board({ state, playCards, closeGame }: Props) {\n  useEffect(() => closeGame, [closeGame]);\n\n  if (!state.playerState) {\n    return <p>Loading game...</p>;\n  }\n\n  return (\n    <Grid>\n      <OverviewBox>\n        <Overview\n          gameStage={state.stage}\n          isServerRequestingCards={state.playerState.isServerRequestingCards}\n          players={state.players}\n          turnTimeoutInSeconds={state.turnTimeoutInSeconds}\n          turnRetriesLeft={state.turnRetriesLeft}\n        />\n      </OverviewBox>\n      <PlayedTurnsBox>\n        <PlayedTurns playedTurns={state.playedTurns} isLastCycleOfRound={state.isLastCycleOfRound} />\n      </PlayedTurnsBox>\n      <HandBox>\n        <Hand\n          isServerRequestingCards={state.playerState.isServerRequestingCards}\n          cardsInHand={state.cardsInHand}\n          playCards={playCards}\n        />\n      </HandBox>\n      <PlayersBox>\n        <PlayerStateList players={state.players} />\n      </PlayersBox>\n      { state.stage === GameStage.END\n        && (\n        <NavigationBox>\n          <Button fullWidth variant=\"contained\" color=\"secondary\" onClick={closeGame}>\n            Return to lobby\n          </Button>\n        </NavigationBox>\n        )}\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi, playerId: PlayerId }) => ({\n  state: {\n    cardsInHand: state.game.state.cardsInHand,\n    players: state.game.players,\n    stage: state.game.state.stage,\n    playedTurns: state.game.state.validatedTurns,\n    playerState: state.game.players.find((player) => player.id === ownProps.playerId),\n    playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n    isLastCycleOfRound: state.game.state.isLastCycleOfRound,\n    turnTimeoutInSeconds: state.game.state.turnTimeoutInMillis\n      ? state.game.state.turnTimeoutInMillis / 1000\n      : undefined,\n    turnRetriesLeft: state.game.state.turnRetriesLeft,\n  },\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  closeGame: () => {\n    dispatch(resetGame());\n    dispatch(setIsInGame(false));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action, Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from '../communication/webSocketServerApi';\nimport { State } from '../redux/root.reducer';\nimport { unauthenticateWithError } from '../redux/authentication.action';\nimport Lobby from './Lobby';\nimport Board from './board/Board';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<Action>;\n  authenticatedSubject: string;\n  authenticationToken: string;\n  isInGame: boolean;\n}\n\nfunction respondToAuthenticationRequestFromServer(\n  subject: WebSocketSubject<Message>,\n  authenticationToken: string,\n  dispatch: Dispatch<Action>,\n) {\n  subject.pipe(filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION))\n    .subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    },\n    () => dispatch(unauthenticateWithError('Could not authenticate with the game server. Try to login again...')));\n}\n\nfunction handleMessagesFromServer(subject: WebSocketSubject<Message>, dispatch: Dispatch<Action>) {\n  subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch),\n    () => dispatch(unauthenticateWithError('Could not contact the game server. Try again later...')));\n}\n\nfunction Game({\n  dispatch, authenticationToken, isInGame, authenticatedSubject,\n}: Props) {\n  const webSocketSubject: WebSocketSubject<Message> = webSocket({\n    url: WSS_SERVER_URI,\n    closeObserver: {\n      next: (closeEvent: CloseEvent) => dispatch(unauthenticateWithError(closeEvent.reason)),\n    },\n  });\n  const [subject] = useState(webSocketSubject);\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    handleMessagesFromServer(subject, dispatch);\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    respondToAuthenticationRequestFromServer(subject, authenticationToken, dispatch);\n    return () => subject.complete();\n  }, [subject, dispatch, authenticationToken]);\n\n  return (\n    <>\n      { isInGame\n        ? <Board playerId={authenticatedSubject} serverApi={gameApi} />\n        : <Lobby startGame={gameApi.sendStartGame} /> }\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  authenticatedSubject: state.authentication.subject,\n  isInGame: state.lobby.isInGame,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport {\n  AppBar, Button, Toolbar, Typography,\n} from '@material-ui/core';\n\nexport default function Header() {\n  return (\n    <header>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Button color=\"inherit\" href=\"./\">\n            <Typography variant=\"h5\">\n              Agurk\n            </Typography>\n          </Button>\n          <Button\n            color=\"inherit\"\n            target=\"_blank\"\n            href=\"https://github.com/SimonMueller/agurk-server/blob/master/README.md#rules\"\n          >\n            <Typography variant=\"body1\">\n              Rules\n            </Typography>\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </header>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Box } from '@material-ui/core';\nimport { State } from '../redux/root.reducer';\nimport Login from './Login';\nimport Game from './Game';\nimport Header from './Header';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <>\n      <Header />\n      <main>\n        <Container maxWidth=\"md\">\n          <Box paddingTop={2}>\n            { isAuthenticated ? <Game /> : <Login /> }\n          </Box>\n        </Container>\n      </main>\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme, responsiveFontSizes, Theme as MuiTheme } from '@material-ui/core';\n\nexport type Severity = 'warning' | 'info' | 'error' | 'success';\n\nexport type Theme = MuiTheme;\n\nconst theme: Theme = createMuiTheme({\n  typography: {\n    h1: { fontSize: '3rem' },\n    h2: { fontSize: '2.25rem' },\n    h3: { fontSize: '1.75rem' },\n    h4: { fontSize: '1.5rem' },\n    h5: { fontSize: '1.25rem' },\n    h6: { fontSize: '1rem' },\n  },\n  palette: {\n    primary: {\n      light: '#48a999',\n      main: '#00695c',\n      dark: '#004c40',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#9162e4',\n      main: '#5e35b1',\n      dark: '#280680',\n      contrastText: '#fff',\n    },\n    error: {\n      light: '#ff5131',\n      main: '#d50000',\n      dark: '#9b0000',\n      contrastText: '#fff',\n    },\n    warning: {\n      light: '#ff7539',\n      main: '#ff3d00',\n      dark: '#c30000',\n      contrastText: '#000',\n    },\n    info: {\n      light: '#48a999',\n      main: '#00695c',\n      dark: '#004c40',\n      contrastText: '#fff',\n    },\n    success: {\n      light: '#5efc82',\n      main: '#00c853',\n      dark: '#009624',\n      contrastText: '#000',\n    },\n  },\n});\n\nexport default responsiveFontSizes(theme);\n","import {\n  AUTHENTICATE_WITH_TOKEN,\n  AUTHENTICATION_ERROR,\n  AuthenticationAction,\n  UNAUTHENTICATE_WITH_ERROR,\n} from './authentication.action';\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport default function (state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    case UNAUTHENTICATE_WITH_ERROR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import { OutPlayer, Penalty, PlayerId } from 'agurk-shared';\nimport {\n  ADD_OUT_PLAYERS,\n  ADD_PLAYER_TURN,\n  END_CYCLE,\n  END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  RESET_GAME,\n  START_CYCLE,\n  START_GAME,\n  START_PLAYER_TURN,\n} from './game.action';\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], player: PlayerState) {\n  const foundOutPlayer = outPlayers.find((outPlayer) => outPlayer.id === player.id);\n  return foundOutPlayer\n    ? true\n    : player.isOut;\n}\n\nfunction findPlayerOutReason(outPlayers: OutPlayer[], player: PlayerState) {\n  const foundOutPlayer = outPlayers.find((outPlayer) => outPlayer.id === player.id);\n  return foundOutPlayer\n    ? foundOutPlayer.reason\n    : player.outReason;\n}\n\nfunction findPlayerOrder(orderedPlayerIds: PlayerId[], player: PlayerState) {\n  return orderedPlayerIds.findIndex((playerId) => playerId === player.id);\n}\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  outReason?: string;\n  isServerRequestingCards: boolean;\n  order: number;\n}\n\nexport type State = PlayerState[];\n\nconst INITIAL_STATE: State = [];\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n  order: -1,\n};\n\nexport default function (state = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case ADD_OUT_PLAYERS:\n      return state.map((player) => ({\n        ...player,\n        isOut: isPlayerWithIdOut(action.outPlayers, player),\n        outReason: findPlayerOutReason(action.outPlayers, player),\n      }));\n    case START_GAME:\n      return action.playerIds.map((playerId) => ({\n        ...INITIAL_PLAYER_STATE,\n        id: playerId,\n      }));\n    case END_GAME_SUCCESS:\n      return state.map((player) => ({\n        ...player,\n        isGameWinner: player.id === action.winner,\n      }));\n    case RESET_GAME:\n      return INITIAL_STATE;\n    case ADD_PLAYER_TURN:\n      return state.map((player) => ({\n        ...player,\n        isServerRequestingCards: action.turn.playerId === player.id ? false : player.isServerRequestingCards,\n      }));\n    case END_ROUND:\n      return state.map((player) => ({\n        ...player,\n        penalties: [\n          ...player.penalties,\n          ...filterPenaltiesForPlayerId(action.penalties, player.id),\n        ],\n        isRoundWinner: player.id === action.winner,\n      }));\n    case START_CYCLE:\n      return state.map((player) => ({ ...player, order: findPlayerOrder(action.orderedPlayerIds, player) }));\n    case END_CYCLE:\n      return state.map((player) => ({\n        ...player,\n        isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n      }));\n    case START_PLAYER_TURN:\n      return state.map((player) => ({\n        ...player,\n        isServerRequestingCards: action.playerId === player.id,\n      }));\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport playerReducer, { PlayerState } from './gamePlayers.reducer';\nimport stateReducer, { State as GameState } from './gameState.reducer';\n\nexport interface State {\n  state: GameState;\n  players: PlayerState[];\n}\n\nexport default combineReducers<State>({\n  players: playerReducer,\n  state: stateReducer,\n});\n","import { PlayerId } from 'agurk-shared';\nimport { LobbyAction, SET_IS_IN_GAME, SET_LOBBY_PLAYERS } from './lobby.action';\n\nexport interface State {\n  players: PlayerId[];\n  isInGame: boolean;\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n  isInGame: false,\n};\n\nexport default function (state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    case SET_IS_IN_GAME:\n      return {\n        ...state,\n        isInGame: action.isInGame,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport authenticationReducer, { State as AuthenticationState } from './authentication.reducer';\nimport gameReducer, { State as GameState } from './game.reducer';\nimport lobbyReducer, { State as LobbyState } from './lobby.reducer';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from './root.reducer';\n\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { StylesProvider as MuiStylesProvider } from '@material-ui/core/styles';\nimport { ThemeProvider as StyledComponentsThemeProvider } from 'styled-components';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'typeface-roboto';\nimport theme from './theme';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiThemeProvider theme={theme}>\n      <StyledComponentsThemeProvider theme={theme}>\n        <MuiStylesProvider injectFirst>\n          <App />\n        </MuiStylesProvider>\n      </StyledComponentsThemeProvider>\n    </MuiThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}