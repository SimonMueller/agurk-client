{"version":3,"sources":["styled/Button.tsx","redux/authentication.action.ts","Login.tsx","redux/game.action.ts","communication/webSocketServerApi.ts","PlayerIdList.tsx","Lobby.tsx","PlayingCard.tsx","SelectableCardList.tsx","TextSecondTimer.tsx","Hand.tsx","styled/Badge.tsx","Player.tsx","PlayerStateList.tsx","Turn.tsx","TurnList.tsx","Stack.tsx","Protocol.tsx","Board.tsx","Game.tsx","redux/lobby.action.ts","App.tsx","serviceWorker.ts","redux/authentication.reducer.ts","redux/game.reducer.ts","redux/lobby.reducer.ts","redux/index.ts","styled/theme.ts","index.tsx"],"names":["styled","button","theme","colors","primary","authenticateWithToken","token","subject","type","unauthenticateWithError","message","authenticationError","extractSubjectFromToken","jwtDecode","sub","Input","input","SpacedForm","form","ErrorMessage","div","error","connect","state","authentication","dispatch","useState","nameInput","setNameInput","tokenInput","setTokenInput","onSubmit","event","data","name","fetch","process","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","playerId","preventDefault","placeholder","id","value","onChange","currentTarget","required","sendStartGame","next","MessageName","START_GAME","sendPlayCards","cards","PLAY_CARDS","sendAuthenticate","AUTHENTICATE","Element","li","PlayerIdList","playerItems","playerIds","map","key","Lobby","players","startGame","onClick","CardRankText","p","CardAttributeText","Card","isSelected","text","CardPlaceholder","generateCardKey","card","kind","JOKER_CARD_KIND","color","rank","suit","JokerCard","SuitCard","PlayingCard","PlayingCardPlaceholder","Flex","Box","UnstyledButton","CardList","handleSelect","cardItems","TextSecondTimer","timeoutInSeconds","timeLeftInSeconds","setTimeLeftInSeconds","useEffect","interval","setInterval","clearInterval","MutedParagraph","muted","PlayTurn","handlePlayClick","turnTimeoutInMillis","turnRetriesLeft","Hand","playCards","cardsInHand","isServerRequestingCards","selectableCards","setSelectableCards","clicked","cardEquals","selectedCards","filter","span","PenaltyBadge","Badge","warn","opacityPulse","keyframes","PlayerName","props","isOut","ActivePlayerName","InactivePlayerName","Player","player","penaltySum","penalties","reduce","accumulator","current","Li","PlayerStateList","MutedFlex","CardBox","Centered","TurnBox","ErrorBadge","generateTurnKey","turn","valid","Valid","InvalidHiddenAfterTimeout","isVisible","setIsVisible","timeout","setTimeout","clearTimeout","length","invalidReason","Turn","TurnList","turnItems","turns","SuccessBadge","success","LastPlayedMaxCard","playedCards","playedTurns","flatMap","highestPlayedCard","maxRankCard","currentCard","compareRanks","Stack","ScrolledUl","ul","Protocol","entryItems","entries","entry","ownProps","game","validatedTurns","playerState","find","serverApi","protocolEntries","protocol","reset","isGameStarted","isRunning","lobby","authenticationToken","webSocket","gameApi","bind","createGameApi","subscribe","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","BROADCAST_END_GAME","isValid","winner","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","outPlayers","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayerIds","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","timeoutInMillis","retriesLeft","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","complete","pipe","REQUEST_AUTHENTICATION","createAuthenticationApi","Container","Footer","footer","Main","main","MutedLink","isAuthenticated","className","href","Boolean","window","location","hostname","match","INITIAL_STATE","undefined","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerId","filterAvailableCardsAfterTurn","cardInHand","turnCard","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","combineReducers","action","join","Date","toString","Math","random","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d889ec9f.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport default styled.button`\n  display: inline-block;\n  font-size: 1em;\n  height: 3em;\n  padding: 0.75em;\n  width: 100%;\n  background-color: transparent;\n  border: 2px solid ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n  font-weight: bold;\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n\n  &:hover {\n    background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n    color: white;\n    cursor: pointer;\n  }\n`;\n","import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\nimport { setPlayerId } from './game.action';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\nexport const UNAUTHENTICATE_WITH_ERROR = 'UNAUTHENTICATE_WITH_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\ninterface UnauthenticateWithErrorAction extends Action<typeof UNAUTHENTICATE_WITH_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError | UnauthenticateWithErrorAction;\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function unauthenticateWithError(message: string): AuthenticationAction {\n  return {\n    type: UNAUTHENTICATE_WITH_ERROR,\n    message,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n          dispatch(setPlayerId(subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport styled from 'styled-components';\nimport PrimaryButton from './styled/Button';\nimport { GameAction } from './redux/game.action';\nimport { authenticate } from './redux/authentication.action';\nimport { State } from './redux';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nconst Input = styled.input`\n  padding: 0.5em;\n  width: 100%;\n  height: 3em;\n  margin-bottom: 1em;\n  display: block;\n  font-size: 1em;\n`;\n\nconst SpacedForm = styled.form`\n  margin-bottom: 1em;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  padding: 0.5em;\n  width: 100%;\n  color: white;\n  font-weight: bold;\n`;\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <>\n      <h2>Login</h2>\n\n      <SpacedForm onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"Player name\"\n          id=\"name\"\n          value={nameInput}\n          onChange={handleNameChange}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n\n        <Input\n          placeholder=\"Access token\"\n          id=\"token\"\n          value={tokenInput}\n          onChange={handleTokenChange}\n          type=\"password\"\n          name=\"token\"\n          required\n        />\n\n        <PrimaryButton type=\"submit\">Log in</PrimaryButton>\n      </SpacedForm>\n\n      { error && <ErrorMessage>{error}</ErrorMessage>}\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import {\n  Card, Error, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_PLAYER_ID = 'SET_PLAYER_ID';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface SetPlayerIdAction extends Action<typeof SET_PLAYER_ID> {\n  readonly playerId: PlayerId;\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{\n  readonly turnTimeoutInMillis: number;\n  readonly turnRetriesLeft: number;\n}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | SetPlayerIdAction;\n\nexport function setPlayerId(playerId: string): GameAction {\n  return {\n    type: SET_PLAYER_ID,\n    playerId,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(turnTimeoutInMillis: number, turnRetriesLeft: number): GameAction {\n  return {\n    type: REQUEST_CARDS,\n    turnTimeoutInMillis,\n    turnRetriesLeft,\n  };\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action } from 'redux';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  resetGame,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game.action';\nimport { setLobbyPlayers } from '../redux/lobby.action';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: Action) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      return dispatch(startGame(message.data.players));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(resetGame());\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards(message.data.timeoutInMillis, message.data.retriesLeft));\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport styled from 'styled-components';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nconst Element = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerIdList({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => <Element key={playerId}>{playerId}</Element>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport PrimaryButton from './styled/Button';\nimport PlayerIdList from './PlayerIdList';\n\ninterface Props {\n  players: PlayerId[];\n  startGame: () => void;\n}\n\nexport default function Lobby({ players, startGame }: Props) {\n  return (\n    <div>\n      <PlayerIdList playerIds={players} />\n      <PrimaryButton type=\"button\" onClick={startGame}>Start Game</PrimaryButton>\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Theme } from './styled/theme';\n\ninterface PlayingCardProps {\n  card: CardData;\n  isSelected?: boolean;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nconst CardRankText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 3em;\n  margin: 0;\n`;\n\nconst CardAttributeText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 0.7em;\n  margin: 0;\n`;\n\nconst Card = styled.div`\n  color: ${({ isSelected, theme }: { isSelected: boolean, theme: Theme }) => (\n    isSelected ? `${theme.colors.primary}` : ` ${theme.colors.text}`\n  )};\n  border: 1px solid;\n  border-radius: 4px;\n  width: 4.5em;\n  height: 7em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n`;\n\nconst CardPlaceholder = styled(Card)`\n  border: ${({ theme }: { theme: Theme }) => (`1px dotted ${theme.colors.text}`)};\n`;\n\nexport function generateCardKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <>\n      <CardRankText>\n        J\n      </CardRankText>\n      <CardAttributeText>\n        { card.color }\n      </CardAttributeText>\n    </>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <>\n      <CardRankText>\n        { card.rank }\n      </CardRankText>\n      <CardAttributeText>\n        { card.suit }\n      </CardAttributeText>\n    </>\n  );\n}\n\nexport default function PlayingCard({ card, isSelected = false }: PlayingCardProps) {\n  return (\n    <Card isSelected={isSelected}>\n      { card.kind === JOKER_CARD_KIND\n        ? <JokerCard card={card} />\n        : <SuitCard card={card} /> }\n    </Card>\n  );\n}\n\nexport function PlayingCardPlaceholder() {\n  return (\n    <CardPlaceholder isSelected={false} />\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { generateCardKey } from './PlayingCard';\n\nexport type SelectableCard = CardData & { isSelected: boolean };\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 1em;\n  justify-content: center;\n`;\n\nconst Box = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst UnstyledButton = styled.button`\n  all: unset;\n  cursor: pointer;\n`;\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <Box key={generateCardKey(card)}>\n      <UnstyledButton onClick={() => handleSelect(card)}>\n        <PlayingCard card={card} isSelected={card.isSelected} />\n      </UnstyledButton>\n    </Box>\n  ));\n\n  return (\n    <Flex>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  timeoutInSeconds: number;\n}\n\nexport default function TextSecondTimer({ timeoutInSeconds }: Props) {\n  const [timeLeftInSeconds, setTimeLeftInSeconds] = useState<number>(timeoutInSeconds);\n\n  useEffect(() => {\n    const interval: number = setInterval(() => {\n      const newTimeLeftInMillis = timeLeftInSeconds - 1;\n      return newTimeLeftInMillis < 0\n        ? clearInterval(interval)\n        : setTimeLeftInSeconds(timeLeftInSeconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  return (<>{ timeLeftInSeconds }</>);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport styled from 'styled-components';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\nimport PrimaryButton from './styled/Button';\nimport TextSecondTimer from './TextSecondTimer';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\ninterface PlayTurnProps {\n  handlePlayClick: () => void;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\nconst MutedParagraph = styled.p`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n  text-align: center;\n`;\n\nfunction PlayTurn({ handlePlayClick, turnTimeoutInMillis, turnRetriesLeft }: PlayTurnProps) {\n  return (\n    <>\n      <PrimaryButton type=\"button\" onClick={handlePlayClick}>\n      Play Cards\n        { ' ' }\n        { turnTimeoutInMillis && (\n        <span>\n          (\n          <TextSecondTimer timeoutInSeconds={turnTimeoutInMillis / 1000} />\n          )\n        </span>\n        ) }\n      </PrimaryButton>\n\n      <MutedParagraph>\n        { turnRetriesLeft }\n        { ' ' }\n        { turnRetriesLeft === 1\n          ? 'Retry left'\n          : 'Retries left' }\n      </MutedParagraph>\n    </>\n  );\n}\n\nexport default function Hand({\n  playCards, cardsInHand, isServerRequestingCards, turnTimeoutInMillis, turnRetriesLeft,\n}: Props) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n\n      { isServerRequestingCards\n        && (\n          <PlayTurn\n            handlePlayClick={playSelectedCards}\n            turnTimeoutInMillis={turnTimeoutInMillis}\n            turnRetriesLeft={turnRetriesLeft}\n          />\n        )}\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport default styled.span`\n  background-color: transparent;\n  border-radius: 0.25em;\n  font-size: 0.7em;\n  margin: 0 0.5em;\n  padding: 0.15em 0.25em;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { PlayerState } from './redux/game.reducer';\nimport Badge from './styled/Badge';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  player: PlayerState;\n}\n\nexport const PenaltyBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.warn)};\n  color: white;\n`;\n\nconst opacityPulse = keyframes`\n  0% {\n    opacity: 0.6;\n  }\n\n  50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0.6;\n  }\n`;\n\nconst PlayerName = styled.span`\n  text-decoration-line: ${(props: { isOut: boolean }) => (props.isOut ? 'line-through' : 'none')};\n`;\n\nconst ActivePlayerName = styled(PlayerName)`\n  animation: ${opacityPulse} 2s infinite;\n  font-weight: bold;\n`;\n\nconst InactivePlayerName = styled(PlayerName)`\n  font-weight: normal;\n`;\n\nexport default function Player({ player }: Props) {\n  const penaltySum = player.penalties.reduce((accumulator, current) => current.card.rank + accumulator, 0);\n\n  return (\n    <>\n      { player.isServerRequestingCards\n        ? <ActivePlayerName isOut={player.isOut}>{ player.id }</ActivePlayerName>\n        : <InactivePlayerName isOut={player.isOut}>{ player.id }</InactivePlayerName>}\n      <PenaltyBadge>\n        Penalty\n        {' '}\n        {penaltySum}\n      </PenaltyBadge>\n    </>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Player from './Player';\nimport { PlayerState } from './redux/game.reducer';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nconst Li = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerStateList({ players }: Props) {\n  const playerItems = players.map((player) => <Li key={player.id}><Player player={player} /></Li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { InvalidTurn, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport PlayingCard, { generateCardKey, PlayingCardPlaceholder } from './PlayingCard';\nimport Badge from './styled/Badge';\nimport { Theme } from './styled/theme';\n\ninterface Props {\n  turn: ValidatedTurn;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MutedFlex = styled(Flex)`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n`;\n\nconst CardBox = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst TurnBox = styled.div`\n  margin-right: 1em;\n`;\n\nexport const ErrorBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  color: white;\n`;\n\nexport function generateTurnKey(turn: ValidatedTurn): string {\n  return turn.playerId + turn.valid;\n}\n\nfunction Valid({ turn }: { turn: ValidTurn }) {\n  const cardItems = turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard card={card} />\n    </CardBox>\n  ));\n\n  return (\n    <TurnBox>\n      <Flex>\n        { cardItems }\n      </Flex>\n      <Centered><span>{turn.playerId}</span></Centered>\n    </TurnBox>\n  );\n}\n\nfunction InvalidHiddenAfterTimeout({ turn }: { turn: InvalidTurn }) {\n  const SHOW_INVALID_TURN_TIMEOUT = 2000;\n  const [isVisible, setIsVisible] = useState<boolean>(true);\n  const cardItems = turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard key={generateCardKey(card)} card={card} />\n    </CardBox>\n  ));\n\n  useEffect(() => {\n    const timeout: number = setTimeout(() => {\n      setIsVisible(false);\n    }, SHOW_INVALID_TURN_TIMEOUT);\n    return () => clearTimeout(timeout);\n  });\n\n  return isVisible\n    ? (\n      <TurnBox>\n        <MutedFlex>\n          { cardItems.length === 0\n            ? <PlayingCardPlaceholder />\n            : cardItems }\n        </MutedFlex>\n        <Centered><span>{turn.playerId}</span></Centered>\n        <Centered>\n          <ErrorBadge>{turn.invalidReason}</ErrorBadge>\n        </Centered>\n      </TurnBox>\n    )\n    : null;\n}\n\nexport default function Turn({ turn }: Props) {\n  return turn.valid\n    ? <Valid turn={turn} />\n    : <InvalidHiddenAfterTimeout turn={turn} />;\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport Turn, { generateTurnKey } from './Turn';\n\ninterface Props {\n  turns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport default function TurnList({ turns }: Props) {\n  const turnItems = turns.map((turn) => (<Turn key={generateTurnKey(turn)} turn={turn} />));\n\n  return (\n    <Flex>\n      { turnItems }\n    </Flex>\n  );\n}\n","import React from 'react';\nimport { compareRanks, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { PlayingCardPlaceholder } from './PlayingCard';\nimport { Theme } from './styled/theme';\nimport Badge from './styled/Badge';\nimport TurnList from './TurnList';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Box = styled.div`\n  margin-right: 1em;\n  margin-bottom: 1em;\n`;\n\nexport const SuccessBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.success)};\n  color: white;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst CardBox = styled.div`\n  margin-bottom: 0.5em;\n`;\n\nfunction LastPlayedMaxCard({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid) as ValidTurn[];\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n  const highestPlayedCard = playedCards.length > 0\n    ? (\n      <PlayingCard card={playedCards.reduce(\n        (maxRankCard, currentCard) => (compareRanks(maxRankCard, currentCard) > 0 ? maxRankCard : currentCard),\n      )}\n      />\n    )\n    : <PlayingCardPlaceholder />;\n\n  return (\n    <>\n      <CardBox>\n        { highestPlayedCard }\n      </CardBox>\n      <Centered>\n        <SuccessBadge>Highest played card</SuccessBadge>\n      </Centered>\n    </>\n  );\n}\n\nexport default function Stack({ playedTurns }: Props) {\n  return (\n    <div>\n      <h2>Stack</h2>\n\n      <Flex>\n        <Box>\n          <LastPlayedMaxCard playedTurns={playedTurns} />\n        </Box>\n        <Box>\n          <TurnList turns={playedTurns} />\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ProtocolEntry } from './redux/game.reducer';\n\ninterface Props {\n  entries: ProtocolEntry[];\n}\n\nconst ScrolledUl = styled.ul`\n  overflow-y: auto;\n  max-height: 25vh;\n`;\n\nexport default function Protocol({ entries }: Props) {\n  const entryItems = entries.map((entry) => <li>{entry.message}</li>);\n\n  return (\n    <div>\n      <h2>Protocol</h2>\n\n      <ScrolledUl>\n        { entryItems }\n      </ScrolledUl>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Action, Dispatch } from 'redux';\nimport Hand from './Hand';\nimport PlayerStateList from './PlayerStateList';\nimport Stack from './Stack';\nimport { State } from './redux';\nimport { WebSocketGameApi } from './communication/webSocketServerApi';\nimport { resetGame } from './redux/game.action';\nimport { PlayerState, ProtocolEntry } from './redux/game.reducer';\nimport Protocol from './Protocol';\n\ninterface Props {\n  state: {\n    players: PlayerState[]\n    playedTurns: ValidatedTurn[];\n    cardsInHand: Card[];\n    playerState: PlayerState;\n    turnTimeoutInMillis: number | undefined;\n    turnRetriesLeft: number;\n    protocolEntries: ProtocolEntry[];\n  };\n  playCards: (cards: Card[]) => void;\n  reset: () => void;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Box = styled.div`\n  flex-grow: 1;\n  flex-shrink: 0;\n  flex-basis: 300px;\n`;\n\nfunction Board({ state, playCards, reset }: Props) {\n  useEffect(() => reset, [reset]);\n\n  return (\n    <div>\n      <Stack playedTurns={state.playedTurns} />\n      <Hand\n        isServerRequestingCards={state.playerState.isServerRequestingCards}\n        turnTimeoutInMillis={state.turnTimeoutInMillis}\n        turnRetriesLeft={state.turnRetriesLeft}\n        cardsInHand={state.cardsInHand}\n        playCards={playCards}\n      />\n      <Flex>\n        <Box>\n          <PlayerStateList players={state.players} />\n        </Box>\n        <Box>\n          <Protocol entries={state.protocolEntries} />\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi }) => ({\n  state: {\n    cardsInHand: state.game.cardsInHand,\n    players: state.game.players,\n    playedTurns: state.game.validatedTurns,\n    playerState: state.game.players.find((player) => player.id === state.game.playerId) as PlayerState,\n    playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n    turnTimeoutInMillis: state.game.turnTimeoutInMillis,\n    turnRetriesLeft: state.game.turnRetriesLeft,\n    protocolEntries: state.game.protocol,\n  },\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  reset: () => dispatch(resetGame()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName, PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action, Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from './communication/webSocketServerApi';\nimport { State } from './redux';\nimport { unauthenticateWithError } from './redux/authentication.action';\nimport Lobby from './Lobby';\nimport Board from './Board';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<Action>;\n  authenticationToken: string;\n  isGameStarted: boolean;\n  playerIds: PlayerId[];\n}\n\nfunction Game({\n  dispatch, authenticationToken, isGameStarted, playerIds,\n}: Props) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch),\n      () => dispatch(unauthenticateWithError('Could not contact the game server. Try again later...')));\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    subject.pipe(\n      filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION),\n    ).subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    },\n    () => dispatch(unauthenticateWithError('Could not authenticate with the game server. Try to login again...')));\n    return () => subject.complete();\n  }, [subject, dispatch, authenticationToken]);\n\n  return (\n    <>\n      { isGameStarted\n        ? <Board serverApi={gameApi} />\n        : <Lobby startGame={gameApi.sendStartGame} players={playerIds} /> }\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isGameStarted: state.game.isRunning,\n  playerIds: state.lobby.players,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\nexport type LobbyAction = SetLobbyPlayersAction;\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { State } from './redux';\nimport Login from './Login';\nimport { Theme } from './styled/theme';\nimport Game from './Game';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: auto;\n  padding: 0 2em;\n`;\n\nconst Footer = styled.footer`\n  text-align: center;\n  margin-bottom: 2em;\n`;\n\nconst Main = styled.main`\n  margin-bottom: 2em;\n`;\n\nconst MutedLink = styled.a`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <Container className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Agurk\n        </h1>\n      </header>\n      <Main>\n        { isAuthenticated ? <Game /> : <Login /> }\n      </Main>\n      <Footer>\n        <MutedLink href=\"https://github.com/SimonMueller/agurk-server#rules\">Read the rules</MutedLink>\n      </Footer>\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  AUTHENTICATE_WITH_TOKEN,\n  AUTHENTICATION_ERROR,\n  AuthenticationAction,\n  UNAUTHENTICATE_WITH_ERROR,\n} from './authentication.action';\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport default function (state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    case UNAUTHENTICATE_WITH_ERROR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Card, cardEquals, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport {\n  ADD_PLAYER_TURN,\n  END_CYCLE,\n  END_GAME_ERROR, END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  REQUEST_CARDS,\n  RESET_GAME,\n  SET_CARDS_IN_HAND,\n  SET_PLAYER_ID, START_CYCLE,\n  START_GAME,\n  START_PLAYER_TURN,\n  START_ROUND,\n} from './game.action';\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface ProtocolEntry {\n  message: string;\n}\n\nexport interface State {\n  isRunning: boolean;\n  playerId: PlayerId | undefined;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number,\n  protocol: ProtocolEntry[],\n}\n\nconst INITIAL_STATE: State = {\n  isRunning: false,\n  playerId: undefined,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n  turnTimeoutInMillis: undefined,\n  turnRetriesLeft: 0,\n  protocol: [],\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nexport default function (state: State = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case SET_PLAYER_ID:\n      return {\n        ...state,\n        playerId: action.playerId,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        isRunning: true,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n          isServerRequestingCards: false,\n        })),\n        validatedTurns: [],\n        cardsInHand: [],\n        protocol: [\n          {\n            message: `${action.winner} wins the game`,\n          },\n          ...state.protocol,\n        ],\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          ...INITIAL_PLAYER_STATE,\n        })),\n        ...INITIAL_STATE,\n        playerId: state.playerId,\n      };\n    case END_GAME_ERROR:\n      return {\n        ...state,\n        protocol: [\n          {\n            message: `${action.error.message}`,\n          },\n          ...state.protocol,\n        ],\n      };\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.turn.playerId === player.id ? false : player.isServerRequestingCards,\n        })),\n        cardsInHand: (action.turn.playerId === state.playerId && action.turn.valid\n          ? filterAvailableCardsAfterTurn(state.cardsInHand, action.turn)\n          : state.cardsInHand),\n        protocol: action.turn.valid\n          ? [\n            {\n              message: `\n                ${action.turn.playerId} plays\n                ${action.turn.cards.length > 1 ? 'cards' : 'card'}\n                with\n                ${action.turn.cards.length > 1 ? 'ranks' : 'rank'}\n                ${action.turn.cards.map((card) => card.rank).join(', ')}`,\n            },\n            ...state.protocol,\n          ]\n          : state.protocol,\n      };\n    case START_ROUND:\n      return state;\n    case END_ROUND:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n        protocol: [\n          {\n            message: `${action.winner} wins the current round`,\n          },\n          ...action.penalties.map((penalty) => ({\n            id: new Date().toString() + Math.random(),\n            message: `${penalty.playerId} gets a penalty of ${penalty.card.rank}`,\n          })),\n          ...state.protocol,\n        ],\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        validatedTurns: [],\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n        })),\n        protocol: [\n          ...action.highestTurnPlayerIds.map((playerId) => ({\n            message: `${playerId} played the highest card in cycle`,\n          })),\n          ...state.protocol,\n        ],\n      };\n    case REQUEST_CARDS:\n      return {\n        ...state,\n        turnTimeoutInMillis: action.turnTimeoutInMillis,\n        turnRetriesLeft: action.turnRetriesLeft,\n      };\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import { PlayerId } from 'agurk-shared';\nimport { LobbyAction, SET_LOBBY_PLAYERS } from './lobby.action';\n\nexport interface State {\n  players: PlayerId[];\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n};\n\nexport default function (state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport authenticationReducer, { State as AuthenticationState } from './authentication.reducer';\nimport gameReducer, { State as GameState } from './game.reducer';\nimport lobbyReducer, { State as LobbyState } from './lobby.reducer';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","export interface Theme {\n  colors: {\n    primary: string;\n    muted: string;\n    text: string;\n    error: string;\n    warn: string;\n    success: string;\n  };\n}\n\nconst theme: Theme = {\n  colors: {\n    primary: '#2a52be',\n    muted: '#737373',\n    text: '#000',\n    error: '#ff033e',\n    warn: '#ff4f00',\n    success: 'rgba(0, 140, 0, 0.9)',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux/index';\nimport './index.css';\nimport theme from './styled/theme';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}