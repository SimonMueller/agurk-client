{"version":3,"sources":["styled/button.tsx","PlayingCard.tsx","SelectableCardList.tsx","Hand.tsx","Player.tsx","styled/list.tsx","Players.tsx","Turn.tsx","TurnList.tsx","Stack.tsx","Game.tsx","redux/game.ts","redux/lobby.ts","communication/webSocketServerApi.ts","PlayerIds.tsx","Lobby.tsx","redux/authentication.ts","styled/form.tsx","Login.tsx","App.tsx","serviceWorker.ts","redux/index.ts","index.tsx"],"names":["PrimaryButton","styled","button","FullWidthPrimaryButton","CardRankText","p","CardAttributeText","Card","div","props","isSelected","JokerCard","card","color","SuitCard","rank","suit","PlayingCard","kind","JOKER_CARD_KIND","Flex","Box","UnstyledButton","CardList","cards","handleSelect","cardItems","map","onClick","Centered","Hand","playCards","cardsInHand","isServerRequestingCards","useState","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","type","selectedCards","filter","PlayerStatus","span","isOut","Badge","Player","player","penaltySum","penalties","reduce","accumulator","current","id","ul","Players","playerItems","players","key","CenteredParagraph","Turn","turn","playerId","TurnList","turns","Stack","validTurns","playedTurns","valid","connect","state","ownProps","game","validatedTurns","playerState","find","serverApi","sendPlayCards","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","outPlayers","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerIds","highestTurnPlayerId","filterAvailableCardsAfterTurn","cardInHand","undefined","turnCard","INITIAL_STATE","isRunning","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","sendStartGame","subject","next","name","MessageName","START_GAME","PLAY_CARDS","data","sendAuthenticate","token","AUTHENTICATE","PlayerIds","playerIds","isGameStarted","lobby","authenticationToken","authentication","dispatch","webSocket","process","gameApi","bind","createGameApi","subscribe","message","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","startGame","BROADCAST_END_GAME","isValid","winner","error","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","complete","pipe","REQUEST_AUTHENTICATION","createAuthenticationApi","className","isAuthenticated","authenticateWithToken","authenticationError","extractSubjectFromToken","jwtDecode","sub","Input","input","Label","label","ErrorMessage","nameInput","setNameInput","tokenInput","setTokenInput","onSubmit","event","fetch","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","preventDefault","htmlFor","value","onChange","currentTarget","required","Container","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bbb5030.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const PrimaryButton = styled.button`\n  display: inline-block;\n  padding: 0.5rem;\n  width: 10rem;\n  background: transparent;\n  border: 2px solid black;\n\n  &:hover {\n    font-weight: bold;\n    cursor: pointer;\n  }\n`;\n\nexport const FullWidthPrimaryButton = styled(PrimaryButton)`\n  width: 100%;\n`;\n","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\nimport styled from 'styled-components';\n\ninterface PlayingCardProps {\n  card: CardData;\n  isSelected?: boolean;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nconst CardRankText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 3em;\n  margin: 0;\n`;\n\nconst CardAttributeText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 1em;\n  margin: 0;\n`;\n\nconst Card = styled.div`\n  outline: ${(props: { isSelected: boolean }) => (props.isSelected ? '2px solid #007fff' : '1px solid grey')};\n  width: 7em;\n  height: 11em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <>\n      <CardRankText>\n        J\n      </CardRankText>\n      <CardAttributeText>\n        { card.color }\n      </CardAttributeText>\n    </>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <>\n      <CardRankText>\n        { card.rank }\n      </CardRankText>\n      <CardAttributeText>\n        { card.suit }\n      </CardAttributeText>\n    </>\n  );\n}\n\nexport default function PlayingCard({ card, isSelected = false }: PlayingCardProps) {\n  return (\n    <Card isSelected={isSelected}>\n      { card.kind === JOKER_CARD_KIND\n        ? <JokerCard card={card} />\n        : <SuitCard card={card} /> }\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard from './PlayingCard';\n\nexport type SelectableCard = CardData & { isSelected: boolean };\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Box = styled.div`\n   padding: 1em;\n`;\n\nconst UnstyledButton = styled.button`\n  all: unset;\n  cursor: pointer;\n`;\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <Box>\n      <UnstyledButton onClick={() => handleSelect(card)}>\n        <PlayingCard card={card} isSelected={card.isSelected} />\n      </UnstyledButton>\n    </Box>\n  ));\n\n  return (\n    <Flex>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport styled from 'styled-components';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\nimport { FullWidthPrimaryButton } from './styled/button';\n\ninterface HandProps {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n}\n\nconst Centered = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function Hand({ playCards, cardsInHand, isServerRequestingCards }: HandProps) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n\n      <br />\n\n      <Centered>\n        { isServerRequestingCards\n          && <FullWidthPrimaryButton type=\"button\" onClick={playSelectedCards}>Play Cards</FullWidthPrimaryButton>}\n      </Centered>\n    </div>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  player: PlayerState;\n}\n\nconst PlayerStatus = styled.span`\n  text-decoration-line: ${(props: { isOut: boolean }) => (props.isOut ? 'line-through' : 'none')};\n`;\n\nconst Badge = styled.span`\n  background-color: rgba(227, 38, 54, 0.9);\n  color: white;\n  border-radius: 0.2em;\n  font-size: 0.75em;\n  padding: 0.1rem;\n  font-weight: bold;\n`;\n\nexport default function Player({ player }: Props) {\n  const penaltySum = player.penalties.reduce((accumulator, current) => current.card.rank + accumulator, 0);\n\n  return (\n    <>\n      <PlayerStatus isOut={player.isOut}>\n        { player.isServerRequestingCards && <span>--&gt;</span> }\n        {' '}\n        { player.id }\n        {' '}\n        <Badge>\n          Penalty:\n          {penaltySum}\n        </Badge>\n      </PlayerStatus>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport default styled.ul`\n  padding: 0;\n  list-style-type: none;\n`;\n","import React from 'react';\nimport Player from './Player';\nimport { PlayerState } from './redux/game';\nimport UnstyledList from './styled/list';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nexport default function Players({ players }: Props) {\n  const playerItems = players.map((player) => <li key={player.id}><Player player={player} /></li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <UnstyledList>\n        { playerItems }\n      </UnstyledList>\n    </div>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ValidatedTurn } from 'agurk-shared';\nimport PlayingCard from './PlayingCard';\n\ninterface Props {\n  turn: ValidatedTurn;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Box = styled.div`\n   padding-right: 1em;\n`;\n\nconst CenteredParagraph = styled.p`\n  text-align: center;\n`;\n\nexport default function Turn({ turn }: Props) {\n  const cardItems = turn.cards.map((card) => (\n    <Box>\n      <PlayingCard card={card} />\n    </Box>\n  ));\n\n  return (\n    <>\n      <Flex>\n        { cardItems }\n      </Flex>\n      <CenteredParagraph>{turn.playerId}</CenteredParagraph>\n    </>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport Turn from './Turn';\n\ninterface Props {\n  turns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Box = styled.div`\n   padding-right: 1em;\n`;\n\nexport default function TurnList({ turns }: Props) {\n  const cardItems = turns.map((turn) => (\n    <Box>\n      <Turn turn={turn} />\n    </Box>\n  ));\n\n  return (\n    <Flex>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport TurnList from './TurnList';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nexport default function Stack({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid);\n\n  return (\n    <div>\n      <h2>Stack</h2>\n\n      <TurnList turns={validTurns} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport Hand from './Hand';\nimport Players from './Players';\nimport Stack from './Stack';\nimport { State } from './redux';\nimport { WebSocketGameApi } from './communication/webSocketServerApi';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  players: PlayerState[];\n  playedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  playCards: (cards: Card[]) => void;\n  playerState: PlayerState;\n}\n\nfunction Game({\n  players, playedTurns, cardsInHand, playCards, playerState,\n}: Props) {\n  return (\n    <div>\n      <Players players={players} />\n      <Stack playedTurns={playedTurns} />\n      <Hand\n        isServerRequestingCards={playerState.isServerRequestingCards}\n        cardsInHand={cardsInHand}\n        playCards={playCards}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi }) => ({\n  cardsInHand: state.game.cardsInHand,\n  players: state.game.players,\n  playedTurns: state.game.validatedTurns,\n  playerState: state.game.players.find((player) => player.id === state.game.playerId) as PlayerState,\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\nexport default connect(mapStateToProps)(Game);\n","import {\n  Card, cardEquals, Error, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_PLAYER_ID = 'SET_PLAYER_ID';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface SetPlayerIdAction extends Action<typeof SET_PLAYER_ID> {\n  readonly playerId: PlayerId;\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | SetPlayerIdAction;\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface State {\n  isRunning: boolean;\n  playerId: PlayerId | undefined;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n}\n\nexport function setPlayerId(playerId: string): GameAction {\n  return {\n    type: SET_PLAYER_ID,\n    playerId,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(): GameAction {\n  return {\n    type: REQUEST_CARDS,\n  };\n}\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nconst INITIAL_STATE: State = {\n  isRunning: false,\n  playerId: undefined,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nexport function reducer(state: State = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case SET_PLAYER_ID:\n      return {\n        ...state,\n        playerId: action.playerId,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        isRunning: true,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n          isServerRequestingCards: false,\n        })),\n        validatedTurns: [],\n        cardsInHand: [],\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          ...INITIAL_PLAYER_STATE,\n        })),\n        ...INITIAL_STATE,\n      };\n    case END_GAME_ERROR:\n      return state;\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n        cardsInHand: (action.turn.playerId === state.playerId && action.turn.valid\n          ? filterAvailableCardsAfterTurn(state.cardsInHand, action.turn)\n          : state.cardsInHand),\n      };\n    case START_ROUND:\n      return state;\n    case END_ROUND:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        validatedTurns: [],\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isServerRequestingCards: false,\n        })),\n      };\n    case REQUEST_CARDS:\n      return state;\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\nexport type LobbyAction = SetLobbyPlayersAction;\n\nexport interface State {\n  players: PlayerId[];\n}\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n};\n\nexport function reducer(state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action } from 'redux';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  resetGame,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game';\nimport { setLobbyPlayers } from '../redux/lobby';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: Action) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      return dispatch(startGame(message.data.players));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(resetGame());\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards());\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport UnstyledList from './styled/list';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nexport default function PlayerIds({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => <li key={playerId}>{playerId}</li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <UnstyledList>\n        { playerItems }\n      </UnstyledList>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName, PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { PrimaryButton } from './styled/button';\nimport Game from './Game';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from './communication/webSocketServerApi';\nimport { State } from './redux';\nimport PlayerIds from './PlayerIds';\nimport { GameAction } from './redux/game';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<GameAction>;\n  authenticationToken: string;\n  isGameStarted: boolean;\n  players: PlayerId[];\n}\n\nfunction Lobby({\n  dispatch, authenticationToken, isGameStarted, players,\n}: Props) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch));\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    subject.pipe(\n      filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION),\n    ).subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    });\n    return () => subject.complete();\n  }, [subject, authenticationToken]);\n\n  return (\n    <div className=\"Lobby\">\n      { isGameStarted\n        ? <Game serverApi={gameApi} />\n        : (\n          <>\n            <PlayerIds playerIds={players} />\n            <PrimaryButton type=\"button\" onClick={gameApi.sendStartGame}>Start Game</PrimaryButton>\n          </>\n        ) }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isGameStarted: state.game.isRunning,\n  players: state.lobby.players,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\nimport { setPlayerId } from './game';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError;\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n          dispatch(setPlayerId(subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n\nexport function reducer(state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 0.5rem;\n  width: 100%;\n  margin-bottom: 1rem;\n  display: block;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-style: italic;\n  margin-bottom: 0.25rem;\n`;\n\nexport const ErrorMessage = styled.div`\n  background-color: rgba(227, 38, 54, 0.9);\n  padding: 0.5rem;\n  width: 100%;\n  color: white;\n  font-weight: bold;\n`;\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { FullWidthPrimaryButton } from './styled/button';\nimport { GameAction } from './redux/game';\nimport { authenticate } from './redux/authentication';\nimport { State } from './redux';\nimport { ErrorMessage, Input, Label } from './styled/form';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <Label htmlFor=\"name\">Player name</Label>\n        <Input id=\"name\" value={nameInput} onChange={handleNameChange} type=\"text\" name=\"name\" required />\n\n        <Label htmlFor=\"name\">Access token</Label>\n        <Input id=\"token\" value={tokenInput} onChange={handleTokenChange} type=\"password\" name=\"token\" required />\n\n        <FullWidthPrimaryButton type=\"submit\">Log in</FullWidthPrimaryButton>\n      </form>\n\n      <br />\n\n      { error && <ErrorMessage>{error}</ErrorMessage>}\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Lobby from './Lobby';\nimport { State } from './redux';\nimport Login from './Login';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nconst Container = styled.div`\n  max-width: 50rem;\n  margin: auto;\n  padding: 2rem;\n`;\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <Container className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Agurk\n        </h1>\n      </header>\n\n      <main>\n        { isAuthenticated ? <Lobby /> : <Login /> }\n      </main>\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { reducer as authenticationReducer, State as AuthenticationState } from './authentication';\nimport { reducer as gameReducer, State as GameState } from './game';\nimport { reducer as lobbyReducer, State as LobbyState } from './lobby';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux/index';\nimport './index.css';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}