{"version":3,"sources":["logo.svg","Card.tsx","SelectableCardList.tsx","Hand.tsx","Player.tsx","Players.tsx","CardList.tsx","Stack.tsx","Game.tsx","redux/game.ts","redux/lobby.ts","communication/webSocketServerApi.ts","PlayerIds.tsx","Lobby.tsx","redux/authentication.ts","Login.tsx","App.tsx","serviceWorker.ts","redux/index.ts","index.tsx"],"names":["module","exports","JokerCard","card","kind","color","SuitCard","suit","rank","generateKey","JOKER_CARD_KIND","Card","CardList","cards","handleSelect","cardItems","map","key","type","checked","isSelected","onChange","PlayTurn","playSelectedCards","onClick","Hand","playCards","cardsInHand","isServerRequestingCards","useState","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","selectedCards","filter","Player","player","id","Players","playerItems","players","Stack","playedCards","playedTurns","turn","valid","flatMap","connect","state","ownProps","game","validatedTurns","playerState","find","playerId","serverApi","sendPlayCards","INITIAL_STATE","isRunning","undefined","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","penalties","isOut","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","outPlayers","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerIds","highestTurnPlayerId","filterAvailableCardsAfterTurn","cardInHand","turnCard","sendStartGame","subject","next","name","MessageName","START_GAME","PLAY_CARDS","data","sendAuthenticate","token","AUTHENTICATE","PlayerIds","playerIds","isGameStarted","lobby","authenticationToken","authentication","dispatch","webSocket","process","gameApi","bind","createGameApi","subscribe","message","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","startGame","BROADCAST_END_GAME","isValid","winner","error","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","complete","pipe","REQUEST_AUTHENTICATION","createAuthenticationApi","className","isAuthenticated","authenticateWithToken","authenticationError","extractSubjectFromToken","jwtDecode","sub","nameInput","setNameInput","tokenInput","setTokenInput","onSubmit","event","fetch","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","preventDefault","htmlFor","value","currentTarget","required","src","logo","alt","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec7cfc98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\n\ninterface CardProps {\n  card: CardData;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <div>\n      { card.kind }\n      { ' ' }\n      { card.color }\n    </div>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <div>\n      { card.suit }\n      {' '}\n      { card.rank }\n    </div>\n  );\n}\n\nexport function generateKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nexport default function Card({ card }: CardProps) {\n  return (\n    card.kind === JOKER_CARD_KIND\n      ? <JokerCard card={card} />\n      : <SuitCard card={card} />\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport Card, { generateKey } from './Card';\n\ninterface Selectable {\n  isSelected: boolean;\n}\n\nexport type SelectableCard = Selectable & CardData;\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <li key={generateKey(card)}>\n      <input type=\"checkbox\" checked={card.isSelected} onChange={() => handleSelect(card)} />\n      <Card card={card} />\n    </li>\n  ));\n\n  return (\n    <ul>\n      { cardItems }\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\n\ninterface HandProps {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n}\n\ninterface PlayTurnProps {\n  playSelectedCards: () => void;\n}\n\nfunction PlayTurn({ playSelectedCards }: PlayTurnProps) {\n  return (\n    <div>\n      <button type=\"button\" onClick={playSelectedCards}>Play Cards</button>\n    </div>\n  );\n}\n\nexport default function Hand({ playCards, cardsInHand, isServerRequestingCards }: HandProps) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n      { isServerRequestingCards && <PlayTurn playSelectedCards={playSelectedCards} /> }\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  player: PlayerState;\n}\n\nexport default function Player({ player }: Props) {\n  return (\n    <span>\n      { player.isServerRequestingCards && <span>--&gt;</span> }\n      { player.id }\n    </span>\n  );\n}\n","import React from 'react';\nimport Player from './Player';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nexport default function Players({ players }: Props) {\n  const playerItems = players.map((player) => <li key={player.id}><Player player={player} /></li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport Card, { generateKey } from './Card';\n\ninterface Props {\n  cards: CardData[];\n}\n\nexport default function CardList({ cards }: Props) {\n  const cardItems = cards.map((card) => (\n    <li key={generateKey(card)}>\n      <Card card={card} />\n    </li>\n  ));\n\n  return (\n    <ul>\n      { cardItems }\n    </ul>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport CardList from './CardList';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nexport default function Stack({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid);\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n\n  return (\n    <div>\n      <h2>Stack</h2>\n\n      <CardList cards={playedCards} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport Hand from './Hand';\nimport Players from './Players';\nimport Stack from './Stack';\nimport { State } from './redux';\nimport { WebSocketGameApi } from './communication/webSocketServerApi';\nimport { PlayerState } from './redux/game';\n\ninterface Props {\n  players: PlayerState[];\n  playedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  playCards: (cards: Card[]) => void;\n  playerState: PlayerState;\n}\n\nfunction Game({\n  players, playedTurns, cardsInHand, playCards, playerState,\n}: Props) {\n  return (\n    <div>\n      <Players players={players} />\n      <Stack playedTurns={playedTurns} />\n      <Hand\n        isServerRequestingCards={playerState.isServerRequestingCards}\n        cardsInHand={cardsInHand}\n        playCards={playCards}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi }) => ({\n  cardsInHand: state.game.cardsInHand,\n  players: state.game.players,\n  playedTurns: state.game.validatedTurns,\n  playerState: state.game.players.find((player) => player.id === state.game.playerId) as PlayerState,\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\nexport default connect(mapStateToProps)(Game);\n","import {\n  Card, cardEquals, Error, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_PLAYER_ID = 'SET_PLAYER_ID';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface SetPlayerIdAction extends Action<typeof SET_PLAYER_ID> {\n  readonly playerId: PlayerId;\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | SetPlayerIdAction;\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface State {\n  isRunning: boolean;\n  playerId: PlayerId | undefined;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n}\n\nconst INITIAL_STATE: State = {\n  isRunning: false,\n  playerId: undefined,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nexport function setPlayerId(playerId: string): GameAction {\n  return {\n    type: SET_PLAYER_ID,\n    playerId,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(): GameAction {\n  return {\n    type: REQUEST_CARDS,\n  };\n}\n\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nexport function reducer(state: State = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case SET_PLAYER_ID:\n      return {\n        ...state,\n        playerId: action.playerId,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        isRunning: true,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n          isServerRequestingCards: false,\n        })),\n        validatedTurns: [],\n        cardsInHand: [],\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        validatedTurns: [],\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: false,\n        })),\n        cardsInHand: [],\n        isRunning: false,\n      };\n    case END_GAME_ERROR:\n      return state;\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n        cardsInHand: (action.turn.playerId === state.playerId && action.turn.valid\n          ? filterAvailableCardsAfterTurn(state.cardsInHand, action.turn)\n          : state.cardsInHand),\n      };\n    case START_ROUND:\n      return state;\n    case END_ROUND:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        validatedTurns: [],\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n        })),\n      };\n    case REQUEST_CARDS:\n      return state;\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\nexport type LobbyAction = SetLobbyPlayersAction;\n\nexport interface State {\n  players: PlayerId[];\n}\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n};\n\nexport function reducer(state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action } from 'redux';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  resetGame,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game';\nimport { setLobbyPlayers } from '../redux/lobby';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: Action) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      return dispatch(startGame(message.data.players));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(resetGame());\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards());\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nexport default function PlayerIds({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => <li key={playerId}>{playerId}</li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName, PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport './App.css';\nimport Game from './Game';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from './communication/webSocketServerApi';\nimport { State } from './redux';\nimport PlayerIds from './PlayerIds';\nimport { GameAction } from './redux/game';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<GameAction>;\n  authenticationToken: string;\n  isGameStarted: boolean;\n  players: PlayerId[];\n}\n\nfunction Lobby({\n  dispatch, authenticationToken, isGameStarted, players,\n}: Props) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch));\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    subject.pipe(\n      filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION),\n    ).subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    });\n    return () => subject.complete();\n  }, [subject, authenticationToken]);\n\n  return (\n    <div className=\"Lobby\">\n      { isGameStarted\n        ? <Game serverApi={gameApi} />\n        : (\n          <>\n            <PlayerIds playerIds={players} />\n            <button type=\"button\" onClick={gameApi.sendStartGame}>Start Game</button>\n          </>\n        ) }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isGameStarted: state.game.isRunning,\n  players: state.lobby.players,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\nimport { setPlayerId } from './game';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError;\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n          dispatch(setPlayerId(subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n\nexport function reducer(state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { GameAction } from './redux/game';\nimport { authenticate } from './redux/authentication';\nimport { State } from './redux';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">\n          Player name\n          <input id=\"name\" value={nameInput} onChange={handleNameChange} type=\"text\" name=\"name\" required />\n        </label>\n\n        <br />\n\n        <label htmlFor=\"token\">\n          Access token\n          <input id=\"token\" value={tokenInput} onChange={handleTokenChange} type=\"text\" name=\"token\" required />\n        </label>\n\n        <br />\n\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n\n      { error && <p>{error}</p>}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport logo from './logo.svg';\nimport './App.css';\nimport Lobby from './Lobby';\nimport { State } from './redux';\nimport Login from './Login';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <main>\n        <h1>Agurk</h1>\n\n        { isAuthenticated ? <Lobby /> : <Login /> }\n      </main>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { reducer as authenticationReducer, State as AuthenticationState } from './authentication';\nimport { reducer as gameReducer, State as GameState } from './game';\nimport { reducer as lobbyReducer, State as LobbyState } from './lobby';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux/index';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}