{"version":3,"sources":["components/styled/Button.tsx","redux/authentication.action.ts","components/styled/Message.tsx","components/Login.tsx","redux/game.action.ts","redux/lobby.action.ts","communication/webSocketServerApi.ts","components/board/PlayerIdList.tsx","components/Lobby.tsx","components/board/PlayingCard.tsx","components/board/SelectableCardList.tsx","components/board/Hand.tsx","components/styled/Badge.tsx","components/board/Player.tsx","components/board/PlayerStateList.tsx","components/board/Turn.tsx","components/board/TurnList.tsx","components/board/Stack.tsx","components/styled/Text.tsx","components/Collapsible.tsx","components/board/Protocol.tsx","redux/game.reducer.ts","components/TextSecondTimer.tsx","components/board/Overview.tsx","components/board/Board.tsx","components/Game.tsx","components/App.tsx","serviceWorker.ts","redux/authentication.reducer.ts","redux/lobby.reducer.ts","redux/index.ts","components/styled/theme.ts","index.tsx"],"names":["PrimaryButton","styled","button","theme","colors","primary","UnstyledButton","authenticateWithToken","token","subject","type","unauthenticateWithError","message","authenticationError","extractSubjectFromToken","jwtDecode","sub","div","error","Container","Input","input","SpacedForm","form","connect","state","authentication","dispatch","useState","nameInput","setNameInput","tokenInput","setTokenInput","onSubmit","event","data","name","fetch","process","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","playerId","preventDefault","placeholder","id","value","onChange","currentTarget","required","setIsInGame","isInGame","sendStartGame","next","MessageName","START_GAME","sendPlayCards","cards","PLAY_CARDS","sendAuthenticate","AUTHENTICATE","Element","li","PlayerIdList","playerItems","playerIds","map","key","lobby","players","startGame","onClick","CardRankText","p","CardAttributeText","Card","isSelected","text","CardPlaceholder","generateCardKey","card","kind","JOKER_CARD_KIND","color","rank","suit","JokerCard","SuitCard","PlayingCard","PlayingCardPlaceholder","Flex","Box","CardList","handleSelect","cardItems","PlayTurn","handlePlayClick","Hand","playCards","cardsInHand","isServerRequestingCards","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","selectedCards","filter","Badge","span","PrimaryBadge","AccentBadge","accent","ErrorBadge","opacityPulse","keyframes","PlayerName","props","isOut","ActivePlayerName","InactivePlayerName","Player","player","penaltySum","penalties","reduce","accumulator","current","Li","PlayerStateList","MutedFlex","muted","CardBox","Centered","TurnBox","generateTurnKey","turn","valid","Valid","InvalidHiddenAfterTimeout","isVisible","setIsVisible","timeout","setTimeout","clearTimeout","length","invalidReason","Turn","TurnList","turnItems","turns","LastPlayedMaxCard","playedCards","playedTurns","flatMap","highestPlayedCard","maxRankCard","currentCard","compareRanks","Stack","MonoSpan","FullWidthUnstyledButton","Collapsible","children","collapsedTitle","title","isDefaultCollapsed","isCollapsed","setIsCollapsed","ScrolledUl","ul","Protocol","entryItems","entries","entry","GameStage","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","outPlayers","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerIds","highestTurnPlayerId","filterAvailableCardsAfterTurn","cardInHand","undefined","find","turnCard","createProtocolMessage","isTurnValidAndFromPlayer","playedTurn","INITIAL_STATE","stage","START","validatedTurns","turnTimeoutInMillis","turnRetriesLeft","protocol","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","TextSecondTimer","timeoutInSeconds","timeLeftInSeconds","setTimeLeftInSeconds","interval","setInterval","clearInterval","OverviewParagraph","YourTurn","turnTimeoutInSeconds","TheirTurn","currentTurnPlayer","TurnIndicator","HighestCyclePlayers","highestCyclePlayerIds","join","RoundWinner","roundWinner","GameWinner","gameWinner","Overview","gameStage","IN_CYCLE","BETWEEN_CYCLES","BETWEEN_ROUNDS","END","Grid","OverviewBox","StackBox","HandBox","PlayersBox","ProtocolBox","ownProps","game","playerState","serverApi","protocolEntries","reset","cancelGame","respondToAuthenticationRequestFromServer","authenticationToken","pipe","REQUEST_AUTHENTICATION","subscribe","bind","createAuthenticationApi","handleMessagesFromServer","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","BROADCAST_END_GAME","isValid","winner","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","timeoutInMillis","retriesLeft","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","webSocket","gameApi","createGameApi","complete","Header","header","NavBar","nav","NavLink","NavTitle","Main","main","isAuthenticated","href","target","Boolean","window","location","hostname","match","combineReducers","action","BEFORE_CYCLE","reason","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cd2d0ef.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport const PrimaryButton = styled.button`\n  display: inline-block;\n  font-size: 1em;\n  height: 3em;\n  padding: 0.75em;\n  width: 100%;\n  background-color: transparent;\n  border: 2px solid ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n  font-weight: bold;\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n\n  &:hover {\n    background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n    color: white;\n    cursor: pointer;\n  }\n`;\n\nexport const UnstyledButton = styled.button`\n  all: unset;\n  cursor: pointer;\n`;\n","import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\nimport { setPlayerId } from './game.action';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\nexport const UNAUTHENTICATE_WITH_ERROR = 'UNAUTHENTICATE_WITH_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\ninterface UnauthenticateWithErrorAction extends Action<typeof UNAUTHENTICATE_WITH_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError | UnauthenticateWithErrorAction;\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function unauthenticateWithError(message: string): AuthenticationAction {\n  return {\n    type: UNAUTHENTICATE_WITH_ERROR,\n    message,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n          dispatch(setPlayerId(subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n","import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport default styled.div`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  padding: 0.5em;\n  width: 100%;\n  color: white;\n  font-weight: bold;\n`;\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport styled from 'styled-components';\nimport { PrimaryButton } from './styled/Button';\nimport { GameAction } from '../redux/game.action';\nimport { authenticate } from '../redux/authentication.action';\nimport { State } from '../redux';\nimport ErrorMessage from './styled/Message';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nconst Container = styled.div`\n  max-width: 500px;\n  margin: auto;\n`;\n\nconst Input = styled.input`\n  padding: 0.5em;\n  width: 100%;\n  height: 3em;\n  margin-bottom: 1em;\n  display: block;\n  font-size: 1em;\n`;\n\nconst SpacedForm = styled.form`\n  margin-bottom: 1em;\n`;\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <Container>\n      <h2>Login</h2>\n\n      <SpacedForm onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"Player name\"\n          id=\"name\"\n          value={nameInput}\n          onChange={handleNameChange}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n\n        <Input\n          placeholder=\"Access token\"\n          id=\"token\"\n          value={tokenInput}\n          onChange={handleTokenChange}\n          type=\"password\"\n          name=\"token\"\n          required\n        />\n\n        <PrimaryButton type=\"submit\">Log in</PrimaryButton>\n      </SpacedForm>\n\n      { error && <ErrorMessage>{error}</ErrorMessage>}\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import {\n  Card, Error, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_PLAYER_ID = 'SET_PLAYER_ID';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface SetPlayerIdAction extends Action<typeof SET_PLAYER_ID> {\n  readonly playerId: PlayerId;\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{\n  readonly turnTimeoutInMillis: number;\n  readonly turnRetriesLeft: number;\n}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | SetPlayerIdAction;\n\nexport function setPlayerId(playerId: string): GameAction {\n  return {\n    type: SET_PLAYER_ID,\n    playerId,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(turnTimeoutInMillis: number, turnRetriesLeft: number): GameAction {\n  return {\n    type: REQUEST_CARDS,\n    turnTimeoutInMillis,\n    turnRetriesLeft,\n  };\n}\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\nexport const SET_IS_IN_GAME = 'SET_IS_IN_GAME';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface SetIsInGameAction extends Action<typeof SET_IS_IN_GAME> {\n  readonly isInGame: boolean;\n}\n\nexport type LobbyAction = SetLobbyPlayersAction | SetIsInGameAction;\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n\nexport function setIsInGame(isInGame: boolean): LobbyAction {\n  return {\n    type: SET_IS_IN_GAME,\n    isInGame,\n  };\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action } from 'redux';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game.action';\nimport { setIsInGame, setLobbyPlayers } from '../redux/lobby.action';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: Action) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      dispatch(startGame(message.data.players));\n      return dispatch(setIsInGame(true));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(setIsInGame(false));\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards(message.data.timeoutInMillis, message.data.retriesLeft));\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport styled from 'styled-components';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nconst Element = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerIdList({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => <Element key={playerId}>{playerId}</Element>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { PrimaryButton } from './styled/Button';\nimport PlayerIdList from './board/PlayerIdList';\nimport { State } from '../redux';\n\ninterface Props {\n  playerIds: PlayerId[];\n  startGame: () => void;\n}\n\nfunction Lobby({ playerIds, startGame }: Props) {\n  return (\n    <div>\n      <PlayerIdList playerIds={playerIds} />\n      <PrimaryButton type=\"button\" onClick={startGame}>Start Game</PrimaryButton>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  playerIds: state.lobby.players,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Theme } from '../styled/theme';\n\ninterface PlayingCardProps {\n  card: CardData;\n  isSelected?: boolean;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nconst CardRankText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 2.5em;\n  margin: 0;\n`;\n\nconst CardAttributeText = styled.p`\n  font-weight: bold;\n  flex-basis: 100%;\n  text-align: center;\n  display: block;\n  font-size: 0.6em;\n  margin: 0;\n`;\n\n/*\n  width / height ratio = 1 / 1.5\n*/\nconst Card = styled.div`\n  color: ${({ isSelected, theme }: { isSelected: boolean, theme: Theme }) => (\n    isSelected ? `${theme.colors.primary}` : ` ${theme.colors.text}`\n  )};\n  border: 1px solid;\n  border-radius: 4px;\n  width: 4em;\n  height: 6em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n`;\n\nconst CardPlaceholder = styled(Card)`\n  border: ${({ theme }: { theme: Theme }) => (`1px dotted ${theme.colors.text}`)};\n`;\n\nexport function generateCardKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <>\n      <CardRankText>\n        J\n      </CardRankText>\n      <CardAttributeText>\n        { card.color }\n      </CardAttributeText>\n    </>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <>\n      <CardRankText>\n        { card.rank }\n      </CardRankText>\n      <CardAttributeText>\n        { card.suit }\n      </CardAttributeText>\n    </>\n  );\n}\n\nexport default function PlayingCard({ card, isSelected = false }: PlayingCardProps) {\n  return (\n    <Card isSelected={isSelected}>\n      { card.kind === JOKER_CARD_KIND\n        ? <JokerCard card={card} />\n        : <SuitCard card={card} /> }\n    </Card>\n  );\n}\n\nexport function PlayingCardPlaceholder() {\n  return (\n    <CardPlaceholder isSelected={false} />\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { generateCardKey } from './PlayingCard';\nimport { UnstyledButton } from '../styled/Button';\n\nexport type SelectableCard = CardData & { isSelected: boolean };\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 1em;\n`;\n\nconst Box = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <Box key={generateCardKey(card)}>\n      <UnstyledButton onClick={() => handleSelect(card)}>\n        <PlayingCard card={card} isSelected={card.isSelected} />\n      </UnstyledButton>\n    </Box>\n  ));\n\n  return (\n    <Flex>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\nimport { PrimaryButton } from '../styled/Button';\n\ninterface Props {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n}\n\ninterface PlayTurnProps {\n  handlePlayClick: () => void;\n}\n\nfunction PlayTurn({ handlePlayClick }: PlayTurnProps) {\n  return (\n    <>\n      <PrimaryButton type=\"button\" onClick={handlePlayClick}>\n        Play Cards\n      </PrimaryButton>\n    </>\n  );\n}\n\nexport default function Hand({ playCards, cardsInHand, isServerRequestingCards }: Props) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Your hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n\n      { isServerRequestingCards && <PlayTurn handlePlayClick={playSelectedCards} /> }\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport const Badge = styled.span`\n  background-color: transparent;\n  border-radius: 0.25em;\n  font-size: 0.7em;\n  margin: 0 0.5em;\n  padding: 0.15em 0.25em;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nexport const PrimaryBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n  color: white;\n`;\n\nexport const AccentBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.accent)};\n  color: white;\n`;\n\nexport const ErrorBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  color: white;\n`;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { PlayerState } from '../../redux/game.reducer';\nimport { AccentBadge } from '../styled/Badge';\n\ninterface Props {\n  player: PlayerState;\n}\n\nconst opacityPulse = keyframes`\n  0% {\n    opacity: 0.6;\n  }\n\n  50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0.6;\n  }\n`;\n\nconst PlayerName = styled.span`\n  text-decoration-line: ${(props: { isOut: boolean }) => (props.isOut ? 'line-through' : 'none')};\n`;\n\nconst ActivePlayerName = styled(PlayerName)`\n  animation: ${opacityPulse} 2s infinite;\n  font-weight: bold;\n`;\n\nconst InactivePlayerName = styled(PlayerName)`\n  font-weight: normal;\n`;\n\nexport default function Player({ player }: Props) {\n  const penaltySum = player.penalties.reduce((accumulator, current) => current.card.rank + accumulator, 0);\n\n  return (\n    <>\n      { player.isServerRequestingCards\n        ? <ActivePlayerName isOut={player.isOut}>{ player.id }</ActivePlayerName>\n        : <InactivePlayerName isOut={player.isOut}>{ player.id }</InactivePlayerName>}\n      <AccentBadge>\n        Penalty\n        {' '}\n        {penaltySum}\n      </AccentBadge>\n    </>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Player from './Player';\nimport { PlayerState } from '../../redux/game.reducer';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nconst Li = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerStateList({ players }: Props) {\n  const playerItems = players.map((player) => <Li key={player.id}><Player player={player} /></Li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { InvalidTurn, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport PlayingCard, { generateCardKey, PlayingCardPlaceholder } from './PlayingCard';\nimport { ErrorBadge } from '../styled/Badge';\nimport { Theme } from '../styled/theme';\n\ninterface Props {\n  turn: ValidatedTurn;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MutedFlex = styled(Flex)`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n`;\n\nconst CardBox = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst TurnBox = styled.div`\n  margin-right: 1em;\n  margin-bottom: 1em;\n`;\n\nexport function generateTurnKey(turn: ValidatedTurn): string {\n  return turn.playerId + turn.valid;\n}\n\nfunction Valid({ turn }: { turn: ValidTurn }) {\n  const cardItems = turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard card={card} />\n    </CardBox>\n  ));\n\n  return (\n    <TurnBox>\n      <Flex>\n        { cardItems }\n      </Flex>\n      <Centered><span>{turn.playerId}</span></Centered>\n    </TurnBox>\n  );\n}\n\nfunction InvalidHiddenAfterTimeout({ turn }: { turn: InvalidTurn }) {\n  const SHOW_INVALID_TURN_TIMEOUT = 2000;\n  const [isVisible, setIsVisible] = useState<boolean>(true);\n  const cardItems = turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard key={generateCardKey(card)} card={card} />\n    </CardBox>\n  ));\n\n  useEffect(() => {\n    const timeout: number = setTimeout(() => {\n      setIsVisible(false);\n    }, SHOW_INVALID_TURN_TIMEOUT);\n    return () => clearTimeout(timeout);\n  });\n\n  return isVisible\n    ? (\n      <TurnBox>\n        <MutedFlex>\n          { cardItems.length === 0\n            ? <PlayingCardPlaceholder />\n            : cardItems }\n        </MutedFlex>\n        <Centered><span>{turn.playerId}</span></Centered>\n        <Centered>\n          <ErrorBadge>{turn.invalidReason}</ErrorBadge>\n        </Centered>\n      </TurnBox>\n    )\n    : null;\n}\n\nexport default function Turn({ turn }: Props) {\n  return turn.valid\n    ? <Valid turn={turn} />\n    : <InvalidHiddenAfterTimeout turn={turn} />;\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport Turn, { generateTurnKey } from './Turn';\n\ninterface Props {\n  turns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport default function TurnList({ turns }: Props) {\n  const turnItems = turns.map((turn) => (<Turn key={generateTurnKey(turn)} turn={turn} />));\n\n  return (\n    <Flex>\n      { turnItems }\n    </Flex>\n  );\n}\n","import React from 'react';\nimport { compareRanks, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { PlayingCardPlaceholder } from './PlayingCard';\nimport TurnList from './TurnList';\nimport { PrimaryBadge } from '../styled/Badge';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Box = styled.div`\n  margin-right: 1em;\n  margin-bottom: 1em;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst CardBox = styled.div`\n  margin-bottom: 0.5em;\n`;\n\nfunction LastPlayedMaxCard({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid) as ValidTurn[];\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n  const highestPlayedCard = playedCards.length > 0\n    ? (\n      <PlayingCard card={playedCards.reduce(\n        (maxRankCard, currentCard) => (compareRanks(maxRankCard, currentCard) > 0 ? maxRankCard : currentCard),\n      )}\n      />\n    )\n    : <PlayingCardPlaceholder />;\n\n  return (\n    <Box>\n      <CardBox>\n        { highestPlayedCard }\n      </CardBox>\n      <Centered>\n        <PrimaryBadge>Highest card</PrimaryBadge>\n      </Centered>\n    </Box>\n  );\n}\n\nexport default function Stack({ playedTurns }: Props) {\n  return (\n    <div>\n      <Flex>\n        <Box>\n          <LastPlayedMaxCard playedTurns={playedTurns} />\n        </Box>\n        <Box>\n          <TurnList turns={playedTurns} />\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const MonoSpan = styled.span`\n  font-family: Consolas;\n`;\n","import React, { ReactElement, useState } from 'react';\nimport styled from 'styled-components';\nimport { UnstyledButton } from './styled/Button';\nimport { MonoSpan } from './styled/Text';\n\ninterface Props {\n  children: ReactElement | ReactElement[];\n  title: string;\n  collapsedTitle: string;\n  isDefaultCollapsed?: boolean;\n}\n\nconst FullWidthUnstyledButton = styled(UnstyledButton)`\n  width: 100%;\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nexport default function Collapsible({\n  children, collapsedTitle, title, isDefaultCollapsed = true,\n}: Props) {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(isDefaultCollapsed);\n\n  return (\n    <div>\n      <FullWidthUnstyledButton onClick={() => setIsCollapsed(!isCollapsed)}>\n        <Flex>\n          <h2>\n            { isCollapsed ? collapsedTitle : title }\n          </h2>\n          <h2>\n            <MonoSpan>{ isCollapsed ? '+' : '-' }</MonoSpan>\n          </h2>\n        </Flex>\n      </FullWidthUnstyledButton>\n\n      { !isCollapsed && children }\n    </div>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ProtocolEntry } from '../../redux/game.reducer';\nimport Collapsible from '../Collapsible';\n\ninterface Props {\n  entries: ProtocolEntry[];\n}\n\nconst ScrolledUl = styled.ul`\n  overflow-y: auto;\n  max-height: 25vh;\n`;\n\nexport default function Protocol({ entries }: Props) {\n  const entryItems = entries.map((entry) => <li>{entry.message}</li>);\n\n  return (\n    <Collapsible title=\"Protocol\" collapsedTitle=\"Protocol\">\n      <ScrolledUl>\n        { entryItems }\n      </ScrolledUl>\n    </Collapsible>\n  );\n}\n","import {\n  Card, cardEquals, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport {\n  ADD_PLAYER_TURN,\n  END_CYCLE,\n  END_GAME_ERROR, END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  REQUEST_CARDS,\n  RESET_GAME,\n  SET_CARDS_IN_HAND,\n  SET_PLAYER_ID, START_CYCLE,\n  START_GAME,\n  START_PLAYER_TURN,\n  START_ROUND,\n} from './game.action';\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nfunction createProtocolMessage(message: string) {\n  return {\n    message,\n  };\n}\n\nfunction isTurnValidAndFromPlayer(playedTurn: ValidatedTurn, playerId: PlayerId | undefined) {\n  return playedTurn.playerId === playerId && playedTurn.valid;\n}\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface ProtocolEntry {\n  message: string;\n}\n\nexport enum GameStage {\n  START,\n  END,\n  BETWEEN_ROUNDS,\n  BETWEEN_CYCLES,\n  BEFORE_CYCLE,\n  IN_CYCLE,\n}\n\nexport interface State {\n  stage: GameStage;\n  playerId: PlayerId | undefined;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number,\n  protocol: ProtocolEntry[],\n}\n\nconst INITIAL_STATE: State = {\n  stage: GameStage.START,\n  playerId: undefined,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n  turnTimeoutInMillis: undefined,\n  turnRetriesLeft: 0,\n  protocol: [],\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nexport default function (state: State = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case SET_PLAYER_ID:\n      return {\n        ...state,\n        playerId: action.playerId,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        stage: GameStage.START,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        stage: GameStage.END,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n        })),\n        protocol: [\n          createProtocolMessage(`${action.winner} wins the game`),\n          ...state.protocol,\n        ],\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          ...INITIAL_PLAYER_STATE,\n        })),\n        ...INITIAL_STATE,\n        playerId: state.playerId,\n      };\n    case END_GAME_ERROR:\n      return {\n        ...state,\n        stage: GameStage.END,\n        protocol: [\n          createProtocolMessage(`${action.error.message}`),\n          ...state.protocol,\n        ],\n      };\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.turn.playerId === player.id ? false : player.isServerRequestingCards,\n        })),\n        cardsInHand: isTurnValidAndFromPlayer(action.turn, state.playerId)\n          ? filterAvailableCardsAfterTurn(state.cardsInHand, action.turn)\n          : state.cardsInHand,\n        protocol: action.turn.valid\n          ? [\n            createProtocolMessage(`\n                ${action.turn.playerId} plays\n                ${action.turn.cards.length > 1 ? 'cards' : 'card'}\n                with\n                ${action.turn.cards.length > 1 ? 'ranks' : 'rank'}\n                ${action.turn.cards.map((card) => card.rank).join(', ')}`),\n            ...state.protocol,\n          ]\n          : state.protocol,\n      };\n    case START_ROUND:\n      return {\n        ...state,\n        stage: GameStage.BEFORE_CYCLE,\n      };\n    case END_ROUND:\n      return {\n        ...state,\n        stage: GameStage.BETWEEN_ROUNDS,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n        protocol: [\n          createProtocolMessage(`${action.winner} wins the current round`),\n          ...action.penalties\n            .map((penalty) => createProtocolMessage(`${penalty.playerId} gets a penalty of ${penalty.card.rank}`)),\n          ...action.outPlayers\n            .map((outPlayer) => createProtocolMessage(`${outPlayer.id} is out because ${outPlayer.reason}`)),\n          ...state.protocol,\n        ],\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        stage: GameStage.IN_CYCLE,\n        validatedTurns: [],\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        stage: GameStage.BETWEEN_CYCLES,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n        })),\n        protocol: [\n          ...action.highestTurnPlayerIds\n            .map((playerId) => (createProtocolMessage(`${playerId} played the highest card in cycle`))),\n          ...action.outPlayers\n            .map((outPlayer) => createProtocolMessage(`${outPlayer.id} is out because ${outPlayer.reason}`)),\n          ...state.protocol,\n        ],\n      };\n    case REQUEST_CARDS:\n      return {\n        ...state,\n        turnTimeoutInMillis: action.turnTimeoutInMillis,\n        turnRetriesLeft: action.turnRetriesLeft,\n      };\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  timeoutInSeconds: number;\n}\n\nexport default function TextSecondTimer({ timeoutInSeconds }: Props) {\n  const [timeLeftInSeconds, setTimeLeftInSeconds] = useState<number>(timeoutInSeconds);\n\n  useEffect(() => {\n    setTimeLeftInSeconds(timeoutInSeconds);\n  }, [timeoutInSeconds]);\n\n  useEffect(() => {\n    const interval: number = setInterval(() => {\n      const newTimeLeftInMillis = timeLeftInSeconds - 1;\n      return newTimeLeftInMillis < 0\n        ? clearInterval(interval)\n        : setTimeLeftInSeconds(timeLeftInSeconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  return (<>{ timeLeftInSeconds }</>);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { GameStage, PlayerState } from '../../redux/game.reducer';\nimport TextSecondTimer from '../TextSecondTimer';\n\ninterface Props {\n  isServerRequestingCards: boolean;\n  players: PlayerState[];\n  turnRetriesLeft: number;\n  turnTimeoutInSeconds: number | undefined;\n  gameStage: GameStage;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nconst OverviewParagraph = styled.p`\n  margin: 0;\n  font-weight: bold;\n`;\n\nfunction YourTurn({ turnTimeoutInSeconds, turnRetriesLeft }: Pick<Props, 'turnTimeoutInSeconds' | 'turnRetriesLeft'>) {\n  return (\n    <Flex>\n      <h2>\n        Your turn\n        { ' ' }\n      </h2>\n      { turnTimeoutInSeconds && (\n        <OverviewParagraph>\n          <TextSecondTimer timeoutInSeconds={turnTimeoutInSeconds} />\n          { ' ' }\n          seconds and\n          { ' ' }\n          { turnRetriesLeft }\n          { ' ' }\n          { turnRetriesLeft === 1\n            ? 'retry left'\n            : 'retries left' }\n        </OverviewParagraph>\n      ) }\n    </Flex>\n  );\n}\n\nfunction TheirTurn({ players }: Pick<Props, 'players'>) {\n  const currentTurnPlayer = players.find((player) => player.isServerRequestingCards);\n  return (\n    <h2>\n      { currentTurnPlayer?.id }\n      { '\\'s turn' }\n    </h2>\n  );\n}\n\nfunction TurnIndicator({\n  isServerRequestingCards, players, turnTimeoutInSeconds, turnRetriesLeft,\n}: Pick<Props, 'turnTimeoutInSeconds' | 'turnRetriesLeft' | 'players' | 'isServerRequestingCards'>) {\n  return (isServerRequestingCards\n    ? <YourTurn turnTimeoutInSeconds={turnTimeoutInSeconds} turnRetriesLeft={turnRetriesLeft} />\n    : <TheirTurn players={players} />\n  );\n}\n\nfunction HighestCyclePlayers({ players }: Pick<Props, 'players'>) {\n  const highestCyclePlayerIds = players\n    .filter((player) => player.isCycleHighestTurnPlayer)\n    .map((player) => player.id);\n\n  if (highestCyclePlayerIds.length === 0) {\n    return <h2>No cycle winner</h2>;\n  }\n\n  return (\n    <h2>\n      { highestCyclePlayerIds.join(', ') }\n      { ' ' }\n      { highestCyclePlayerIds.length === 1\n        ? 'wins the cycle'\n        : 'win the cycle' }\n    </h2>\n  );\n}\n\nfunction RoundWinner({ players }: Pick<Props, 'players'>) {\n  const roundWinner = players.find((player) => player.isRoundWinner);\n  return (\n    <h2>\n      { roundWinner\n        ? `${roundWinner.id} wins the round`\n        : 'No round winner' }\n    </h2>\n  );\n}\n\nfunction GameWinner({ players }: Pick<Props, 'players'>) {\n  const gameWinner = players.find((player) => player.isGameWinner);\n  return (\n    <h2>\n      { gameWinner\n        ? `${gameWinner.id} wins the game`\n        : 'No game winner' }\n    </h2>\n  );\n}\n\nexport default function Overview({\n  isServerRequestingCards, players, turnTimeoutInSeconds, turnRetriesLeft, gameStage,\n}: Props) {\n  switch (gameStage) {\n    case GameStage.IN_CYCLE:\n      return (\n        <TurnIndicator\n          isServerRequestingCards={isServerRequestingCards}\n          players={players}\n          turnRetriesLeft={turnRetriesLeft}\n          turnTimeoutInSeconds={turnTimeoutInSeconds}\n        />\n      );\n    case GameStage.BETWEEN_CYCLES:\n      return (\n        <HighestCyclePlayers players={players} />\n      );\n    case GameStage.BETWEEN_ROUNDS:\n      return (\n        <RoundWinner players={players} />\n      );\n    case GameStage.END:\n      return (\n        <GameWinner players={players} />\n      );\n    default:\n      return null;\n  }\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Action, Dispatch } from 'redux';\nimport Hand from './Hand';\nimport PlayerStateList from './PlayerStateList';\nimport Stack from './Stack';\nimport { State } from '../../redux';\nimport { WebSocketGameApi } from '../../communication/webSocketServerApi';\nimport { resetGame } from '../../redux/game.action';\nimport { PlayerState, ProtocolEntry, GameStage } from '../../redux/game.reducer';\nimport Protocol from './Protocol';\nimport Overview from './Overview';\nimport { setIsInGame } from '../../redux/lobby.action';\n\ninterface Props {\n  state: {\n    players: PlayerState[]\n    playedTurns: ValidatedTurn[];\n    cardsInHand: Card[];\n    playerState: PlayerState | undefined;\n    stage: GameStage;\n    turnTimeoutInSeconds: number | undefined;\n    turnRetriesLeft: number;\n    protocolEntries: ProtocolEntry[];\n  };\n  playCards: (cards: Card[]) => void;\n  reset: () => void;\n  cancelGame: () => void;\n}\n\nconst minWidthBreakpoint = '800px';\n\nconst Grid = styled.div`\n  display: grid;\n  row-gap: 1em;\n\n  @media(min-width: ${minWidthBreakpoint}) {\n    grid-template-columns: 30% 65%;\n    grid-template-rows: auto auto auto;\n    column-gap: 5%;\n    row-gap: 2em;\n  }\n`;\n\nconst OverviewBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 1;\n  grid-row-end: span 1;\n\n  @media(min-width:  ${minWidthBreakpoint}) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 1;\n    grid-row-end: span 1;\n  }\n`;\n\nconst StackBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 2;\n  grid-row-end: span 1;\n\n  @media(min-width: ${minWidthBreakpoint}) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 2;\n    grid-row-end: span 1;\n  }\n`;\n\nconst HandBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 3;\n  grid-row-end: span 1;\n\n  @media(min-width: ${minWidthBreakpoint}) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 3;\n    grid-row-end: span 1;\n  }\n`;\n\nconst PlayersBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 4;\n  grid-row-end: span 1;\n\n  @media(min-width: ${minWidthBreakpoint}) {\n    grid-column-start: 1;\n    grid-column-end: span 1;\n    grid-row-start: 1;\n    grid-row-end: span 2;\n  }\n`;\n\nconst ProtocolBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 5;\n  grid-row-end: span 1;\n\n  @media(min-width: ${minWidthBreakpoint}) {\n    grid-column-start: 1;\n    grid-column-end: span 1;\n    grid-row-start: 3;\n    grid-row-end: span 1;\n  }\n`;\n\nfunction Board({ state, playCards, reset }: Props) {\n  useEffect(() => reset, [reset]);\n\n  if (!state.playerState) {\n    return <p>Loading game...</p>;\n  }\n\n  return (\n    <Grid>\n      <OverviewBox>\n        <Overview\n          gameStage={state.stage}\n          isServerRequestingCards={state.playerState.isServerRequestingCards}\n          players={state.players}\n          turnTimeoutInSeconds={state.turnTimeoutInSeconds}\n          turnRetriesLeft={state.turnRetriesLeft}\n        />\n      </OverviewBox>\n      <StackBox>\n        <Stack playedTurns={state.playedTurns} />\n      </StackBox>\n      <HandBox>\n        <Hand\n          isServerRequestingCards={state.playerState.isServerRequestingCards}\n          cardsInHand={state.cardsInHand}\n          playCards={playCards}\n        />\n      </HandBox>\n      <PlayersBox>\n        <PlayerStateList players={state.players} />\n      </PlayersBox>\n      <ProtocolBox>\n        <Protocol entries={state.protocolEntries} />\n      </ProtocolBox>\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi }) => ({\n  state: {\n    cardsInHand: state.game.cardsInHand,\n    players: state.game.players,\n    stage: state.game.stage,\n    playedTurns: state.game.validatedTurns,\n    playerState: state.game.players.find((player) => player.id === state.game.playerId),\n    playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n    turnTimeoutInSeconds: state.game.turnTimeoutInMillis ? state.game.turnTimeoutInMillis / 1000 : undefined,\n    turnRetriesLeft: state.game.turnRetriesLeft,\n    protocolEntries: state.game.protocol,\n  },\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  reset: () => dispatch(resetGame()),\n  cancelGame: () => dispatch(setIsInGame(false)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action, Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from '../communication/webSocketServerApi';\nimport { State } from '../redux';\nimport { unauthenticateWithError } from '../redux/authentication.action';\nimport Lobby from './Lobby';\nimport Board from './board/Board';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<Action>;\n  authenticationToken: string;\n  isInGame: boolean;\n}\n\nfunction respondToAuthenticationRequestFromServer(\n  subject: WebSocketSubject<Message>,\n  authenticationToken: string,\n  dispatch: Dispatch<Action>,\n) {\n  subject.pipe(filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION))\n    .subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    },\n    () => dispatch(unauthenticateWithError('Could not authenticate with the game server. Try to login again...')));\n}\n\nfunction handleMessagesFromServer(subject: WebSocketSubject<Message>, dispatch: Dispatch<Action>) {\n  subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch),\n    () => dispatch(unauthenticateWithError('Could not contact the game server. Try again later...')));\n}\n\nfunction Game({ dispatch, authenticationToken, isInGame }: Props) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    handleMessagesFromServer(subject, dispatch);\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    respondToAuthenticationRequestFromServer(subject, authenticationToken, dispatch);\n    return () => subject.complete();\n  }, [subject, dispatch, authenticationToken]);\n\n  return (\n    <>\n      { isInGame\n        ? <Board serverApi={gameApi} />\n        : <Lobby startGame={gameApi.sendStartGame} /> }\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isInGame: state.lobby.isInGame,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { State } from '../redux';\nimport Login from './Login';\nimport { Theme } from './styled/theme';\nimport Game from './Game';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nconst Header = styled.header`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: auto;\n  padding: 0 2em;\n`;\n\nconst NavBar = styled.nav`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n`;\n\nconst NavLink = styled.a`\n  text-decoration: none;\n  color: white;\n  text-align: center;\n  padding: 0.5em;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst NavTitle = styled(NavLink)`\n  font-size: 1.5em;\n  font-weight: bold;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst Main = styled.main`\n  margin-bottom: 2em;\n`;\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <>\n      <Header>\n        <NavBar>\n          <NavTitle href=\"/agurk-client\">\n            Agurk\n          </NavTitle>\n          <NavLink target=\"_blank\" href=\"https://github.com/SimonMueller/agurk-server/blob/master/README.md#rules\">\n            Read the rules\n          </NavLink>\n        </NavBar>\n      </Header>\n      <Container>\n        <Main>\n          { isAuthenticated ? <Game /> : <Login /> }\n        </Main>\n      </Container>\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  AUTHENTICATE_WITH_TOKEN,\n  AUTHENTICATION_ERROR,\n  AuthenticationAction,\n  UNAUTHENTICATE_WITH_ERROR,\n} from './authentication.action';\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport default function (state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    case UNAUTHENTICATE_WITH_ERROR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import { PlayerId } from 'agurk-shared';\nimport { LobbyAction, SET_IS_IN_GAME, SET_LOBBY_PLAYERS } from './lobby.action';\n\nexport interface State {\n  players: PlayerId[];\n  isInGame: boolean;\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n  isInGame: false,\n};\n\nexport default function (state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    case SET_IS_IN_GAME:\n      return {\n        ...state,\n        isInGame: action.isInGame,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport authenticationReducer, { State as AuthenticationState } from './authentication.reducer';\nimport gameReducer, { State as GameState } from './game.reducer';\nimport lobbyReducer, { State as LobbyState } from './lobby.reducer';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","export interface Theme {\n  colors: {\n    primary: string;\n    muted: string;\n    text: string;\n    error: string;\n    accent: string;\n  };\n}\n\nconst theme: Theme = {\n  colors: {\n    primary: '#006a4e',\n    muted: '#737373',\n    text: '#000',\n    error: '#ff033e',\n    accent: '#ff2400',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ThemeProvider } from 'styled-components';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux';\nimport './index.css';\nimport theme from './components/styled/theme';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}