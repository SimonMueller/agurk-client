{"version":3,"sources":["logo.svg","Card.tsx","SelectableCardList.tsx","Hand.tsx","Player.tsx","Players.tsx","CardList.tsx","Stack.tsx","Game.tsx","communication/webSocketServerApi.ts","Lobby.tsx","redux/action.ts","Authenticate.tsx","App.tsx","serviceWorker.ts","redux/reducers.ts","index.tsx"],"names":["module","exports","JokerCard","card","kind","color","SuitCard","suit","rank","generateKey","JOKER_CARD_KIND","Card","CardList","cards","handleSelect","cardItems","map","key","type","checked","isSelected","onChange","PlayTurn","playSelectedCards","onClick","Hand","playCards","cardsInHand","isServerRequestingCards","useState","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","selectedCards","filter","Player","player","id","Players","playerItems","players","Stack","playedCards","playedTurns","turn","valid","flatMap","connect","state","game","validatedTurns","playerState","find","authentication","subject","dispatch","ownProps","serverApi","sendPlayCards","sendStartGame","next","name","MessageName","START_GAME","PLAY_CARDS","data","sendAuthenticate","token","AUTHENTICATE","isGameStarted","isRunning","authenticationToken","webSocket","process","gameApi","bind","createGameApi","subscribe","message","BROADCAST_START_GAME","playerIds","BROADCAST_END_GAME","isValid","winner","error","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","penalties","outPlayers","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayerIds","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","BROADCAST_START_PLAYER_TURN","playerId","dispatchWebSocketMessageAsActions","complete","pipe","REQUEST_AUTHENTICATION","createAuthenticationApi","className","authenticate","jwt","nameInput","setNameInput","tokenInput","setTokenInput","event","a","preventDefault","fetch","method","mode","headers","body","JSON","stringify","then","response","ok","json","catch","console","log","onSubmit","htmlFor","value","currentTarget","isAuthenticated","src","logo","alt","Boolean","window","location","hostname","match","INITIAL_STATE","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","isOut","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerId","filterAvailableCardsAfterTurn","cardInHand","undefined","turnCard","store","createStore","action","jwtDecode","sub","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff7b65cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\n\ninterface CardProps {\n  card: CardData;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <div>\n      { card.kind }\n      { ' ' }\n      { card.color }\n    </div>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <div>\n      { card.suit }\n      {' '}\n      { card.rank }\n    </div>\n  );\n}\n\nexport function generateKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nexport default function Card({ card }: CardProps) {\n  return (\n    card.kind === JOKER_CARD_KIND\n      ? <JokerCard card={card} />\n      : <SuitCard card={card} />\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport Card, { generateKey } from './Card';\n\ninterface Selectable {\n  isSelected: boolean;\n}\n\nexport type SelectableCard = Selectable & CardData;\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <li key={generateKey(card)}>\n      <input type=\"checkbox\" checked={card.isSelected} onChange={() => handleSelect(card)} />\n      <Card card={card} />\n    </li>\n  ));\n\n  return (\n    <ul>\n      { cardItems }\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\n\ninterface HandProps {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n}\n\ninterface PlayTurnProps {\n  playSelectedCards: () => void;\n}\n\nfunction PlayTurn({ playSelectedCards }: PlayTurnProps) {\n  return (\n    <div>\n      <button type=\"button\" onClick={playSelectedCards}>Play Cards</button>\n    </div>\n  );\n}\n\nexport default function Hand({ playCards, cardsInHand, isServerRequestingCards }: HandProps) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n      { isServerRequestingCards && <PlayTurn playSelectedCards={playSelectedCards} /> }\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerState } from './redux/reducers';\n\ninterface Props {\n  player: PlayerState;\n}\n\nexport default function Player({ player }: Props) {\n  return (\n    <div>\n      <p>\n        { player.isServerRequestingCards && <span>--&gt;</span> }\n        { player.id }\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport Player from './Player';\nimport { PlayerState } from './redux/reducers';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nexport default function Players({ players }: Props) {\n  const playerItems = players.map((player) => <li key={player.id}><Player player={player} /></li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport Card, { generateKey } from './Card';\n\ninterface Props {\n  cards: CardData[];\n}\n\nexport default function CardList({ cards }: Props) {\n  const cardItems = cards.map((card) => (\n    <li key={generateKey(card)}>\n      <Card card={card} />\n    </li>\n  ));\n\n  return (\n    <ul>\n      { cardItems }\n    </ul>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport CardList from './CardList';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nexport default function Stack({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid);\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n\n  return (\n    <div>\n      <h2>Stack</h2>\n\n      <CardList cards={playedCards} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport { Action } from 'redux';\nimport Hand from './Hand';\nimport Players from './Players';\nimport Stack from './Stack';\nimport { PlayerState, GameState } from './redux/reducers';\nimport { WebSocketGameApi } from './communication/webSocketServerApi';\n\ninterface Props {\n  players: PlayerState[];\n  playedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  playCards: (cards: Card[]) => void;\n  playerState: PlayerState;\n}\n\nfunction Game({\n  players, playedTurns, cardsInHand, playCards, playerState,\n}: Props) {\n  return (\n    <div>\n      <Players players={players} />\n      <Stack playedTurns={playedTurns} />\n      <Hand\n        isServerRequestingCards={playerState.isServerRequestingCards}\n        cardsInHand={cardsInHand}\n        playCards={playCards}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: GameState) => ({\n  cardsInHand: state.game.cardsInHand,\n  players: state.game.players,\n  playedTurns: state.game.validatedTurns,\n  playerState: state.game.players.find((player) => player.id === state.authentication.subject) as PlayerState,\n});\n\nconst mapDispatchToProps = (dispatch: (action: Action) => void, ownProps: { serverApi: WebSocketGameApi }) => ({\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  GameAction, requestCards, resetGame, setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/action';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: GameAction) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_START_GAME:\n      return dispatch(startGame(message.data.players));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(resetGame());\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards());\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport './App.css';\nimport Game from './Game';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from './communication/webSocketServerApi';\nimport { GameState } from './redux/reducers';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: (action: Action) => void;\n  authenticationToken: string;\n  isGameStarted: boolean;\n}\n\nfunction Lobby({ dispatch, authenticationToken, isGameStarted }: Props) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch));\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    subject.pipe(\n      filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION),\n    ).subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    });\n    return () => subject.complete();\n  }, [subject, authenticationToken]);\n\n  return (\n    <div className=\"Lobby\">\n      <h1>Agurk</h1>\n\n      { isGameStarted\n        ? <Game serverApi={gameApi} />\n        : <button type=\"button\" onClick={gameApi.sendStartGame}>Start Game</button> }\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: GameState) => ({\n  isGameStarted: state.game.isRunning,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import {\n  Card, OutPlayer, Penalty, PlayerId, ValidatedTurn, Error,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly jwt: string;\n}\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | AuthenticateWithTokenAction;\n\nexport function authenticateWithToken(jwt: string): GameAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    jwt,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(): GameAction {\n  return {\n    type: REQUEST_CARDS,\n  };\n}\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Action } from 'redux';\nimport { authenticateWithToken } from './redux/action';\n\ninterface Props {\n  authenticate: (jwt: string) => void;\n}\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nfunction Authenticate({ authenticate }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: nameInput,\n        token: tokenInput,\n      }),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          authenticate(body.jwt);\n        }\n      })\n      .catch((error) => console.log(error));\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <div>\n      <h1>Home</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">\n          Player name:\n          <input id=\"name\" value={nameInput} onChange={handleNameChange} type=\"text\" name=\"name\" />\n        </label>\n\n        <label htmlFor=\"token\">\n          Access token\n          <input id=\"token\" value={tokenInput} onChange={handleTokenChange} type=\"text\" name=\"token\" />\n        </label>\n\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: (action: Action) => void) => ({\n  authenticate: (token: string) => dispatch(authenticateWithToken(token)),\n});\n\nexport default connect(null, mapDispatchToProps)(Authenticate);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport logo from './logo.svg';\nimport './App.css';\nimport Lobby from './Lobby';\nimport { GameState } from './redux/reducers';\nimport Authenticate from './Authenticate';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <main>\n        { isAuthenticated ? <Lobby /> : <Authenticate /> }\n      </main>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: GameState) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  Card, cardEquals, JwtPayload, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport jwtDecode from 'jwt-decode';\nimport {\n  ADD_PLAYER_TURN,\n  AUTHENTICATE_WITH_TOKEN,\n  END_CYCLE,\n  END_GAME_ERROR,\n  END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  REQUEST_CARDS,\n  RESET_GAME,\n  SET_CARDS_IN_HAND,\n  START_CYCLE,\n  START_GAME,\n  START_PLAYER_TURN,\n  START_ROUND,\n} from './action';\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface GameState {\n  authentication: {\n    subject: PlayerId;\n    isAuthenticated: boolean,\n    token: string,\n  },\n  game: {\n    isRunning: boolean;\n    players: PlayerState[];\n    validatedTurns: ValidatedTurn[];\n    cardsInHand: Card[];\n  }\n}\n\nconst INITIAL_STATE: GameState = {\n  authentication: {\n    subject: '',\n    isAuthenticated: false,\n    token: '',\n  },\n  game: {\n    isRunning: false,\n    players: [],\n    validatedTurns: [],\n    cardsInHand: [],\n  },\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nexport default function reducer(state: GameState = INITIAL_STATE, action: GameAction): GameState {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          isRunning: true,\n          players: action.playerIds.map((playerId) => ({\n            ...INITIAL_PLAYER_STATE,\n            id: playerId,\n          })),\n        },\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          players: state.game.players.map((player) => ({\n            ...player,\n            isGameWinner: player.id === action.winner,\n            isServerRequestingCards: false,\n          })),\n          validatedTurns: [],\n          cardsInHand: [],\n        },\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          validatedTurns: [],\n          players: state.game.players.map((player) => ({\n            ...player,\n            isServerRequestingCards: false,\n          })),\n          cardsInHand: [],\n          isRunning: false,\n        },\n      };\n    case END_GAME_ERROR:\n      return state;\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          cardsInHand: action.cards,\n        },\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          validatedTurns: [\n            ...state.game.validatedTurns,\n            action.turn,\n          ],\n          cardsInHand: (action.turn.playerId === state.authentication.subject && action.turn.valid\n            ? filterAvailableCardsAfterTurn(state.game.cardsInHand, action.turn)\n            : state.game.cardsInHand),\n        },\n      };\n    case START_ROUND:\n      return state;\n    case END_ROUND:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          players: state.game.players.map((player) => ({\n            ...player,\n            penalties: [\n              ...player.penalties,\n              ...filterPenaltiesForPlayerId(action.penalties, player.id),\n            ],\n            isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n            isRoundWinner: player.id === action.winner,\n          })),\n        },\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          validatedTurns: [],\n        },\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          players: state.game.players.map((player) => ({\n            ...player,\n            isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n            isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          })),\n        },\n      };\n    case REQUEST_CARDS:\n      return state;\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        authentication: {\n          subject: (jwtDecode(action.jwt) as JwtPayload).sub,\n          isAuthenticated: true,\n          token: action.jwt,\n        },\n      };\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        game: {\n          ...state.game,\n          players: state.game.players.map((player) => ({\n            ...player,\n            isServerRequestingCards: action.playerId === player.id,\n          })),\n        },\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './redux/reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}