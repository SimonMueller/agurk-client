{"version":3,"sources":["logo.svg","Card.tsx","SelectableCardList.tsx","Hand.tsx","Player.tsx","Players.tsx","CardList.tsx","Stack.tsx","Game.tsx","communication/webSocketServerApi.ts","Lobby.tsx","redux/action.ts","AuthenticatedRoute.tsx","Home.tsx","serviceWorker.ts","redux/reducers.ts","index.tsx","App.tsx"],"names":["module","exports","JokerCard","card","kind","color","SuitCard","suit","rank","generateKey","JOKER_CARD_KIND","Card","CardList","cards","handleSelect","cardItems","map","key","type","checked","isSelected","onChange","PlayTurn","playSelectedCards","onClick","Hand","playCards","cardsInHand","useState","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","selectedCards","filter","Player","player","isServerRequestingCards","id","Players","playerItems","players","Stack","playedCards","playedTurns","turn","valid","flatMap","connect","state","ownProps","serverApi","sendPlayCards","startGame","sendStartGame","validatedTurns","subject","next","name","MessageName","START_GAME","PLAY_CARDS","data","sendAuthenticate","jwt","AUTHENTICATE","createGameApi","bind","authenticationToken","authentication","dispatch","webSocket","process","subscribe","message","BROADCAST_START_GAME","playerIds","BROADCAST_END_GAME","isValid","winner","error","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","penalties","outPlayers","endRound","BROADCAST_START_CYCLE","orderedPlayerIds","orderedPlayers","BROADCAST_END_CYCLE","highestTurnPlayerIds","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","BROADCAST_START_PLAYER_TURN","playerId","dispatchWebSocketMessageAsActions","complete","pipe","REQUEST_AUTHENTICATION","createAuthenticationApi","className","isAuthenticated","children","rest","to","authenticate","token","nameInput","setNameInput","tokenInput","setTokenInput","event","a","preventDefault","fetch","method","mode","headers","body","JSON","stringify","response","ok","json","console","onSubmit","htmlFor","value","currentTarget","Boolean","window","location","hostname","match","INITIAL_STATE","isGameFinished","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","isOut","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","playeId","store","createStore","action","ReactDOM","render","src","logo","alt","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b59c247.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\n\ninterface CardProps {\n  card: CardData;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  return (\n    <div>\n      { card.kind }\n      { ' ' }\n      { card.color }\n    </div>\n  );\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  return (\n    <div>\n      { card.suit }\n      {' '}\n      { card.rank }\n    </div>\n  );\n}\n\nexport function generateKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nexport default function Card({ card }: CardProps) {\n  return (\n    card.kind === JOKER_CARD_KIND\n      ? <JokerCard card={card} />\n      : <SuitCard card={card} />\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport Card, { generateKey } from './Card';\n\ninterface Selectable {\n  isSelected: boolean;\n}\n\nexport type SelectableCard = Selectable & CardData;\n\ninterface CardListProps {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nexport default function CardList({ cards, handleSelect }: CardListProps) {\n  const cardItems = cards.map((card) => (\n    <li key={generateKey(card)}>\n      <input type=\"checkbox\" checked={card.isSelected} onChange={() => handleSelect(card)} />\n      <Card card={card} />\n    </li>\n  ));\n\n  return (\n    <ul>\n      { cardItems }\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\n\ninterface HandProps {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n}\n\ninterface PlayTurnProps {\n  playSelectedCards: () => void;\n}\n\nfunction PlayTurn({ playSelectedCards }: PlayTurnProps) {\n  return (\n    <div>\n      <button type=\"button\" onClick={playSelectedCards}>Play Cards</button>\n    </div>\n  );\n}\n\nexport default function Hand({ playCards, cardsInHand }: HandProps) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards\n      .filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n\n      { <PlayTurn playSelectedCards={playSelectedCards} />}\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerState } from './redux/reducers';\n\ninterface PlayerProps {\n  player: PlayerState;\n}\n\nexport default function Player({ player }: PlayerProps) {\n  return (\n    <div>\n      <p>\n        { player.isServerRequestingCards && <span>--&gt;</span> }\n        { player.id }\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport Player from './Player';\nimport { PlayerState } from './redux/reducers';\n\ninterface PlayersProps {\n  players: PlayerState[];\n}\n\nexport default function Players({ players }: PlayersProps) {\n  const playerItems = players.map((player) => <li key={player.id}><Player player={player} /></li>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport Card, { generateKey } from './Card';\n\ninterface CardListProps {\n  cards: CardData[];\n}\n\nexport default function CardList({ cards }: CardListProps) {\n  const cardItems = cards.map((card) => (\n    <li key={generateKey(card)}>\n      <Card card={card} />\n    </li>\n  ));\n\n  return (\n    <ul>\n      { cardItems }\n    </ul>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport CardList from './CardList';\n\ninterface StackProps {\n  playedTurns: ValidatedTurn[];\n}\n\nexport default function Stack({ playedTurns }: StackProps) {\n  const validTurns = playedTurns.filter((turn) => turn.valid);\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n\n  return (\n    <div>\n      <h2>Stack</h2>\n\n      <CardList cards={playedCards} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport Hand from './Hand';\nimport Players from './Players';\nimport Stack from './Stack';\nimport { PlayerState, GameState } from './redux/reducers';\nimport { WebSocketGameApi } from './communication/webSocketServerApi';\n\ninterface GameProps {\n  serverApi: WebSocketGameApi;\n  players: PlayerState[];\n  playedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  playCards: (cards: Card[]) => void;\n  startGame: () => void;\n}\n\nfunction Game({\n  players, playedTurns, cardsInHand, playCards, startGame,\n}: GameProps) {\n  return (\n    <div>\n      <h1>Agurk</h1>\n\n      <button type=\"button\" onClick={startGame}>Start Game</button>\n\n      <Players players={players} />\n      <Stack playedTurns={playedTurns} />\n      <Hand\n        cardsInHand={cardsInHand}\n        playCards={playCards}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: GameState, ownProps: { serverApi: WebSocketGameApi }) => ({\n  playCards: ownProps.serverApi.sendPlayCards,\n  startGame: ownProps.serverApi.sendStartGame,\n  cardsInHand: state.cardsInHand,\n  players: state.players,\n  playedTurns: state.validatedTurns,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  GameAction, requestCards, resetGame, setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/action';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (jwt: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, jwt: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: jwt });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: GameAction) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_START_GAME:\n      return dispatch(startGame(message.data.players));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        dispatch(endGameSuccess(message.data.winner));\n      } else {\n        dispatch(endGameError(message.data.error));\n      }\n      return dispatch(resetGame());\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards());\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport './App.css';\nimport Game from './Game';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from './communication/webSocketServerApi';\nimport { GameState } from './redux/reducers';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface AppProps {\n  dispatch: (action: Action) => void;\n  authenticationToken: string;\n}\n\nfunction Lobby({ dispatch, authenticationToken }: AppProps) {\n  const [subject] = useState<WebSocketSubject<Message>>(webSocket(WSS_SERVER_URI));\n\n  useEffect(() => {\n    subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch));\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    subject.pipe(\n      filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION),\n    ).subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    });\n    return () => subject.complete();\n  }, [subject, authenticationToken]);\n\n  return (\n    <div className=\"Lobby\">\n      <Game serverApi={createGameApi(subject)} />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: GameState) => ({\n  authenticationToken: state.authentication.jwt,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import {\n  Card, OutPlayer, Penalty, PlayerId, ValidatedTurn, Error,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly jwt: string;\n}\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | AuthenticateWithTokenAction;\n\nexport function authenticateWithToken(jwt: string): GameAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    jwt,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(): GameAction {\n  return {\n    type: REQUEST_CARDS,\n  };\n}\n","import React, { ReactNode } from 'react';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { GameState } from './redux/reducers';\n\ninterface Props {\n  children: ReactNode[] | ReactNode;\n  isAuthenticated: boolean;\n}\n\nfunction AuthenticatedRoute({\n  children, isAuthenticated, ...rest\n}: Props & RouteProps) {\n  return (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <Route {...rest}>\n      { isAuthenticated ? children : <Redirect to=\"/\" /> }\n    </Route>\n  );\n}\n\nconst mapStateToProps = (state: GameState) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(AuthenticatedRoute);\n","import React, { FormEvent, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Action } from 'redux';\nimport { GameState } from './redux/reducers';\nimport { authenticateWithToken } from './redux/action';\n\ninterface Props {\n  isAuthenticated: boolean;\n  authenticate: (jwt: string) => void;\n}\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nfunction Home({ isAuthenticated, authenticate }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n    try {\n      const response = await fetch(`${API_SERVER_URI}/authenticate`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: nameInput,\n          token: tokenInput,\n        }),\n      });\n\n      if (response.ok) {\n        const body = await response.json() as { jwt: string };\n        authenticate(body.jwt);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <div>\n      <h1>Home</h1>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">\n          Player name:\n          <input id=\"name\" value={nameInput} onChange={handleNameChange} type=\"text\" name=\"name\" />\n        </label>\n\n        <label htmlFor=\"token\">\n          Access token\n          <input id=\"token\" value={tokenInput} onChange={handleTokenChange} type=\"text\" name=\"token\" />\n        </label>\n\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      { isAuthenticated && <Redirect to=\"/lobby\" /> }\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: (action: Action) => void) => ({\n  authenticate: (token: string) => dispatch(authenticateWithToken(token)),\n});\n\nconst mapStateToProps = (state: GameState) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  Card, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport {\n  ADD_PLAYER_TURN,\n  AUTHENTICATE_WITH_TOKEN,\n  END_CYCLE,\n  END_GAME_ERROR,\n  END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  REQUEST_CARDS,\n  RESET_GAME,\n  SET_CARDS_IN_HAND,\n  START_CYCLE,\n  START_GAME,\n  START_PLAYER_TURN,\n  START_ROUND,\n} from './action';\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  isServerRequestingCards: boolean;\n}\n\nexport interface GameState {\n  authentication: {\n    isAuthenticated: boolean,\n    jwt: string,\n  },\n  isGameFinished: boolean;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n}\n\nconst INITIAL_STATE: GameState = {\n  authentication: {\n    isAuthenticated: false,\n    jwt: '',\n  },\n  isGameFinished: false,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n};\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playeId: PlayerId) {\n  return highestTurnPlayerIds.some((playerId) => playerId === playeId);\n}\n\nexport default function reducer(state: GameState = INITIAL_STATE, action: GameAction): GameState {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        isGameFinished: true,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n          isServerRequestingCards: false,\n        })),\n        cardsInHand: [],\n        validatedTurns: [],\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        cardsInHand: [],\n        validatedTurns: [],\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: false,\n        })),\n      };\n    case END_GAME_ERROR:\n      return {\n        ...state,\n        isGameFinished: true,\n      };\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n      };\n    case START_ROUND:\n      return state;\n    case END_ROUND:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        validatedTurns: [],\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n        })),\n      };\n    case REQUEST_CARDS:\n      return state;\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        authentication: {\n          isAuthenticated: true,\n          jwt: action.jwt,\n        },\n      };\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './redux/reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Lobby from './Lobby';\nimport AuthenticatedRoute from './AuthenticatedRoute';\nimport Home from './Home';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <main>\n        <Router>\n          <Switch>\n            <AuthenticatedRoute path=\"/game\">\n              <Lobby />\n            </AuthenticatedRoute>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </main>\n    </div>\n  );\n}\n"],"sourceRoot":""}