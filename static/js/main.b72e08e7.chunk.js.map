{"version":3,"sources":["components/styled/Button.tsx","redux/authentication.action.ts","components/styled/Message.tsx","components/Login.tsx","redux/game.action.ts","redux/lobby.action.ts","communication/webSocketServerApi.ts","components/board/PlayerIdList.tsx","components/Lobby.tsx","components/board/PlayingCard.tsx","components/board/SelectableCardList.tsx","components/board/Hand.tsx","components/styled/Badge.tsx","components/board/Player.tsx","components/board/PlayerStateList.tsx","redux/game.reducer.ts","components/TextSecondTimer.tsx","components/board/Overview.tsx","components/board/Turn.tsx","components/board/TurnList.tsx","components/board/LastPlayedMaxCard.tsx","components/board/TurnStack.tsx","components/board/PlayedTurns.tsx","components/board/Board.tsx","components/Game.tsx","components/App.tsx","serviceWorker.ts","redux/authentication.reducer.ts","redux/lobby.reducer.ts","redux/index.ts","components/styled/theme.ts","index.tsx"],"names":["PrimaryButton","styled","button","theme","colors","primary","UnstyledButton","authenticateWithToken","token","subject","type","unauthenticateWithError","message","authenticationError","extractSubjectFromToken","jwtDecode","sub","div","error","Container","Input","input","SpacedForm","form","connect","state","authentication","dispatch","useState","nameInput","setNameInput","tokenInput","setTokenInput","onSubmit","event","data","name","fetch","process","method","mode","headers","body","JSON","stringify","then","response","a","ok","json","jwt","playerId","preventDefault","placeholder","id","value","onChange","currentTarget","required","setIsInGame","isInGame","sendStartGame","next","MessageName","START_GAME","sendPlayCards","cards","PLAY_CARDS","sendAuthenticate","AUTHENTICATE","Element","li","PlayerIdList","playerItems","playerIds","map","key","lobby","players","startGame","onClick","Card","isSelected","Image","img","generateCardKey","card","kind","JOKER_CARD_KIND","color","rank","suit","JokerCard","lowercaseColor","toLowerCase","src","alt","SuitCard","lowercaseSuit","cardSrcFile","PlayingCardPlaceholder","PlayingCard","Flex","breakpoints","minWidth","Box","CardList","handleSelect","cardItems","PlayTurn","handlePlayClick","Hand","playCards","cardsInHand","isServerRequestingCards","selectableCards","setSelectableCards","useEffect","clicked","cardEquals","selectedCards","filter","Badge","span","PrimaryBadge","AccentBadge","accent","ErrorBadge","opacityPulse","keyframes","PlayerName","props","isOut","ActivePlayerName","InactivePlayerName","Player","player","penaltySum","penalties","reduce","accumulator","current","Li","byOrderAsc","first","second","Math","sign","order","ActiveOrderedPlayers","activePlayerItems","sort","length","OutPlayers","outPlayerItems","PlayerStateList","GameStage","filterPenaltiesForPlayerId","penalty","isPlayerWithIdOut","outPlayers","some","outPlayer","isPlayerIdOneOfHighestTurnPlayers","highestTurnPlayerIds","highestTurnPlayerId","filterAvailableCardsAfterTurn","turn","cardInHand","undefined","find","turnCard","isTurnValidAndFromPlayer","playedTurn","valid","findPlayerOutReason","reason","findPlayerOrder","orderedPlayerIds","findIndex","INITIAL_STATE","stage","START","validatedTurns","isLastCycleOfRound","turnTimeoutInMillis","turnRetriesLeft","INITIAL_PLAYER_STATE","isGameWinner","isRoundWinner","isCycleHighestTurnPlayer","TextSecondTimer","timeoutInSeconds","timeLeftInSeconds","setTimeLeftInSeconds","interval","setInterval","clearInterval","OverviewParagraph","p","OverviewTitle","h2","YourTurn","turnTimeoutInSeconds","TheirTurn","currentTurnPlayer","TurnIndicator","HighestCyclePlayers","highestCyclePlayerIds","join","RoundWinner","roundWinner","GameWinner","gameWinner","Overview","gameStage","IN_CYCLE","BETWEEN_CYCLES","BETWEEN_ROUNDS","END","CardFlex","MutedCardFlex","muted","CardBox","Centered","TurnBox","generateTurnKey","createCardItems","Valid","Invalid","invalidReason","Turn","TurnList","turnItems","turns","reduceRight","acc","toMaxRankedCard","maxRankCard","currentCard","compareRanks","LastPlayedMaxCard","playedCards","playedTurns","flatMap","highestPlayedCard","findLastTurn","MostRecentTurn","displayedTurn","setDisplayedTurn","previousTurn","previousValidTurn","timeout","setTimeout","clearTimeout","TurnStack","PlayedTurns","Grid","OverviewBox","PlayedTurnsBox","HandBox","PlayersBox","NavigationBox","ownProps","game","playerState","serverApi","closeGame","respondToAuthenticationRequestFromServer","authenticationToken","pipe","REQUEST_AUTHENTICATION","subscribe","bind","createAuthenticationApi","handleMessagesFromServer","BROADCAST_LOBBY_PLAYERS","BROADCAST_START_GAME","BROADCAST_END_GAME","isValid","winner","BROADCAST_START_ROUND","startRound","BROADCAST_END_ROUND","endRound","BROADCAST_START_CYCLE","orderedPlayers","isLastOfRound","BROADCAST_END_CYCLE","highestTurnPlayers","BROADCAST_PLAYER_TURN","AVAILABLE_CARDS_IN_HAND","REQUEST_CARDS","timeoutInMillis","retriesLeft","BROADCAST_START_PLAYER_TURN","dispatchWebSocketMessageAsActions","webSocketSubject","webSocket","url","closeObserver","closeEvent","gameApi","createGameApi","complete","Header","header","NavBar","nav","NavLink","NavTitle","Main","main","isAuthenticated","href","target","Boolean","window","location","hostname","match","combineReducers","action","BEFORE_CYCLE","outReason","text","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ytBAGO,IAAMA,EAAgBC,IAAOC,OAAV,KAOJ,qBAAGC,MAAqCC,OAAOC,WAE1D,qBAAGF,MAAqCC,OAAOC,WAGlC,qBAAGF,MAAqCC,OAAOC,WAM1DC,EAAiBL,IAAOC,OAAV,K,0CCKpB,SAASK,EAAsBC,EAAeC,GACnD,MAAO,CACLC,KArBmC,0BAsBnCF,QACAC,WAIG,SAASE,EAAwBC,GACtC,MAAO,CACLF,KA3BqC,4BA4BrCE,WAIG,SAASC,EAAoBD,GAClC,MAAO,CACLF,KAnCgC,uBAoChCE,WAIJ,SAASE,EAAwBN,GAC/B,OAAQO,IAAUP,GAAsBQ,I,2KC9C3Bf,UAAOgB,IAAtB,KACsB,qBAAGd,MAAqCC,OAAOc,S,kYCWrE,IAAMC,EAAYlB,IAAOgB,IAAV,KAKTG,EAAQnB,IAAOoB,MAAV,KASLC,EAAarB,IAAOsB,KAAV,KAsDhB,IAIeC,eAJS,SAACC,GAAD,MAAmB,CACzCP,MAAOO,EAAMC,eAAeR,SAGfM,EAtDf,YAA4C,IAA3BG,EAA0B,EAA1BA,SAAUT,EAAgB,EAAhBA,MAAgB,EACPU,mBAAiB,IADV,mBAClCC,EADkC,KACvBC,EADuB,OAELF,mBAAiB,IAFZ,mBAElCG,EAFkC,KAEtBC,EAFsB,KAiBzC,OACE,kBAACb,EAAD,KACE,qCAEA,kBAACG,EAAD,CAAYW,SAjBhB,SAAsBC,GFejB,IAAsBC,EEdzBR,GFcyBQ,EEdH,CAAEC,KAAMP,EAAWrB,MAAOuB,GFe3C,SAA4BJ,GACjCU,MAAM,GAAD,OAjDcC,qCAiDd,iBAAmC,CACtCC,OAAQ,OACRC,KAAM,OACNC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUT,KAEpBU,KANH,uCAMQ,WAAOC,GAAP,mBAAAC,EAAA,0DACAD,EAASE,GADT,iCAEiBF,EAASG,OAF1B,OAEIP,EAFJ,OAGIlC,EAAQkC,EAAKQ,IACbzC,EAAUK,EAAwB4B,EAAKQ,KAC7CvB,EAASpB,EAAsBC,EAAOC,IACtCkB,EGcD,CACLjB,KA5EyB,gBA6EzByC,SHhB2B1C,IANnB,wBAQFkB,EAASd,EAAoB,0BAR3B,4CANR,uDAgBK,kBAAMc,EAASd,EAAoB,uDE/BxCqB,EAAMkB,mBAgBF,kBAAChC,EAAD,CACEiC,YAAY,cACZC,GAAG,OACHC,MAAO1B,EACP2B,SAjBR,SAA0BtB,GACxBJ,EAAaI,EAAMuB,cAAcF,QAiB3B7C,KAAK,OACL0B,KAAK,OACLsB,UAAQ,IAGV,kBAACtC,EAAD,CACEiC,YAAY,eACZC,GAAG,QACHC,MAAOxB,EACPyB,SAvBR,SAA2BtB,GACzBF,EAAcE,EAAMuB,cAAcF,QAuB5B7C,KAAK,WACL0B,KAAK,QACLsB,UAAQ,IAGV,kBAAC1D,EAAD,CAAeU,KAAK,UAApB,WAGAQ,GAAS,kBAAC,EAAD,KAAeA,O,uBEvDzB,SAASyC,EAAYC,GAC1B,MAAO,CACLlD,KArB0B,iBAsB1BkD,YCIJ,SAASC,EAAcpD,GACrB,OAAOA,EAAQqD,KAAK,CAAE1B,KAAM2B,cAAYC,aAG1C,SAASC,EAAcxD,EAAoCyD,GACzD,OAAOzD,EAAQqD,KAAK,CAAE1B,KAAM2B,cAAYI,WAAYhC,KAAM+B,IAG5D,SAASE,EAAiB3D,EAAoCD,GAC5D,OAAOC,EAAQqD,KAAK,CAAE1B,KAAM2B,cAAYM,aAAclC,KAAM3B,I,gGC/B9D,IAAM8D,EAAUrE,IAAOsE,GAAV,KAIE,SAASC,EAAT,GAA6C,IACpDC,EADmD,EAApBC,UACPC,KAAI,SAACxB,GAAD,OAAc,kBAACmB,EAAD,CAASM,IAAKzB,GAAWA,MAEzE,OACE,6BACE,uCAEA,4BACIsB,ICCV,IAIejD,eAJS,SAACC,GAAD,MAAmB,CACzCiD,UAAWjD,EAAMoD,MAAMC,WAGVtD,EAbf,YAAiD,IAAhCkD,EAA+B,EAA/BA,UAAWK,EAAoB,EAApBA,UAC1B,OACE,6BACE,kBAACP,EAAD,CAAcE,UAAWA,IACzB,kBAAC1E,EAAD,CAAeU,KAAK,SAASsE,QAASD,GAAtC,kB,4XCIN,IAAME,EAAOhF,IAAOgB,IAAV,KACQ,gBAAGiE,EAAH,EAAGA,WAAY/E,EAAf,EAAeA,MAAf,OACd+E,EAAU,UAAM/E,EAAMC,OAAOC,SAAY,WAavC8E,EAAQlF,IAAOmF,IAAV,KAIJ,SAASC,EAAgBC,GAC9B,OAAIA,EAAKC,OAASC,kBACTF,EAAKG,MAAQH,EAAKI,KAEpBJ,EAAKK,KAAOL,EAAKI,KAG1B,SAASE,EAAT,GAA8C,IACtCC,EADqC,EAAxBP,KACSG,MAAMK,cAElC,OAAO,kBAACX,EAAD,CAAOY,IADM,iCACYC,IAAG,8BAAyBH,KAG9D,SAASI,GAAT,GAA4C,IAAxBX,EAAuB,EAAvBA,KACZY,EAAgBZ,EAAKK,KAAKG,cAC1BK,EAAW,+BAA2Bb,EAAKI,KAAhC,YAAwCQ,EAAxC,QACjB,OAAO,kBAACf,EAAD,CAAOY,IAAKI,EAAaH,IAAG,uBAAkBV,EAAKI,KAAvB,qBAAwCQ,KAGtE,SAASE,KAEd,OACE,kBAACnB,EAAD,CAAMC,YAAY,GAChB,kBAACC,EAAD,CAAOY,IAHS,uCAGSC,IAAI,sBAKpB,SAASK,GAAT,GAAsE,IAA/Cf,EAA8C,EAA9CA,KAA8C,IAAxCJ,kBAAwC,SAClF,OACE,kBAACD,EAAD,CAAMC,WAAYA,GACdI,EAAKC,OAASC,kBACZ,kBAACI,EAAD,CAAWN,KAAMA,IACjB,kBAACW,GAAD,CAAUX,KAAMA,K,6YC1D1B,IAEMgB,GAAOrG,IAAOgB,IAAV,KAFa,UAQD,qBAAGd,MAAqCoG,YAAYC,YAKpEC,GAAMxG,IAAOgB,IAAV,KAbc,UAiBD,qBAAGd,MAAqCoG,YAAYC,YAK3D,SAASE,GAAT,GAAmD,IAA/BxC,EAA8B,EAA9BA,MAAOyC,EAAuB,EAAvBA,aAClCC,EAAY1C,EAAMS,KAAI,SAACW,GAAD,OAC1B,kBAACmB,GAAD,CAAK7B,IAAKS,EAAgBC,IACxB,kBAAChF,EAAD,CAAgB0E,QAAS,kBAAM2B,EAAarB,KAC1C,kBAACe,GAAD,CAAaf,KAAMA,EAAMJ,WAAYI,EAAKJ,kBAKhD,OACE,kBAACoB,GAAD,KACIM,GChCR,SAASC,GAAT,GAAuD,IAAnCC,EAAkC,EAAlCA,gBAClB,OACE,oCACE,kBAAC9G,EAAD,CAAeU,KAAK,SAASsE,QAAS8B,GAAtC,eAOS,SAASC,GAAT,GAA2E,IAA3DC,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,wBAAkC,EACzCtF,mBAA2B,IADc,mBAChFuF,EADgF,KAC/DC,EAD+D,KAmBvF,OAhBAC,qBAAU,WACR,IAAMnD,EAAQ+C,EAAYtC,KAAI,SAACW,GAAD,sBAAgBA,EAAhB,CAAsBJ,YAAY,OAChEkC,EAAmBlD,KAClB,CAAC+C,IAcF,6BACE,yCAEA,kBAAC,GAAD,CAAoB/C,MAAOiD,EAAiBR,aAVhD,SAA0BW,GACxBF,EAAmBD,EAAgBxC,KAAI,SAACW,GAAD,OAAWiC,qBAAWjC,EAAMgC,GAAjB,eACzChC,EADyC,CACnCJ,YAAaI,EAAKJ,aAC7BI,SASA4B,GAA2B,kBAACL,GAAD,CAAUC,gBAjB3C,WACE,IAAMU,EAAgBL,EAAgBM,QAAO,SAACnC,GAAD,OAAUA,EAAKJ,cAC5D8B,EAAUQ,O,ylBChCP,IAAME,GAAQzH,IAAO0H,KAAV,MAULC,GAAe3H,YAAOyH,GAAPzH,CAAH,MACH,qBAAGE,MAAqCC,OAAOC,WAIxDwH,GAAc5H,YAAOyH,GAAPzH,CAAH,MACF,qBAAGE,MAAqCC,OAAO0H,UAIxDC,GAAa9H,YAAOyH,GAAPzH,CAAH,MACD,qBAAGE,MAAqCC,OAAOc,S,ofCfrE,IAAM8G,GAAeC,YAAH,MAcZC,GAAajI,IAAO0H,KAAV,MACU,SAACQ,GAAD,OAAgCA,EAAMC,MAAQ,eAAiB,UAGnFC,GAAmBpI,YAAOiI,GAAPjI,CAAH,KACP+H,IAITM,GAAqBrI,YAAOiI,GAAPjI,CAAH,MAIT,SAASsI,GAAT,GAAoC,IAAlBC,EAAiB,EAAjBA,OACzBC,EAAaD,EAAOE,UAAUC,QAAO,SAACC,EAAaC,GAAd,OAA0BA,EAAQvD,KAAKI,KAAOkD,IAAa,GAEtG,OACE,oCACIJ,EAAOtB,wBACL,kBAACmB,GAAD,CAAkBD,MAAOI,EAAOJ,OAASI,EAAOlF,IAChD,kBAACgF,GAAD,CAAoBF,MAAOI,EAAOJ,OAASI,EAAOlF,IACtD,kBAACuE,GAAD,eAEG,IACAY,I,kGCtCT,IAAMK,GAAK7I,IAAOsE,GAAV,MAIR,SAASwE,GAAWC,EAAoBC,GACtC,OAAOC,KAAKC,KAAKH,EAAMI,MAAQH,EAAOG,OAGxC,SAASC,GAAT,GAAmD,IAE3CC,EAF0C,EAAlBxE,QACO2C,QAAO,SAACe,GAAD,OAAaA,EAAOJ,SAAOmB,KAAKR,IAC7BpE,KAAI,SAAC6D,GAAD,OAAY,kBAACM,GAAD,CAAIlE,IAAK4D,EAAOlF,IAAI,kBAACiF,GAAD,CAAQC,OAAQA,QAEnG,OAAiC,IAA7Bc,EAAkBE,OACb,KAIP,oCACE,uCAEA,4BACIF,IAMV,SAASG,GAAT,GAAyC,IAEjCC,EAFgC,EAAlB5E,QACO2C,QAAO,SAACe,GAAD,OAAYA,EAAOJ,SACnBzD,KAAI,SAAC6D,GAAD,OAAY,kBAACM,GAAD,CAAIlE,IAAK4D,EAAOlF,IAAI,kBAACiF,GAAD,CAAQC,OAAQA,QAEtF,OAA8B,IAA1BkB,EAAeF,OACV,KAIP,oCACE,2CAEA,4BACIE,IAMK,SAASC,GAAT,GAA8C,IAAnB7E,EAAkB,EAAlBA,QACxC,OACE,6BACE,kBAACuE,GAAD,CAAsBvE,QAASA,IAC/B,kBAAC2E,GAAD,CAAY3E,QAASA,K,ICAf8E,G,SAzCZ,SAASC,GAA2BnB,EAAsBvF,GACxD,OAAOuF,EAAUjB,QAAO,SAACqC,GAAD,OAAaA,EAAQ3G,WAAaA,KAG5D,SAAS4G,GAAkBC,EAAyB7G,GAClD,OAAO6G,EAAWC,MAAK,SAACC,GAAD,OAAeA,EAAU5G,KAAOH,KAGzD,SAASgH,GAAkCC,EAAkCjH,GAC3E,OAAOiH,EAAqBH,MAAK,SAACI,GAAD,OAAyBA,IAAwBlH,KAGpF,SAASmH,GAA8BrD,EAAqBsD,GAC1D,OAAOtD,EAAYQ,QAAO,SAAC+C,GAAD,YACkCC,IADlBF,EAAKrG,MAC5CwG,MAAK,SAACC,GAAD,OAAcpD,qBAAWiD,EAAYG,SAG/C,SAASC,GAAyBC,EAA2B1H,GAC3D,OAAO0H,EAAW1H,WAAaA,GAAY0H,EAAWC,MAGxD,SAASC,GAAoBf,EAAyB7G,GAAqB,IAAD,EACxE,iBAAO6G,EAAWU,MAAK,SAACR,GAAD,OAAeA,EAAU5G,KAAOH,YAAvD,aAAO,EAA2D6H,OAGpE,SAASC,GAAgBC,EAA8B1C,GACrD,OAAO0C,EAAiBC,WAAU,SAAChI,GAAD,OAAcA,IAAaqF,EAAOlF,O,SAe1DsG,O,iBAAAA,I,aAAAA,I,mCAAAA,I,mCAAAA,I,+BAAAA,I,wBAAAA,Q,KAoBZ,IAAMwB,GAAuB,CAC3BC,MAAOzB,GAAU0B,MACjBnI,cAAUsH,EACV3F,QAAS,GACTyG,eAAgB,GAChBtE,YAAa,GACbuE,oBAAoB,EACpBC,yBAAqBhB,EACrBiB,gBAAiB,GAGbC,GAAuB,CAC3BC,cAAc,EACdC,eAAe,EACfC,0BAA0B,EAC1BpD,UAAW,GACXN,OAAO,EACPlB,yBAAyB,EACzBkC,OAAQ,GC3FK,SAAS2C,GAAT,GAAuD,IAA5BC,EAA2B,EAA3BA,iBAA2B,EACjBpK,mBAAiBoK,GADA,mBAC5DC,EAD4D,KACzCC,EADyC,KAiBnE,OAdA7E,qBAAU,WACR6E,EAAqBF,KACpB,CAACA,IAEJ3E,qBAAU,WACR,IAAM8E,EAAmBC,aAAY,WAEnC,OAD4BH,EAAoB,EACnB,EACzBI,cAAcF,GACdD,EAAqBD,EAAoB,KAC5C,KACH,OAAO,kBAAMI,cAAcF,OAGrB,oCAAIF,G,uXCVd,IAAM3F,GAAOrG,IAAOgB,IAAV,MAOJqL,GAAoBrM,IAAOsM,EAAV,MAKjBC,GAAgBvM,IAAOwM,GAAV,MAInB,SAASC,GAAT,GAAuH,IAAnGC,EAAkG,EAAlGA,qBAAsBjB,EAA4E,EAA5EA,gBACxC,OACE,kBAAC,GAAD,KACE,kBAACc,GAAD,iBAEI,KAEFG,GACA,kBAACL,GAAD,KACE,kBAACP,GAAD,CAAiBC,iBAAkBW,IACjC,IAFJ,cAII,IACAjB,EACA,IACoB,IAApBA,EACE,aACA,iBAOd,SAASkB,GAAT,GAAyD,IACjDC,EADgD,EAAnC/H,QACe4F,MAAK,SAAClC,GAAD,OAAYA,EAAOtB,2BAC1D,OACE,kBAACsF,GAAD,YACIK,QADJ,IACIA,OADJ,EACIA,EAAmBvJ,GACnB,WAKR,SAASwJ,GAAT,GAEqG,IADnG5F,EACkG,EADlGA,wBAAyBpC,EACyE,EADzEA,QAAS6H,EACgE,EADhEA,qBAAsBjB,EAC0C,EAD1CA,gBAExD,OAAQxE,EACJ,kBAACwF,GAAD,CAAUC,qBAAsBA,EAAsBjB,gBAAiBA,IACvE,kBAACkB,GAAD,CAAW9H,QAASA,IAI1B,SAASiI,GAAT,GAAmE,IAC3DC,EAD0D,EAAnClI,QAE1B2C,QAAO,SAACe,GAAD,OAAYA,EAAOsD,4BAC1BnH,KAAI,SAAC6D,GAAD,OAAYA,EAAOlF,MAE1B,OAAqC,IAAjC0J,EAAsBxD,OACjB,+CAIP,kBAACgD,GAAD,KACIQ,EAAsBC,KAAK,SAC3B,IACiC,IAAjCD,EAAsBxD,OACpB,iBACA,iBAKV,SAAS0D,GAAT,GAA2D,IACnDC,EADkD,EAAnCrI,QACO4F,MAAK,SAAClC,GAAD,OAAYA,EAAOqD,iBACpD,OACE,kBAACW,GAAD,KACIW,EAAW,UACNA,EAAY7J,GADN,mBAET,mBAKV,SAAS8J,GAAT,GAA0D,IAClDC,EADiD,EAAnCvI,QACO4F,MAAK,SAAClC,GAAD,OAAYA,EAAOoD,gBACnD,OACE,kBAACY,GAAD,KACIa,EAAU,UACLA,EAAW/J,GADN,2CAER,kBAKK,SAASgK,GAAT,GAEJ,IADTpG,EACQ,EADRA,wBAAyBpC,EACjB,EADiBA,QAAS6H,EAC1B,EAD0BA,qBAAsBjB,EAChD,EADgDA,gBAExD,OADQ,EADiE6B,WAGvE,KAAK3D,GAAU4D,SACb,OACE,kBAACV,GAAD,CACE5F,wBAAyBA,EACzBpC,QAASA,EACT4G,gBAAiBA,EACjBiB,qBAAsBA,IAG5B,KAAK/C,GAAU6D,eACb,OACE,kBAACV,GAAD,CAAqBjI,QAASA,IAElC,KAAK8E,GAAU8D,eACb,OACE,kBAACR,GAAD,CAAapI,QAASA,IAE1B,KAAK8E,GAAU+D,IACb,OACE,kBAACP,GAAD,CAAYtI,QAASA,IAEzB,QACE,OAAO,M,mjBCjIb,IAAM8I,GAAW3N,IAAOgB,IAAV,MAMR4M,GAAgB5N,YAAO2N,GAAP3N,CAAH,MACR,qBAAGE,MAAqCC,OAAO0N,SAGpDC,GAAU9N,IAAOgB,IAAV,MAKP+M,GAAW/N,IAAOgB,IAAV,MAIRgN,GAAUhO,IAAOgB,IAAV,MAKN,SAASiN,GAAgB3D,GAC9B,OAAOA,EAAKpH,SAAWoH,EAAKO,MAG9B,SAASqD,GAAgB5D,GACvB,OAAOA,EAAKrG,MAAMS,KAAI,SAACW,GAAD,OACpB,kBAACyI,GAAD,CAASnJ,IAAKS,EAAgBC,IAC5B,kBAACe,GAAD,CAAaf,KAAMA,QAKzB,SAAS8I,GAAT,GAA+C,IAA9B7D,EAA6B,EAA7BA,KACT3D,EAAYuH,GAAgB5D,GAElC,OACE,kBAAC0D,GAAD,KACE,kBAACL,GAAD,KACIhH,GAEJ,kBAACoH,GAAD,KAAU,8BAAOzD,EAAKpH,YAK5B,SAASkL,GAAT,GAAmD,IAAhC9D,EAA+B,EAA/BA,KACX3D,EAAYuH,GAAgB5D,GAElC,OACE,kBAAC0D,GAAD,KACE,kBAACJ,GAAD,KACyB,IAArBjH,EAAU4C,OACR,kBAACpD,GAAD,MACAQ,GAEN,kBAACoH,GAAD,KAAU,8BAAOzD,EAAKpH,WACtB,kBAAC6K,GAAD,KACE,kBAACjG,GAAD,KAAawC,EAAK+D,iBAMX,SAASC,GAAT,GAAgC,IAAhBhE,EAAe,EAAfA,KAC7B,OAAOA,EAAKO,MACR,kBAACsD,GAAD,CAAO7D,KAAMA,IACb,kBAAC8D,GAAD,CAAS9D,KAAMA,I,+GCxErB,IAAMjE,GAAOrG,IAAOgB,IAAV,MAKK,SAASuN,GAAT,GAAqC,IAO5CC,EAP2C,EAAhBC,MACGC,aAA6B,SAACC,EAAK/F,GAErE,YAD0F4B,IAA3DmE,EAAIlE,MAAK,SAACH,GAAD,OAAUA,EAAKpH,WAAa0F,EAAQ1F,YAC/C,CACxB0F,GADwB,oBACZ+F,IACbA,IACH,IACqCjK,KAAI,SAAC4F,GAAD,OAAW,kBAACgE,GAAD,CAAM3J,IAAKsJ,GAAgB3D,GAAOA,KAAMA,OAE/F,OACE,kBAAC,GAAD,KACIkE,G,kMCbR,IAAMT,GAAW/N,IAAOgB,IAAV,MAIR8M,GAAU9N,IAAOgB,IAAV,MAIb,SAAS4N,GAAgBC,EAAmBC,GAC1C,OAAOC,uBAAaF,EAAaC,GAAe,EAAID,EAAcC,EAGrD,SAASE,GAAT,GAAoD,IAE3DC,EAF0D,EAAtBC,YACX1H,QAAO,SAAC8C,GAAD,OAAUA,EAAKO,SACtBsE,SAAQ,SAAC7E,GAAD,OAAUA,EAAKrG,SAChDmL,EAAoBH,EAAY1F,OAAS,EAC3C,kBAACnD,GAAD,CAAaf,KAAM4J,EAAYvG,OAAOkG,MACtC,kBAACzI,GAAD,MAEJ,OACE,6BACE,kBAAC,GAAD,KACIiJ,GAEJ,kBAAC,GAAD,KACE,kBAACzH,GAAD,uB,kLC3BR,IAAMtB,GAAOrG,IAAOgB,IAAV,MAUV,SAASqO,GAAaH,GACpB,OAAOA,EAAYA,EAAY3F,OAAS,GAG1C,SAAS+F,GAAT,GAAiD,IAAvBJ,EAAsB,EAAtBA,YAAsB,EACJvN,wBAAoC6I,GADhC,mBACvC+E,EADuC,KACxBC,EADwB,KAmB9C,OAfApI,qBAAU,WACR,IAAMqI,EAAeJ,GAAaH,GAGlC,GAFAM,EAAiBC,GAEbA,IAAiBA,EAAa5E,MAAO,CACvC,IACM6E,EAAoBL,GADPH,EAAY1H,QAAO,SAAC8C,GAAD,OAAUA,EAAKO,UAG/C8E,EAAkBC,YAAW,WACjCJ,EAAiBE,KAXW,KAa9B,OAAO,kBAAMG,aAAaF,OAE3B,CAACT,IAEGK,EACH,kBAACjB,GAAD,CAAMhE,KAAMiF,IACZ,KAGS,SAASO,GAAT,GAA4C,IAAvBZ,EAAsB,EAAtBA,YAClC,OACE,kBAAC,GAAD,KACE,kBAACF,GAAD,CAAmBE,YAAaA,IAChC,kBAACI,GAAD,CAAgBJ,YAAaA,KC1CpB,SAASa,GAAT,GAAkE,IAA3Cb,EAA0C,EAA1CA,YACpC,OAD8E,EAA7B3D,mBAE7C,kBAACgD,GAAD,CAAUE,MAAOS,IACjB,kBAACY,GAAD,CAAWZ,YAAaA,I,izDCmB9B,IAAMc,GAAOhQ,IAAOgB,IAAV,MAIY,qBAAGd,MAAqCoG,YAAYC,YAQpE0J,GAAcjQ,IAAOgB,IAAV,MAMK,qBAAGd,MAAqCoG,YAAYC,YAQpE2J,GAAiBlQ,IAAOgB,IAAV,MAME,qBAAGd,MAAqCoG,YAAYC,YAQpE4J,GAAUnQ,IAAOgB,IAAV,MAMS,qBAAGd,MAAqCoG,YAAYC,YAQpE6J,GAAapQ,IAAOgB,IAAV,MAMM,qBAAGd,MAAqCoG,YAAYC,YAQpE8J,GAAgBrQ,IAAOgB,IAAV,MAMG,qBAAGd,MAAqCoG,YAAYC,YAiD1E,IAuBehF,gBAvBS,SAACC,EAAc8O,GAAf,MAA8D,CACpF9O,MAAO,CACLwF,YAAaxF,EAAM+O,KAAKvJ,YACxBnC,QAASrD,EAAM+O,KAAK1L,QACpBuG,MAAO5J,EAAM+O,KAAKnF,MAClB8D,YAAa1N,EAAM+O,KAAKjF,eACxBkF,YAAahP,EAAM+O,KAAK1L,QAAQ4F,MAAK,SAAClC,GAAD,OAAYA,EAAOlF,KAAO7B,EAAM+O,KAAKrN,YAC1E6D,UAAW,SAAC9C,GAAD,OAAmBqM,EAASG,UAAUzM,cAAcC,IAC/DsH,mBAAoB/J,EAAM+O,KAAKhF,mBAC/BmB,qBAAsBlL,EAAM+O,KAAK/E,oBAAsBhK,EAAM+O,KAAK/E,oBAAsB,SAAOhB,EAC/FiB,gBAAiBjK,EAAM+O,KAAK9E,iBAE9B1E,UAAW,SAAC9C,GAAD,OAAmBqM,EAASG,UAAUzM,cAAcC,QAItC,SAACvC,GAAD,MAAiC,CAC1DgP,UAAW,WAEThP,EAASgC,GAAY,QAIVnC,EAhEf,YAAwD,IAAvCC,EAAsC,EAAtCA,MAAOuF,EAA+B,EAA/BA,UAAW2J,EAAoB,EAApBA,UACjC,OAAKlP,EAAMgP,YAKT,kBAACR,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC5C,GAAD,CACEC,UAAW9L,EAAM4J,MACjBnE,wBAAyBzF,EAAMgP,YAAYvJ,wBAC3CpC,QAASrD,EAAMqD,QACf6H,qBAAsBlL,EAAMkL,qBAC5BjB,gBAAiBjK,EAAMiK,mBAG3B,kBAACyE,GAAD,KACE,kBAACH,GAAD,CAAab,YAAa1N,EAAM0N,YAAa3D,mBAAoB/J,EAAM+J,sBAEzE,kBAAC4E,GAAD,KACE,kBAACrJ,GAAD,CACEG,wBAAyBzF,EAAMgP,YAAYvJ,wBAC3CD,YAAaxF,EAAMwF,YACnBD,UAAWA,KAGf,kBAACqJ,GAAD,KACE,kBAAC1G,GAAD,CAAiB7E,QAASrD,EAAMqD,WAEhCrD,EAAM4J,QAAUzB,GAAU+D,KAE1B,kBAAC2C,GAAD,KACE,kBAACtQ,EAAD,CAAegF,QAAS2L,GAAxB,qBA9BC,iDC9FX,SAASC,GACPnQ,EACAoQ,EACAlP,GAEAlB,EAAQqQ,KAAKrJ,aAAO,SAAC7G,GAAD,OAAaA,EAAQwB,OAAS2B,cAAYgN,2BAC3DC,WAAU,YlBqDR,SAAiCvQ,GACtC,MAAO,CACL2D,iBAAkBA,EAAiB6M,KAAK,KAAMxQ,KkBtDTyQ,CAAwBzQ,GAChC2D,iBAAiByM,MAE9C,kBAAMlP,EAAShB,EAAwB,0EAG3C,SAASwQ,GAAyB1Q,EAAoCkB,GACpElB,EAAQuQ,WAAU,SAACpQ,GAAD,OlBMb,SAA2CA,EAAkBe,GAElE,OAAQf,EAAQwB,MACd,KAAK2B,cAAYqN,wBACf,OAAOzP,ED7BJ,CACLjB,KAf6B,oBAgB7BgE,UC2BkC9D,EAAQuB,OAC1C,KAAK4B,cAAYsN,qBAEf,OADA1P,EFsCC,SAAmB+C,GACxB,MAAO,CACLhE,KAlFsB,aAmFtBgE,aEzCWK,CAAUnE,EAAQuB,KAAK2C,UACzBnD,EAASgC,GAAY,IAC9B,KAAKI,cAAYuN,mBACf,OAAI1Q,EAAQuB,KAAKoP,QACR5P,EFuDN,CACLjB,KArG4B,mBAsG5B8Q,OEzDmC5Q,EAAQuB,KAAKqP,SAEvC7P,EF8CJ,CACLjB,KA7F0B,iBA8F1BQ,MEhD+BN,EAAQuB,KAAKjB,QAC5C,KAAK6C,cAAY0N,sBACf,OAAO9P,EF8EN,SAAoB+C,GACzB,MAAO,CACLhE,KA7HuB,cA8HvBgE,aEjFkBgN,CAAW9Q,EAAQuB,KAAK2C,UAC1C,KAAKf,cAAY4N,oBACf,OAAOhQ,EFmFN,SAAkB6P,EAA8B9I,EAAsBsB,GAC3E,MAAO,CACLtJ,KAnIqB,YAoIrB8Q,SACA9I,YACAsB,cExFkB4H,CAAShR,EAAQuB,KAAKqP,OAAQ5Q,EAAQuB,KAAKuG,UAAW9H,EAAQuB,KAAK6H,aACrF,KAAKjG,cAAY8N,sBACf,OAAOlQ,GF0FcuJ,EE1FMtK,EAAQuB,KAAK2P,eF0FWC,EE1FKnR,EAAQuB,KAAK4P,cF2FlE,CACLrR,KA3IuB,cA4IvBwK,mBACA6G,mBE7FA,KAAKhO,cAAYiO,oBACf,OAAOrQ,GFgGYqI,EEhGMpJ,EAAQuB,KAAK6H,WFiGnC,CACLtJ,KAlJqB,YAmJrB0J,qBEnGoDxJ,EAAQuB,KAAK8P,mBFoGjEjI,gBEnGA,KAAKjG,cAAYmO,sBACf,OAAOvQ,EFyDJ,CACLjB,KAhH2B,kBAiH3B6J,KE3DgC3J,EAAQuB,OACxC,KAAK4B,cAAYoO,wBACf,OAAOxQ,EFgDJ,CACLjB,KA1G6B,oBA2G7BwD,MElD0CtD,EAAQuB,OAClD,KAAK4B,cAAYqO,cACf,OAAOzQ,GFkGgB8J,EElGM7K,EAAQuB,KAAKkQ,gBFkGU3G,EElGO9K,EAAQuB,KAAKmQ,YFmGrE,CACL5R,KAzJyB,gBA0JzB+K,sBACAC,qBErGA,KAAK3H,cAAYwO,4BACf,OAAO5Q,EF0DJ,CACLjB,KAjH6B,oBAkH7ByC,SE5DkCvC,EAAQuB,OFyDvC,IAuCsBsJ,EAA6BC,EARjC1B,EAREkB,EAA8B6G,EoBlHxBS,CAAkC5R,EAASe,MACxE,kBAAMA,EAAShB,EAAwB,6DAgC3C,IAKea,gBALS,SAACC,GAAD,MAAmB,CACzCmC,SAAUnC,EAAMoD,MAAMjB,SACtBiN,oBAAqBpP,EAAMC,eAAelB,SAG7BgB,EAlCf,YAAmE,IAAnDG,EAAkD,EAAlDA,SAAUkP,EAAwC,EAAxCA,oBAAqBjN,EAAmB,EAAnBA,SACvC6O,EAA8CC,YAAU,CAC5DC,IA5BmBrQ,mCA6BnBsQ,cAAe,CACb9O,KAAM,SAAC+O,GAAD,OAA4BlR,EAAShB,EAAwBkS,EAAW7H,aAJlB,EAO9CpJ,mBAAS6Q,GAApBhS,EAPyD,oBAQ1DqS,ElB0BD,SAAuBrS,GAC5B,MAAO,CACLoD,cAAeA,EAAcoN,KAAK,KAAMxQ,GACxCwD,cAAeA,EAAcgN,KAAK,KAAMxQ,IkB7B1BsS,CAActS,GAY9B,OAVA4G,qBAAU,WAER,OADA8J,GAAyB1Q,EAASkB,GAC3B,kBAAMlB,EAAQuS,cACpB,CAACvS,EAASkB,IAEb0F,qBAAU,WAER,OADAuJ,GAAyCnQ,EAASoQ,EAAqBlP,GAChE,kBAAMlB,EAAQuS,cACpB,CAACvS,EAASkB,EAAUkP,IAGrB,oCACIjN,EACE,kBAAC,GAAD,CAAO8M,UAAWoC,IAClB,kBAAC,EAAD,CAAO/N,UAAW+N,EAAQjP,oB,20BCpDpC,IAAMoP,GAAShT,IAAOiT,OAAV,MACU,qBAAG/S,MAAqCC,OAAOC,WAG/Dc,GAAYlB,IAAOgB,IAAV,MAMTkS,GAASlT,IAAOmT,IAAV,MAMNC,GAAUpT,IAAO8C,EAAV,MAWPuQ,GAAWrT,YAAOoT,GAAPpT,CAAH,MASRsT,GAAOtT,IAAOuT,KAAV,MA0BV,IAIehS,gBAJS,SAACC,GAAD,MAAmB,CACzCgS,gBAAiBhS,EAAMC,eAAe+R,mBAGzBjS,EA1Bf,YAA0C,IAA3BiS,EAA0B,EAA1BA,gBACb,OACE,oCACE,kBAACR,GAAD,KACE,kBAACE,GAAD,KACE,kBAACG,GAAD,CAAUI,KAAK,iBAAf,SAGA,kBAACL,GAAD,CAASM,OAAO,SAASD,KAAK,4EAA9B,oBAKJ,kBAAC,GAAD,KACE,kBAACH,GAAD,KACIE,EAAkB,kBAAC,GAAD,MAAW,kBAAC,EAAD,YCvDrBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJN,IAAM5I,GAAuB,CAC3B3K,QAAS,GACTgT,iBAAiB,EACjBjT,MAAO,GACPU,WAAOuJ,GCVHW,GAAuB,CAC3BtG,QAAS,GACTlB,UAAU,GCCGqQ,6BAAuB,CACpCvS,eFSa,WAA8E,IAApED,EAAmE,uDAApD2J,GAAe8I,EAAqC,uCAC1F,OAAQA,EAAOxT,MACb,I1BhBmC,0B0BiBjC,OAAO,eACFe,EADL,CAEEhB,QAASyT,EAAOzT,QAChBgT,iBAAiB,EACjBjT,MAAO0T,EAAO1T,MACdU,WAAOuJ,IAEX,I1BvBgC,uB0BwB9B,OAAO,eACFhJ,EADL,CAEEP,MAAOgT,EAAOtT,UAElB,I1B3BqC,4B0B4BnC,OAAO,eACFa,EADL,GAEK2J,GAFL,CAGElK,MAAOgT,EAAOtT,UAElB,QACE,OAAOa,IE9BX+O,KduFa,WAAoE,IAA1D/O,EAAyD,uDAA1C2J,GAAe8I,EAA2B,uCAChF,OAAQA,EAAOxT,MACb,IXjGyB,gBWkGvB,OAAO,eACFe,EADL,CAEE0B,SAAU+Q,EAAO/Q,WAErB,IXrGsB,aWsGpB,OAAO,eACF1B,EADL,CAEE4J,MAAOzB,GAAU0B,MACjBxG,QAASoP,EAAOxP,UAAUC,KAAI,SAACxB,GAAD,sBACzBwI,GADyB,CAE5BrI,GAAIH,SAGV,IX7G4B,mBW8G1B,OAAO,eACF1B,EADL,CAEE4J,MAAOzB,GAAU+D,IACjB7I,QAASrD,EAAMqD,QAAQH,KAAI,SAAC6D,GAAD,sBACtBA,EADsB,CAEzBoD,aAAcpD,EAAOlF,KAAO4Q,EAAO1C,cAGzC,IX5GsB,aW6GpB,OAAO,eACF/P,EADL,CAEEqD,QAASrD,EAAMqD,QAAQH,KAAI,SAAC6D,GAAD,sBACtBA,EADsB,GAEtBmD,QAEFP,GANL,CAOEjI,SAAU1B,EAAM0B,WAEpB,IX/H0B,iBWgIxB,OAAO,eACF1B,EADL,CAEE4J,MAAOzB,GAAU+D,MAErB,IXnI6B,oBWoI3B,OAAO,eACFlM,EADL,CAEEwF,YAAaiN,EAAOhQ,QAExB,IXvI2B,kBWwIzB,OAAO,eACFzC,EADL,CAEE8J,eAAe,GAAD,oBACT9J,EAAM8J,gBADG,CAEZ2I,EAAO3J,OAETzF,QAASrD,EAAMqD,QAAQH,KAAI,SAAC6D,GAAD,sBACtBA,EADsB,CAEzBtB,wBAAyBgN,EAAO3J,KAAKpH,WAAaqF,EAAOlF,IAAakF,EAAOtB,6BAE/ED,YAAa2D,GAAyBsJ,EAAO3J,KAAM9I,EAAM0B,UACrDmH,GAA8B7I,EAAMwF,YAAaiN,EAAO3J,MACxD9I,EAAMwF,cAEd,IXrJuB,cWsJrB,OAAO,eACFxF,EADL,CAEE4J,MAAOzB,GAAUuK,eAErB,IXzJqB,YW0JnB,OAAO,eACF1S,EADL,CAEE4J,MAAOzB,GAAU8D,eACjB5I,QAASrD,EAAMqD,QAAQH,KAAI,SAAC6D,GAAD,sBACtBA,EADsB,CAEzBE,UAAU,GAAD,oBACJF,EAAOE,WADH,aAEJmB,GAA2BqK,EAAOxL,UAAWF,EAAOlF,MAEzD8E,MAAO2B,GAAkBmK,EAAOlK,WAAYxB,EAAOlF,IACnDuI,cAAerD,EAAOlF,KAAO4Q,EAAO1C,cAG1C,IXtKuB,cWuKrB,OAAO,eACF/P,EADL,CAEEqD,QAASrD,EAAMqD,QACZH,KAAI,SAAC6D,GAAD,sBAAkBA,EAAlB,CAA0BY,MAAO6B,GAAgBiJ,EAAOhJ,iBAAkB1C,QACjF6C,MAAOzB,GAAU4D,SACjBjC,eAAgB,GAChBC,mBAAoB0I,EAAOnC,gBAE/B,IX9KqB,YW+KnB,OAAO,eACFtQ,EADL,CAEE4J,MAAOzB,GAAU6D,eACjB3I,QAASrD,EAAMqD,QAAQH,KAAI,SAAC6D,GAAD,sBACtBA,EADsB,CAEzBsD,yBAA0B3B,GAAkC+J,EAAO9J,qBAAsB5B,EAAOlF,IAChG8E,MAAO2B,GAAkBmK,EAAOlK,WAAYxB,EAAOlF,IACnD8Q,UAAWrJ,GAAoBmJ,EAAOlK,WAAYxB,EAAOlF,WAG/D,IXxLyB,gBWyLvB,OAAO,eACF7B,EADL,CAEEgK,oBAAqByI,EAAOzI,oBAC5BC,gBAAiBwI,EAAOxI,kBAE5B,IX7L6B,oBW8L3B,OAAO,eACFjK,EADL,CAEEqD,QAASrD,EAAMqD,QAAQH,KAAI,SAAC6D,GAAD,sBACtBA,EADsB,CAEzBtB,wBAAyBgN,EAAO/Q,WAAaqF,EAAOlF,UAG1D,QACE,OAAO7B,IcxMXoD,MDDa,WAAqE,IAA3DpD,EAA0D,uDAA3C2J,GAAe8I,EAA4B,uCACjF,OAAQA,EAAOxT,MACb,IvBZ6B,oBuBa3B,OAAO,eACFe,EADL,CAEEqD,QAASoP,EAAOxP,YAEpB,IvBhB0B,iBuBiBxB,OAAO,eACFjD,EADL,CAEEmC,SAAUsQ,EAAOtQ,WAErB,QACE,OAAOnC,MEAEtB,I,MAbM,CACnBC,OAAQ,CACNC,QAAS,UACTyN,MAAO,UACPuG,KAAM,OACNnT,MAAO,UACP4G,OAAQ,WAEVvB,YAAa,CACXC,SAAU,WCTR8N,GAAQC,sBAAYC,GAASC,8BAAoBC,0BAAgBC,OAEvEC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,CAAenU,MAAOA,IACpB,kBAAC,GAAD,QAGJ2U,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrS,MAAK,SAAAsS,GACjCA,EAAaC,kB","file":"static/js/main.b72e08e7.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport const PrimaryButton = styled.button`\n  display: inline-block;\n  font-size: 1em;\n  height: 3em;\n  padding: 0.75em;\n  width: 100%;\n  background-color: transparent;\n  border: 2px solid ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n  font-weight: bold;\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n\n  &:hover {\n    background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n    color: white;\n    cursor: pointer;\n  }\n`;\n\nexport const UnstyledButton = styled.button`\n  all: unset;\n  cursor: pointer;\n`;\n","import { Action, Dispatch } from 'redux';\nimport jwtDecode from 'jwt-decode';\nimport { AuthenticationBody, JwtPayload } from 'agurk-shared';\nimport { setPlayerId } from './game.action';\n\nconst API_SERVER_URI = process.env.REACT_APP_API_SERVER_URI as string;\n\nexport const AUTHENTICATE_WITH_TOKEN = 'AUTHENTICATE_WITH_TOKEN';\nexport const AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';\nexport const UNAUTHENTICATE_WITH_ERROR = 'UNAUTHENTICATE_WITH_ERROR';\n\ninterface AuthenticateWithTokenAction extends Action<typeof AUTHENTICATE_WITH_TOKEN>{\n  readonly token: string;\n  readonly subject: string;\n}\n\ninterface AuthenticationError extends Action<typeof AUTHENTICATION_ERROR>{\n  readonly message: string;\n}\n\ninterface UnauthenticateWithErrorAction extends Action<typeof UNAUTHENTICATE_WITH_ERROR>{\n  readonly message: string;\n}\n\nexport type AuthenticationAction = AuthenticateWithTokenAction | AuthenticationError | UnauthenticateWithErrorAction;\n\nexport function authenticateWithToken(token: string, subject: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATE_WITH_TOKEN,\n    token,\n    subject,\n  };\n}\n\nexport function unauthenticateWithError(message: string): AuthenticationAction {\n  return {\n    type: UNAUTHENTICATE_WITH_ERROR,\n    message,\n  };\n}\n\nexport function authenticationError(message: string): AuthenticationAction {\n  return {\n    type: AUTHENTICATION_ERROR,\n    message,\n  };\n}\n\nfunction extractSubjectFromToken(token: string) {\n  return (jwtDecode(token) as JwtPayload).sub;\n}\n\nexport function authenticate(data: AuthenticationBody) {\n  return function postAuthentication(dispatch: Dispatch<Action>) {\n    fetch(`${API_SERVER_URI}/authenticate`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then(async (response) => {\n        if (response.ok) {\n          const body = await response.json() as { jwt: string };\n          const token = body.jwt;\n          const subject = extractSubjectFromToken(body.jwt);\n          dispatch(authenticateWithToken(token, subject));\n          dispatch(setPlayerId(subject));\n        } else {\n          dispatch(authenticationError('Authentication failed'));\n        }\n      }, () => dispatch(authenticationError('Could not contact server. Try again later...')));\n  };\n}\n","import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport default styled.div`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  padding: 0.5em;\n  width: 100%;\n  color: white;\n  font-weight: bold;\n`;\n","import React, { FormEvent, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport styled from 'styled-components';\nimport { PrimaryButton } from './styled/Button';\nimport { GameAction } from '../redux/game.action';\nimport { authenticate } from '../redux/authentication.action';\nimport { State } from '../redux';\nimport ErrorMessage from './styled/Message';\n\ninterface Props {\n  dispatch: ThunkDispatch<State, undefined, GameAction>;\n  error: string | undefined;\n}\n\nconst Container = styled.div`\n  max-width: 500px;\n  margin: auto;\n`;\n\nconst Input = styled.input`\n  padding: 0.5em;\n  width: 100%;\n  height: 3em;\n  margin-bottom: 1em;\n  display: block;\n  font-size: 1em;\n`;\n\nconst SpacedForm = styled.form`\n  margin-bottom: 1em;\n`;\n\nfunction Login({ dispatch, error }: Props) {\n  const [nameInput, setNameInput] = useState<string>('');\n  const [tokenInput, setTokenInput] = useState<string>('');\n\n  function handleSubmit(event: FormEvent) {\n    dispatch(authenticate({ name: nameInput, token: tokenInput }));\n    event.preventDefault();\n  }\n\n  function handleNameChange(event: FormEvent<HTMLInputElement>) {\n    setNameInput(event.currentTarget.value);\n  }\n\n  function handleTokenChange(event: FormEvent<HTMLInputElement>) {\n    setTokenInput(event.currentTarget.value);\n  }\n\n  return (\n    <Container>\n      <h2>Login</h2>\n\n      <SpacedForm onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"Player name\"\n          id=\"name\"\n          value={nameInput}\n          onChange={handleNameChange}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n\n        <Input\n          placeholder=\"Access token\"\n          id=\"token\"\n          value={tokenInput}\n          onChange={handleTokenChange}\n          type=\"password\"\n          name=\"token\"\n          required\n        />\n\n        <PrimaryButton type=\"submit\">Log in</PrimaryButton>\n      </SpacedForm>\n\n      { error && <ErrorMessage>{error}</ErrorMessage>}\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  error: state.authentication.error,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import {\n  Card, Error, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_PLAYER_ID = 'SET_PLAYER_ID';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME_SUCCESS = 'END_GAME_SUCCESS';\nexport const END_GAME_ERROR = 'END_GAME_ERROR';\nexport const SET_CARDS_IN_HAND = 'SET_CARDS_IN_HAND';\nexport const ADD_PLAYER_TURN = 'ADD_PLAYER_TURN';\nexport const START_ROUND = 'START_ROUND';\nexport const END_ROUND = 'END_ROUND';\nexport const START_CYCLE = 'START_CYCLE';\nexport const END_CYCLE = 'END_CYCLE';\nexport const REQUEST_CARDS = 'REQUEST_CARDS';\nexport const START_PLAYER_TURN = 'START_PLAYER_TURN';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface SetPlayerIdAction extends Action<typeof SET_PLAYER_ID> {\n  readonly playerId: PlayerId;\n}\n\ninterface StartGameAction extends Action<typeof START_GAME> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndGameSuccessAction extends Action<typeof END_GAME_SUCCESS>{\n  readonly winner: PlayerId;\n}\n\ninterface EndGameErrorAction extends Action<typeof END_GAME_ERROR>{\n  readonly error: Error;\n}\n\ninterface SetCardsInHandAction extends Action<typeof SET_CARDS_IN_HAND>{\n  readonly cards: Card[];\n}\n\ninterface StartPlayerTurnAction extends Action<typeof START_PLAYER_TURN>{\n  readonly playerId: PlayerId;\n}\n\ninterface AddPlayerTurnAction extends Action<typeof ADD_PLAYER_TURN>{\n  readonly turn: ValidatedTurn;\n}\n\ninterface StartRoundAction extends Action<typeof START_ROUND>{\n  readonly playerIds: PlayerId[];\n}\n\ninterface EndRoundAction extends Action<typeof END_ROUND>{\n  readonly winner: PlayerId | undefined;\n  readonly penalties: Penalty[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface StartCycleAction extends Action<typeof START_CYCLE>{\n  readonly orderedPlayerIds: PlayerId[];\n  readonly isLastOfRound: boolean;\n}\n\ninterface EndCycleAction extends Action<typeof END_CYCLE>{\n  readonly highestTurnPlayerIds: PlayerId[];\n  readonly outPlayers: OutPlayer[];\n}\n\ninterface RequestCardsAction extends Action<typeof REQUEST_CARDS>{\n  readonly turnTimeoutInMillis: number;\n  readonly turnRetriesLeft: number;\n}\n\ninterface ResetGameAction extends Action<typeof RESET_GAME>{}\n\n\nexport type GameAction = StartGameAction | EndGameSuccessAction | EndGameErrorAction | SetCardsInHandAction |\n  AddPlayerTurnAction | StartRoundAction | EndRoundAction | StartCycleAction | EndCycleAction | RequestCardsAction |\n  StartPlayerTurnAction | ResetGameAction | SetPlayerIdAction;\n\nexport function setPlayerId(playerId: string): GameAction {\n  return {\n    type: SET_PLAYER_ID,\n    playerId,\n  };\n}\n\nexport function startGame(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_GAME,\n    playerIds,\n  };\n}\n\nexport function resetGame(): GameAction {\n  return {\n    type: RESET_GAME,\n  };\n}\n\nexport function endGameError(error: Error): GameAction {\n  return {\n    type: END_GAME_ERROR,\n    error,\n  };\n}\n\nexport function endGameSuccess(winner: PlayerId): GameAction {\n  return {\n    type: END_GAME_SUCCESS,\n    winner,\n  };\n}\n\nexport function setAvailableCardsInHand(cards: Card[]): GameAction {\n  return {\n    type: SET_CARDS_IN_HAND,\n    cards,\n  };\n}\n\nexport function addPlayerTurn(turn: ValidatedTurn): GameAction {\n  return {\n    type: ADD_PLAYER_TURN,\n    turn,\n  };\n}\n\nexport function startPlayerTurn(playerId: PlayerId): GameAction {\n  return {\n    type: START_PLAYER_TURN,\n    playerId,\n  };\n}\n\nexport function startRound(playerIds: PlayerId[]): GameAction {\n  return {\n    type: START_ROUND,\n    playerIds,\n  };\n}\n\nexport function endRound(winner: PlayerId | undefined, penalties: Penalty[], outPlayers: OutPlayer[]): GameAction {\n  return {\n    type: END_ROUND,\n    winner,\n    penalties,\n    outPlayers,\n  };\n}\n\nexport function startCycle(orderedPlayerIds: PlayerId[], isLastOfRound: boolean): GameAction {\n  return {\n    type: START_CYCLE,\n    orderedPlayerIds,\n    isLastOfRound,\n  };\n}\n\nexport function endCycle(outPlayers: OutPlayer[], highestTurnPlayerIds: PlayerId[]): GameAction {\n  return {\n    type: END_CYCLE,\n    highestTurnPlayerIds,\n    outPlayers,\n  };\n}\n\nexport function requestCards(turnTimeoutInMillis: number, turnRetriesLeft: number): GameAction {\n  return {\n    type: REQUEST_CARDS,\n    turnTimeoutInMillis,\n    turnRetriesLeft,\n  };\n}\n","import { PlayerId } from 'agurk-shared';\nimport { Action } from 'redux';\n\nexport const SET_LOBBY_PLAYERS = 'SET_LOBBY_PLAYERS';\nexport const SET_IS_IN_GAME = 'SET_IS_IN_GAME';\n\ninterface SetLobbyPlayersAction extends Action<typeof SET_LOBBY_PLAYERS> {\n  readonly playerIds: PlayerId[];\n}\n\ninterface SetIsInGameAction extends Action<typeof SET_IS_IN_GAME> {\n  readonly isInGame: boolean;\n}\n\nexport type LobbyAction = SetLobbyPlayersAction | SetIsInGameAction;\n\nexport function setLobbyPlayers(playerIds: PlayerId[]): LobbyAction {\n  return {\n    type: SET_LOBBY_PLAYERS,\n    playerIds,\n  };\n}\n\nexport function setIsInGame(isInGame: boolean): LobbyAction {\n  return {\n    type: SET_IS_IN_GAME,\n    isInGame,\n  };\n}\n","import {\n  Card,\n  Message,\n  MessageName,\n} from 'agurk-shared';\nimport { WebSocketSubject } from 'rxjs/webSocket';\nimport { Action } from 'redux';\nimport {\n  addPlayerTurn,\n  endCycle,\n  endGameError,\n  endGameSuccess,\n  endRound,\n  requestCards,\n  setAvailableCardsInHand,\n  startCycle,\n  startGame, startPlayerTurn,\n  startRound,\n} from '../redux/game.action';\nimport { setIsInGame, setLobbyPlayers } from '../redux/lobby.action';\n\nexport interface WebSocketGameApi {\n  sendStartGame: () => void;\n  sendPlayCards: (cards: Card[]) => void;\n}\n\nexport interface WebSocketAuthenticationApi {\n  sendAuthenticate: (token: string) => void;\n}\n\nfunction sendStartGame(subject: WebSocketSubject<Message>): void {\n  return subject.next({ name: MessageName.START_GAME });\n}\n\nfunction sendPlayCards(subject: WebSocketSubject<Message>, cards: Card[]): void {\n  return subject.next({ name: MessageName.PLAY_CARDS, data: cards });\n}\n\nfunction sendAuthenticate(subject: WebSocketSubject<Message>, token: string): void {\n  return subject.next({ name: MessageName.AUTHENTICATE, data: token });\n}\n\nexport function dispatchWebSocketMessageAsActions(message: Message, dispatch: (action: Action) => void) {\n  // eslint-disable-next-line default-case\n  switch (message.name) {\n    case MessageName.BROADCAST_LOBBY_PLAYERS:\n      return dispatch(setLobbyPlayers(message.data));\n    case MessageName.BROADCAST_START_GAME:\n      dispatch(startGame(message.data.players));\n      return dispatch(setIsInGame(true));\n    case MessageName.BROADCAST_END_GAME:\n      if (message.data.isValid) {\n        return dispatch(endGameSuccess(message.data.winner));\n      }\n      return dispatch(endGameError(message.data.error));\n    case MessageName.BROADCAST_START_ROUND:\n      return dispatch(startRound(message.data.players));\n    case MessageName.BROADCAST_END_ROUND:\n      return dispatch(endRound(message.data.winner, message.data.penalties, message.data.outPlayers));\n    case MessageName.BROADCAST_START_CYCLE:\n      return dispatch(startCycle(message.data.orderedPlayers, message.data.isLastOfRound));\n    case MessageName.BROADCAST_END_CYCLE:\n      return dispatch(endCycle(message.data.outPlayers, message.data.highestTurnPlayers));\n    case MessageName.BROADCAST_PLAYER_TURN:\n      return dispatch(addPlayerTurn(message.data));\n    case MessageName.AVAILABLE_CARDS_IN_HAND:\n      return dispatch(setAvailableCardsInHand(message.data));\n    case MessageName.REQUEST_CARDS:\n      return dispatch(requestCards(message.data.timeoutInMillis, message.data.retriesLeft));\n    case MessageName.BROADCAST_START_PLAYER_TURN:\n      return dispatch(startPlayerTurn(message.data));\n  }\n}\n\nexport function createGameApi(subject: WebSocketSubject<Message>): WebSocketGameApi {\n  return {\n    sendStartGame: sendStartGame.bind(null, subject),\n    sendPlayCards: sendPlayCards.bind(null, subject),\n  };\n}\n\nexport function createAuthenticationApi(subject: WebSocketSubject<Message>): WebSocketAuthenticationApi {\n  return {\n    sendAuthenticate: sendAuthenticate.bind(null, subject),\n  };\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport styled from 'styled-components';\n\ninterface Props {\n  playerIds: PlayerId[];\n}\n\nconst Element = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nexport default function PlayerIdList({ playerIds }: Props) {\n  const playerItems = playerIds.map((playerId) => <Element key={playerId}>{playerId}</Element>);\n\n  return (\n    <div>\n      <h2>Players</h2>\n\n      <ul>\n        { playerItems }\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { PlayerId } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { PrimaryButton } from './styled/Button';\nimport PlayerIdList from './board/PlayerIdList';\nimport { State } from '../redux';\n\ninterface Props {\n  playerIds: PlayerId[];\n  startGame: () => void;\n}\n\nfunction Lobby({ playerIds, startGame }: Props) {\n  return (\n    <div>\n      <PlayerIdList playerIds={playerIds} />\n      <PrimaryButton type=\"button\" onClick={startGame}>Start Game</PrimaryButton>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  playerIds: state.lobby.players,\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import React from 'react';\nimport {\n  Card as CardData, JOKER_CARD_KIND, JokerCard as JokerCardData, SuitCard as SuitCardData,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Theme } from '../styled/theme';\n\ninterface PlayingCardProps {\n  card: CardData;\n  isSelected?: boolean;\n}\n\ninterface JokerCardProps {\n  card: JokerCardData;\n}\n\ninterface SuitCardProps {\n  card: SuitCardData;\n}\n\nconst Card = styled.div`\n  border-color: ${({ isSelected, theme }: { isSelected: boolean, theme: Theme }) => (\n    isSelected ? `${theme.colors.primary}` : 'white'\n  )};\n  border-width: 2px;\n  border-style: solid;\n  border-radius: 6%;\n  width: 4.75em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: auto;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n`;\n\nexport function generateCardKey(card: CardData): string {\n  if (card.kind === JOKER_CARD_KIND) {\n    return card.color + card.rank;\n  }\n  return card.suit + card.rank;\n}\n\nfunction JokerCard({ card }: JokerCardProps) {\n  const lowercaseColor = card.color.toLowerCase();\n  const cardSrcFile = '/agurk-client/images/joker.svg';\n  return <Image src={cardSrcFile} alt={`joker card of color ${lowercaseColor}`} />;\n}\n\nfunction SuitCard({ card }: SuitCardProps) {\n  const lowercaseSuit = card.suit.toLowerCase();\n  const cardSrcFile = `/agurk-client/images/${card.rank}-${lowercaseSuit}.svg`;\n  return <Image src={cardSrcFile} alt={`card of rank ${card.rank} and suit ${lowercaseSuit}`} />;\n}\n\nexport function PlayingCardPlaceholder() {\n  const cardSrcFile = '/agurk-client/images/placeholder.svg';\n  return (\n    <Card isSelected={false}>\n      <Image src={cardSrcFile} alt=\"card placeholder\" />\n    </Card>\n  );\n}\n\nexport default function PlayingCard({ card, isSelected = false }: PlayingCardProps) {\n  return (\n    <Card isSelected={isSelected}>\n      { card.kind === JOKER_CARD_KIND\n        ? <JokerCard card={card} />\n        : <SuitCard card={card} /> }\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Card as CardData } from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { generateCardKey } from './PlayingCard';\nimport { UnstyledButton } from '../styled/Button';\nimport { Theme } from '../styled/theme';\n\nexport type SelectableCard = CardData & { isSelected: boolean };\n\ninterface Props {\n  cards: SelectableCard[];\n  handleSelect: (card: CardData) => void;\n}\n\nconst cardBoxOverlap = '2.75em';\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 1em;\n  width: calc(100% - ${cardBoxOverlap});\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    width: 100%;\n  }\n`;\n\nconst Box = styled.div`\n  margin-right: -${cardBoxOverlap};\n  margin-bottom: 0.5em;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    margin-right: 0.5em;\n  }\n`;\n\nexport default function CardList({ cards, handleSelect }: Props) {\n  const cardItems = cards.map((card) => (\n    <Box key={generateCardKey(card)}>\n      <UnstyledButton onClick={() => handleSelect(card)}>\n        <PlayingCard card={card} isSelected={card.isSelected} />\n      </UnstyledButton>\n    </Box>\n  ));\n\n  return (\n    <Flex>\n      { cardItems }\n    </Flex>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, cardEquals } from 'agurk-shared';\nimport SelectableCardList, { SelectableCard } from './SelectableCardList';\nimport { PrimaryButton } from '../styled/Button';\n\ninterface Props {\n  playCards: (cards: Card[]) => void;\n  cardsInHand: Card[];\n  isServerRequestingCards: boolean;\n}\n\ninterface PlayTurnProps {\n  handlePlayClick: () => void;\n}\n\nfunction PlayTurn({ handlePlayClick }: PlayTurnProps) {\n  return (\n    <>\n      <PrimaryButton type=\"button\" onClick={handlePlayClick}>\n        Play Cards\n      </PrimaryButton>\n    </>\n  );\n}\n\nexport default function Hand({ playCards, cardsInHand, isServerRequestingCards }: Props) {\n  const [selectableCards, setSelectableCards] = useState<SelectableCard[]>([]);\n\n  useEffect(() => {\n    const cards = cardsInHand.map((card) => ({ ...card, isSelected: false }));\n    setSelectableCards(cards);\n  }, [cardsInHand]);\n\n  function playSelectedCards() {\n    const selectedCards = selectableCards.filter((card) => card.isSelected);\n    playCards(selectedCards);\n  }\n\n  function handleCardSelect(clicked: Card) {\n    setSelectableCards(selectableCards.map((card) => (cardEquals(card, clicked)\n      ? { ...card, isSelected: !card.isSelected }\n      : card)));\n  }\n\n  return (\n    <div>\n      <h2>Your hand</h2>\n\n      <SelectableCardList cards={selectableCards} handleSelect={handleCardSelect} />\n\n      { isServerRequestingCards && <PlayTurn handlePlayClick={playSelectedCards} /> }\n    </div>\n  );\n}\n","import styled from 'styled-components';\nimport { Theme } from './theme';\n\nexport const Badge = styled.span`\n  background-color: transparent;\n  border-radius: 0.25em;\n  font-size: 0.7em;\n  margin: 0 0.5em;\n  padding: 0.15em 0.25em;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nexport const PrimaryBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n  color: white;\n`;\n\nexport const AccentBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.accent)};\n  color: white;\n`;\n\nexport const ErrorBadge = styled(Badge)`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.error)};\n  color: white;\n`;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { PlayerState } from '../../redux/game.reducer';\nimport { AccentBadge } from '../styled/Badge';\n\ninterface Props {\n  player: PlayerState;\n}\n\nconst opacityPulse = keyframes`\n  0% {\n    opacity: 0.6;\n  }\n\n  50% {\n    opacity: 1;\n  }\n\n  100% {\n    opacity: 0.6;\n  }\n`;\n\nconst PlayerName = styled.span`\n  text-decoration-line: ${(props: { isOut: boolean }) => (props.isOut ? 'line-through' : 'none')};\n`;\n\nconst ActivePlayerName = styled(PlayerName)`\n  animation: ${opacityPulse} 2s infinite;\n  font-weight: bold;\n`;\n\nconst InactivePlayerName = styled(PlayerName)`\n  font-weight: normal;\n`;\n\nexport default function Player({ player }: Props) {\n  const penaltySum = player.penalties.reduce((accumulator, current) => current.card.rank + accumulator, 0);\n\n  return (\n    <>\n      { player.isServerRequestingCards\n        ? <ActivePlayerName isOut={player.isOut}>{ player.id }</ActivePlayerName>\n        : <InactivePlayerName isOut={player.isOut}>{ player.id }</InactivePlayerName>}\n      <AccentBadge>\n        Penalty\n        {' '}\n        {penaltySum}\n      </AccentBadge>\n    </>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Player from './Player';\nimport { PlayerState } from '../../redux/game.reducer';\n\ninterface Props {\n  players: PlayerState[];\n}\n\nconst Li = styled.li`\n  margin-bottom: 0.5em;\n`;\n\nfunction byOrderAsc(first: PlayerState, second: PlayerState) {\n  return Math.sign(first.order - second.order);\n}\n\nfunction ActiveOrderedPlayers({ players }: Props) {\n  const orderedActivePlayers = players.filter((player) => !player.isOut).sort(byOrderAsc);\n  const activePlayerItems = orderedActivePlayers.map((player) => <Li key={player.id}><Player player={player} /></Li>);\n\n  if (activePlayerItems.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2>Players</h2>\n\n      <ol>\n        { activePlayerItems }\n      </ol>\n    </>\n  );\n}\n\nfunction OutPlayers({ players }: Props) {\n  const outPlayers = players.filter((player) => player.isOut);\n  const outPlayerItems = outPlayers.map((player) => <Li key={player.id}><Player player={player} /></Li>);\n\n  if (outPlayerItems.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2>Out players</h2>\n\n      <ul>\n        { outPlayerItems }\n      </ul>\n    </>\n  );\n}\n\nexport default function PlayerStateList({ players }: Props) {\n  return (\n    <div>\n      <ActiveOrderedPlayers players={players} />\n      <OutPlayers players={players} />\n    </div>\n  );\n}\n","import {\n  Card, cardEquals, OutPlayer, Penalty, PlayerId, ValidatedTurn,\n} from 'agurk-shared';\nimport {\n  ADD_PLAYER_TURN,\n  END_CYCLE,\n  END_GAME_ERROR, END_GAME_SUCCESS,\n  END_ROUND,\n  GameAction,\n  REQUEST_CARDS,\n  RESET_GAME,\n  SET_CARDS_IN_HAND,\n  SET_PLAYER_ID, START_CYCLE,\n  START_GAME,\n  START_PLAYER_TURN,\n  START_ROUND,\n} from './game.action';\n\nfunction filterPenaltiesForPlayerId(penalties: Penalty[], playerId: PlayerId) {\n  return penalties.filter((penalty) => penalty.playerId === playerId);\n}\n\nfunction isPlayerWithIdOut(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.some((outPlayer) => outPlayer.id === playerId);\n}\n\nfunction isPlayerIdOneOfHighestTurnPlayers(highestTurnPlayerIds: PlayerId[], playerId: PlayerId) {\n  return highestTurnPlayerIds.some((highestTurnPlayerId) => highestTurnPlayerId === playerId);\n}\n\nfunction filterAvailableCardsAfterTurn(cardsInHand: Card[], turn: ValidatedTurn) {\n  return cardsInHand.filter((cardInHand) => turn.cards\n    .find((turnCard) => cardEquals(cardInHand, turnCard)) === undefined);\n}\n\nfunction isTurnValidAndFromPlayer(playedTurn: ValidatedTurn, playerId: PlayerId | undefined) {\n  return playedTurn.playerId === playerId && playedTurn.valid;\n}\n\nfunction findPlayerOutReason(outPlayers: OutPlayer[], playerId: PlayerId) {\n  return outPlayers.find((outPlayer) => outPlayer.id === playerId)?.reason;\n}\n\nfunction findPlayerOrder(orderedPlayerIds: PlayerId[], player: PlayerState) {\n  return orderedPlayerIds.findIndex((playerId) => playerId === player.id);\n}\n\nexport interface PlayerState {\n  id: PlayerId;\n  isGameWinner: boolean;\n  isCycleHighestTurnPlayer: boolean;\n  penalties: Penalty[];\n  isRoundWinner: boolean;\n  isOut: boolean;\n  outReason?: string;\n  isServerRequestingCards: boolean;\n  order: number;\n}\n\nexport enum GameStage {\n  START,\n  END,\n  BETWEEN_ROUNDS,\n  BETWEEN_CYCLES,\n  BEFORE_CYCLE,\n  IN_CYCLE,\n}\n\nexport interface State {\n  stage: GameStage;\n  playerId: PlayerId | undefined;\n  players: PlayerState[];\n  validatedTurns: ValidatedTurn[];\n  cardsInHand: Card[];\n  isLastCycleOfRound: boolean;\n  turnTimeoutInMillis: number | undefined;\n  turnRetriesLeft: number;\n}\n\nconst INITIAL_STATE: State = {\n  stage: GameStage.START,\n  playerId: undefined,\n  players: [],\n  validatedTurns: [],\n  cardsInHand: [],\n  isLastCycleOfRound: false,\n  turnTimeoutInMillis: undefined,\n  turnRetriesLeft: 0,\n};\n\nconst INITIAL_PLAYER_STATE = {\n  isGameWinner: false,\n  isRoundWinner: false,\n  isCycleHighestTurnPlayer: false,\n  penalties: [],\n  isOut: false,\n  isServerRequestingCards: false,\n  order: -1,\n};\n\nexport default function (state: State = INITIAL_STATE, action: GameAction): State {\n  switch (action.type) {\n    case SET_PLAYER_ID:\n      return {\n        ...state,\n        playerId: action.playerId,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        stage: GameStage.START,\n        players: action.playerIds.map((playerId) => ({\n          ...INITIAL_PLAYER_STATE,\n          id: playerId,\n        })),\n      };\n    case END_GAME_SUCCESS:\n      return {\n        ...state,\n        stage: GameStage.END,\n        players: state.players.map((player) => ({\n          ...player,\n          isGameWinner: player.id === action.winner,\n        })),\n      };\n    case RESET_GAME:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          ...INITIAL_PLAYER_STATE,\n        })),\n        ...INITIAL_STATE,\n        playerId: state.playerId,\n      };\n    case END_GAME_ERROR:\n      return {\n        ...state,\n        stage: GameStage.END,\n      };\n    case SET_CARDS_IN_HAND:\n      return {\n        ...state,\n        cardsInHand: action.cards,\n      };\n    case ADD_PLAYER_TURN:\n      return {\n        ...state,\n        validatedTurns: [\n          ...state.validatedTurns,\n          action.turn,\n        ],\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.turn.playerId === player.id ? false : player.isServerRequestingCards,\n        })),\n        cardsInHand: isTurnValidAndFromPlayer(action.turn, state.playerId)\n          ? filterAvailableCardsAfterTurn(state.cardsInHand, action.turn)\n          : state.cardsInHand,\n      };\n    case START_ROUND:\n      return {\n        ...state,\n        stage: GameStage.BEFORE_CYCLE,\n      };\n    case END_ROUND:\n      return {\n        ...state,\n        stage: GameStage.BETWEEN_ROUNDS,\n        players: state.players.map((player) => ({\n          ...player,\n          penalties: [\n            ...player.penalties,\n            ...filterPenaltiesForPlayerId(action.penalties, player.id),\n          ],\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          isRoundWinner: player.id === action.winner,\n        })),\n      };\n    case START_CYCLE:\n      return {\n        ...state,\n        players: state.players\n          .map((player) => ({ ...player, order: findPlayerOrder(action.orderedPlayerIds, player) })),\n        stage: GameStage.IN_CYCLE,\n        validatedTurns: [],\n        isLastCycleOfRound: action.isLastOfRound,\n      };\n    case END_CYCLE:\n      return {\n        ...state,\n        stage: GameStage.BETWEEN_CYCLES,\n        players: state.players.map((player) => ({\n          ...player,\n          isCycleHighestTurnPlayer: isPlayerIdOneOfHighestTurnPlayers(action.highestTurnPlayerIds, player.id),\n          isOut: isPlayerWithIdOut(action.outPlayers, player.id),\n          outReason: findPlayerOutReason(action.outPlayers, player.id),\n        })),\n      };\n    case REQUEST_CARDS:\n      return {\n        ...state,\n        turnTimeoutInMillis: action.turnTimeoutInMillis,\n        turnRetriesLeft: action.turnRetriesLeft,\n      };\n    case START_PLAYER_TURN:\n      return {\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          isServerRequestingCards: action.playerId === player.id,\n        })),\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  timeoutInSeconds: number;\n}\n\nexport default function TextSecondTimer({ timeoutInSeconds }: Props) {\n  const [timeLeftInSeconds, setTimeLeftInSeconds] = useState<number>(timeoutInSeconds);\n\n  useEffect(() => {\n    setTimeLeftInSeconds(timeoutInSeconds);\n  }, [timeoutInSeconds]);\n\n  useEffect(() => {\n    const interval: number = setInterval(() => {\n      const newTimeLeftInMillis = timeLeftInSeconds - 1;\n      return newTimeLeftInMillis < 0\n        ? clearInterval(interval)\n        : setTimeLeftInSeconds(timeLeftInSeconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  return (<>{ timeLeftInSeconds }</>);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { GameStage, PlayerState } from '../../redux/game.reducer';\nimport TextSecondTimer from '../TextSecondTimer';\n\ninterface Props {\n  isServerRequestingCards: boolean;\n  players: PlayerState[];\n  turnRetriesLeft: number;\n  turnTimeoutInSeconds: number | undefined;\n  gameStage: GameStage;\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nconst OverviewParagraph = styled.p`\n  margin: 0;\n  font-weight: bold;\n`;\n\nconst OverviewTitle = styled.h2`\n  margin-bottom: 0;\n`;\n\nfunction YourTurn({ turnTimeoutInSeconds, turnRetriesLeft }: Pick<Props, 'turnTimeoutInSeconds' | 'turnRetriesLeft'>) {\n  return (\n    <Flex>\n      <OverviewTitle>\n        Your turn\n        { ' ' }\n      </OverviewTitle>\n      { turnTimeoutInSeconds && (\n        <OverviewParagraph>\n          <TextSecondTimer timeoutInSeconds={turnTimeoutInSeconds} />\n          { ' ' }\n          seconds and\n          { ' ' }\n          { turnRetriesLeft }\n          { ' ' }\n          { turnRetriesLeft === 1\n            ? 'retry left'\n            : 'retries left' }\n        </OverviewParagraph>\n      ) }\n    </Flex>\n  );\n}\n\nfunction TheirTurn({ players }: Pick<Props, 'players'>) {\n  const currentTurnPlayer = players.find((player) => player.isServerRequestingCards);\n  return (\n    <OverviewTitle>\n      { currentTurnPlayer?.id }\n      { '\\'s turn' }\n    </OverviewTitle>\n  );\n}\n\nfunction TurnIndicator({\n  isServerRequestingCards, players, turnTimeoutInSeconds, turnRetriesLeft,\n}: Pick<Props, 'turnTimeoutInSeconds' | 'turnRetriesLeft' | 'players' | 'isServerRequestingCards'>) {\n  return (isServerRequestingCards\n    ? <YourTurn turnTimeoutInSeconds={turnTimeoutInSeconds} turnRetriesLeft={turnRetriesLeft} />\n    : <TheirTurn players={players} />\n  );\n}\n\nfunction HighestCyclePlayers({ players }: Pick<Props, 'players'>) {\n  const highestCyclePlayerIds = players\n    .filter((player) => player.isCycleHighestTurnPlayer)\n    .map((player) => player.id);\n\n  if (highestCyclePlayerIds.length === 0) {\n    return <h2>No cycle winner</h2>;\n  }\n\n  return (\n    <OverviewTitle>\n      { highestCyclePlayerIds.join(' and ') }\n      { ' ' }\n      { highestCyclePlayerIds.length === 1\n        ? 'wins the cycle'\n        : 'win the cycle' }\n    </OverviewTitle>\n  );\n}\n\nfunction RoundWinner({ players }: Pick<Props, 'players'>) {\n  const roundWinner = players.find((player) => player.isRoundWinner);\n  return (\n    <OverviewTitle>\n      { roundWinner\n        ? `${roundWinner.id} wins the round`\n        : 'No round winner' }\n    </OverviewTitle>\n  );\n}\n\nfunction GameWinner({ players }: Pick<Props, 'players'>) {\n  const gameWinner = players.find((player) => player.isGameWinner);\n  return (\n    <OverviewTitle>\n      { gameWinner\n        ? `${gameWinner.id} wins the game 🎉🎉`\n        : 'No game winner' }\n    </OverviewTitle>\n  );\n}\n\nexport default function Overview({\n  isServerRequestingCards, players, turnTimeoutInSeconds, turnRetriesLeft, gameStage,\n}: Props) {\n  switch (gameStage) {\n    case GameStage.IN_CYCLE:\n      return (\n        <TurnIndicator\n          isServerRequestingCards={isServerRequestingCards}\n          players={players}\n          turnRetriesLeft={turnRetriesLeft}\n          turnTimeoutInSeconds={turnTimeoutInSeconds}\n        />\n      );\n    case GameStage.BETWEEN_CYCLES:\n      return (\n        <HighestCyclePlayers players={players} />\n      );\n    case GameStage.BETWEEN_ROUNDS:\n      return (\n        <RoundWinner players={players} />\n      );\n    case GameStage.END:\n      return (\n        <GameWinner players={players} />\n      );\n    default:\n      return null;\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { InvalidTurn, ValidatedTurn, ValidTurn } from 'agurk-shared';\nimport PlayingCard, { generateCardKey, PlayingCardPlaceholder } from './PlayingCard';\nimport { ErrorBadge } from '../styled/Badge';\nimport { Theme } from '../styled/theme';\n\ninterface Props {\n  turn: ValidatedTurn;\n}\n\nconst CardFlex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MutedCardFlex = styled(CardFlex)`\n  color: ${({ theme }: { theme: Theme }) => (theme.colors.muted)};\n`;\n\nconst CardBox = styled.div`\n  margin-right: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst TurnBox = styled.div`\n  margin-right: 1em;\n  margin-bottom: 1em;\n`;\n\nexport function generateTurnKey(turn: ValidatedTurn): string {\n  return turn.playerId + turn.valid;\n}\n\nfunction createCardItems(turn: ValidatedTurn) {\n  return turn.cards.map((card) => (\n    <CardBox key={generateCardKey(card)}>\n      <PlayingCard card={card} />\n    </CardBox>\n  ));\n}\n\nfunction Valid({ turn }: { turn: ValidTurn }) {\n  const cardItems = createCardItems(turn);\n\n  return (\n    <TurnBox>\n      <CardFlex>\n        { cardItems }\n      </CardFlex>\n      <Centered><span>{turn.playerId}</span></Centered>\n    </TurnBox>\n  );\n}\n\nfunction Invalid({ turn }: { turn: InvalidTurn }) {\n  const cardItems = createCardItems(turn);\n\n  return (\n    <TurnBox>\n      <MutedCardFlex>\n        { cardItems.length === 0\n          ? <PlayingCardPlaceholder />\n          : cardItems }\n      </MutedCardFlex>\n      <Centered><span>{turn.playerId}</span></Centered>\n      <Centered>\n        <ErrorBadge>{turn.invalidReason}</ErrorBadge>\n      </Centered>\n    </TurnBox>\n  );\n}\n\nexport default function Turn({ turn }: Props) {\n  return turn.valid\n    ? <Valid turn={turn} />\n    : <Invalid turn={turn} />;\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport Turn, { generateTurnKey } from './Turn';\n\ninterface Props {\n  turns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport default function TurnList({ turns }: Props) {\n  const mostRecentPlayerTurns = turns.reduceRight<ValidatedTurn[]>((acc, current) => {\n    const isMostRecentPlayerTurn = acc.find((turn) => turn.playerId === current.playerId) === undefined;\n    return isMostRecentPlayerTurn\n      ? [current, ...acc]\n      : acc;\n  }, []);\n  const turnItems = mostRecentPlayerTurns.map((turn) => (<Turn key={generateTurnKey(turn)} turn={turn} />));\n\n  return (\n    <Flex>\n      { turnItems }\n    </Flex>\n  );\n}\n","import React from 'react';\nimport {\n  Card, compareRanks, ValidatedTurn, ValidTurn,\n} from 'agurk-shared';\nimport styled from 'styled-components';\nimport PlayingCard, { PlayingCardPlaceholder } from './PlayingCard';\nimport { PrimaryBadge } from '../styled/Badge';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nconst Centered = styled.div`\n  text-align: center;\n`;\n\nconst CardBox = styled.div`\n  margin-bottom: 0.5em;\n`;\n\nfunction toMaxRankedCard(maxRankCard: Card, currentCard: Card) {\n  return compareRanks(maxRankCard, currentCard) > 0 ? maxRankCard : currentCard;\n}\n\nexport default function LastPlayedMaxCard({ playedTurns }: Props) {\n  const validTurns = playedTurns.filter((turn) => turn.valid) as ValidTurn[];\n  const playedCards = validTurns.flatMap((turn) => turn.cards);\n  const highestPlayedCard = playedCards.length > 0\n    ? <PlayingCard card={playedCards.reduce(toMaxRankedCard)} />\n    : <PlayingCardPlaceholder />;\n\n  return (\n    <div>\n      <CardBox>\n        { highestPlayedCard }\n      </CardBox>\n      <Centered>\n        <PrimaryBadge>Highest card</PrimaryBadge>\n      </Centered>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport Turn from './Turn';\nimport LastPlayedMaxCard from './LastPlayedMaxCard';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n}\n\nconst Flex = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  & > * {\n    margin-right: 1em;\n    margin-bottom: 1em;\n  }\n`;\n\nfunction findLastTurn(playedTurns: ValidatedTurn[]): ValidatedTurn | undefined {\n  return playedTurns[playedTurns.length - 1];\n}\n\nfunction MostRecentTurn({ playedTurns }: Props) {\n  const [displayedTurn, setDisplayedTurn] = useState<ValidatedTurn | undefined>(undefined);\n  const SHOW_INVALID_TURN_TIMEOUT = 2000;\n\n  useEffect(() => {\n    const previousTurn = findLastTurn(playedTurns);\n    setDisplayedTurn(previousTurn);\n\n    if (previousTurn && !previousTurn.valid) {\n      const validTurns = playedTurns.filter((turn) => turn.valid);\n      const previousValidTurn = findLastTurn(validTurns);\n\n      const timeout: number = setTimeout(() => {\n        setDisplayedTurn(previousValidTurn);\n      }, SHOW_INVALID_TURN_TIMEOUT);\n      return () => clearTimeout(timeout);\n    }\n  }, [playedTurns]);\n\n  return displayedTurn\n    ? <Turn turn={displayedTurn} />\n    : null;\n}\n\nexport default function TurnStack({ playedTurns }: Props) {\n  return (\n    <Flex>\n      <LastPlayedMaxCard playedTurns={playedTurns} />\n      <MostRecentTurn playedTurns={playedTurns} />\n    </Flex>\n  );\n}\n","import React from 'react';\nimport { ValidatedTurn } from 'agurk-shared';\nimport TurnList from './TurnList';\nimport TurnStack from './TurnStack';\n\ninterface Props {\n  playedTurns: ValidatedTurn[];\n  isLastCycleOfRound: boolean;\n}\n\nexport default function PlayedTurns({ playedTurns, isLastCycleOfRound }: Props) {\n  return isLastCycleOfRound\n    ? <TurnList turns={playedTurns} />\n    : <TurnStack playedTurns={playedTurns} />;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ValidatedTurn } from 'agurk-shared';\nimport styled from 'styled-components';\nimport { Action, Dispatch } from 'redux';\nimport Hand from './Hand';\nimport PlayerStateList from './PlayerStateList';\nimport { State } from '../../redux';\nimport { WebSocketGameApi } from '../../communication/webSocketServerApi';\nimport { resetGame } from '../../redux/game.action';\nimport { GameStage, PlayerState } from '../../redux/game.reducer';\nimport Overview from './Overview';\nimport { setIsInGame } from '../../redux/lobby.action';\nimport { PrimaryButton } from '../styled/Button';\nimport { Theme } from '../styled/theme';\nimport PlayedTurns from './PlayedTurns';\n\ninterface Props {\n  state: {\n    players: PlayerState[]\n    playedTurns: ValidatedTurn[];\n    cardsInHand: Card[];\n    playerState: PlayerState | undefined;\n    stage: GameStage;\n    isLastCycleOfRound: boolean;\n    turnTimeoutInSeconds: number | undefined;\n    turnRetriesLeft: number;\n  };\n  playCards: (cards: Card[]) => void;\n  closeGame: () => void;\n}\n\nconst Grid = styled.div`\n  display: grid;\n  row-gap: 1em;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    grid-template-columns: 30% 65%;\n    grid-template-rows: auto auto auto;\n    column-gap: 5%;\n    row-gap: 2em;\n  }\n`;\n\nconst OverviewBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 1;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 1;\n    grid-row-end: span 1;\n  }\n`;\n\nconst PlayedTurnsBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 2;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 2;\n    grid-row-end: span 1;\n  }\n`;\n\nconst HandBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 3;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    grid-column-start: 2;\n    grid-column-end: span 1;\n    grid-row-start: 3;\n    grid-row-end: span 1;\n  }\n`;\n\nconst PlayersBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 4;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    grid-column-start: 1;\n    grid-column-end: span 1;\n    grid-row-start: 1;\n    grid-row-end: span 2;\n  }\n`;\n\nconst NavigationBox = styled.div`\n  grid-column-start: 1;\n  grid-column-end: span 1;\n  grid-row-start: 6;\n  grid-row-end: span 1;\n\n  @media(min-width: ${({ theme }: { theme: Theme }) => (theme.breakpoints.minWidth)}) {\n    grid-column-start: 1;\n    grid-column-end: span 1;\n    grid-row-start: 3;\n    grid-row-end: span 1;\n  }\n`;\n\nfunction Board({ state, playCards, closeGame }: Props) {\n  if (!state.playerState) {\n    return <p>Loading game...</p>;\n  }\n\n  return (\n    <Grid>\n      <OverviewBox>\n        <Overview\n          gameStage={state.stage}\n          isServerRequestingCards={state.playerState.isServerRequestingCards}\n          players={state.players}\n          turnTimeoutInSeconds={state.turnTimeoutInSeconds}\n          turnRetriesLeft={state.turnRetriesLeft}\n        />\n      </OverviewBox>\n      <PlayedTurnsBox>\n        <PlayedTurns playedTurns={state.playedTurns} isLastCycleOfRound={state.isLastCycleOfRound} />\n      </PlayedTurnsBox>\n      <HandBox>\n        <Hand\n          isServerRequestingCards={state.playerState.isServerRequestingCards}\n          cardsInHand={state.cardsInHand}\n          playCards={playCards}\n        />\n      </HandBox>\n      <PlayersBox>\n        <PlayerStateList players={state.players} />\n      </PlayersBox>\n      { state.stage === GameStage.END\n        && (\n        <NavigationBox>\n          <PrimaryButton onClick={closeGame}>\n            Return to lobby\n          </PrimaryButton>\n        </NavigationBox>\n        )}\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: State, ownProps: { serverApi: WebSocketGameApi }) => ({\n  state: {\n    cardsInHand: state.game.cardsInHand,\n    players: state.game.players,\n    stage: state.game.stage,\n    playedTurns: state.game.validatedTurns,\n    playerState: state.game.players.find((player) => player.id === state.game.playerId),\n    playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n    isLastCycleOfRound: state.game.isLastCycleOfRound,\n    turnTimeoutInSeconds: state.game.turnTimeoutInMillis ? state.game.turnTimeoutInMillis / 1000 : undefined,\n    turnRetriesLeft: state.game.turnRetriesLeft,\n  },\n  playCards: (cards: Card[]) => ownProps.serverApi.sendPlayCards(cards),\n});\n\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  closeGame: () => {\n    resetGame();\n    dispatch(setIsInGame(false));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, { useEffect, useState } from 'react';\nimport { Message, MessageName } from 'agurk-shared';\nimport { connect } from 'react-redux';\nimport { filter } from 'rxjs/operators';\nimport { Action, Dispatch } from 'redux';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport {\n  createAuthenticationApi, createGameApi, dispatchWebSocketMessageAsActions,\n} from '../communication/webSocketServerApi';\nimport { State } from '../redux';\nimport { unauthenticateWithError } from '../redux/authentication.action';\nimport Lobby from './Lobby';\nimport Board from './board/Board';\n\nconst WSS_SERVER_URI = process.env.REACT_APP_WSS_SERVER_URI as string;\n\ninterface Props {\n  dispatch: Dispatch<Action>;\n  authenticationToken: string;\n  isInGame: boolean;\n}\n\nfunction respondToAuthenticationRequestFromServer(\n  subject: WebSocketSubject<Message>,\n  authenticationToken: string,\n  dispatch: Dispatch<Action>,\n) {\n  subject.pipe(filter((message) => message.name === MessageName.REQUEST_AUTHENTICATION))\n    .subscribe(() => {\n      const webSocketAuthenticationApi = createAuthenticationApi(subject);\n      webSocketAuthenticationApi.sendAuthenticate(authenticationToken);\n    },\n    () => dispatch(unauthenticateWithError('Could not authenticate with the game server. Try to login again...')));\n}\n\nfunction handleMessagesFromServer(subject: WebSocketSubject<Message>, dispatch: Dispatch<Action>) {\n  subject.subscribe((message) => dispatchWebSocketMessageAsActions(message, dispatch),\n    () => dispatch(unauthenticateWithError('Could not contact the game server. Try again later...')));\n}\n\nfunction Game({ dispatch, authenticationToken, isInGame }: Props) {\n  const webSocketSubject: WebSocketSubject<Message> = webSocket({\n    url: WSS_SERVER_URI,\n    closeObserver: {\n      next: (closeEvent: CloseEvent) => dispatch(unauthenticateWithError(closeEvent.reason)),\n    },\n  });\n  const [subject] = useState(webSocketSubject);\n  const gameApi = createGameApi(subject);\n\n  useEffect(() => {\n    handleMessagesFromServer(subject, dispatch);\n    return () => subject.complete();\n  }, [subject, dispatch]);\n\n  useEffect(() => {\n    respondToAuthenticationRequestFromServer(subject, authenticationToken, dispatch);\n    return () => subject.complete();\n  }, [subject, dispatch, authenticationToken]);\n\n  return (\n    <>\n      { isInGame\n        ? <Board serverApi={gameApi} />\n        : <Lobby startGame={gameApi.sendStartGame} /> }\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isInGame: state.lobby.isInGame,\n  authenticationToken: state.authentication.token,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { State } from '../redux';\nimport Login from './Login';\nimport { Theme } from './styled/theme';\nimport Game from './Game';\n\ninterface Props {\n  isAuthenticated: boolean;\n}\n\nconst Header = styled.header`\n  background-color: ${({ theme }: { theme: Theme }) => (theme.colors.primary)};\n`;\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: auto;\n  padding: 0 2em;\n`;\n\nconst NavBar = styled.nav`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n`;\n\nconst NavLink = styled.a`\n  text-decoration: none;\n  color: white;\n  text-align: center;\n  padding: 0.5em;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst NavTitle = styled(NavLink)`\n  font-size: 1.5em;\n  font-weight: bold;\n\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst Main = styled.main`\n  margin-bottom: 2em;\n`;\n\nfunction App({ isAuthenticated }: Props) {\n  return (\n    <>\n      <Header>\n        <NavBar>\n          <NavTitle href=\"/agurk-client\">\n            Agurk\n          </NavTitle>\n          <NavLink target=\"_blank\" href=\"https://github.com/SimonMueller/agurk-server/blob/master/README.md#rules\">\n            Read the rules\n          </NavLink>\n        </NavBar>\n      </Header>\n      <Container>\n        <Main>\n          { isAuthenticated ? <Game /> : <Login /> }\n        </Main>\n      </Container>\n    </>\n  );\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAuthenticated: state.authentication.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  AUTHENTICATE_WITH_TOKEN,\n  AUTHENTICATION_ERROR,\n  AuthenticationAction,\n  UNAUTHENTICATE_WITH_ERROR,\n} from './authentication.action';\n\nexport interface State {\n  subject: string;\n  isAuthenticated: boolean,\n  token: string,\n  error: string | undefined,\n}\n\nconst INITIAL_STATE: State = {\n  subject: '',\n  isAuthenticated: false,\n  token: '',\n  error: undefined,\n};\n\nexport default function (state: State = INITIAL_STATE, action: AuthenticationAction): State {\n  switch (action.type) {\n    case AUTHENTICATE_WITH_TOKEN:\n      return {\n        ...state,\n        subject: action.subject,\n        isAuthenticated: true,\n        token: action.token,\n        error: undefined,\n      };\n    case AUTHENTICATION_ERROR:\n      return {\n        ...state,\n        error: action.message,\n      };\n    case UNAUTHENTICATE_WITH_ERROR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n","import { PlayerId } from 'agurk-shared';\nimport { LobbyAction, SET_IS_IN_GAME, SET_LOBBY_PLAYERS } from './lobby.action';\n\nexport interface State {\n  players: PlayerId[];\n  isInGame: boolean;\n}\n\nconst INITIAL_STATE: State = {\n  players: [],\n  isInGame: false,\n};\n\nexport default function (state: State = INITIAL_STATE, action: LobbyAction): State {\n  switch (action.type) {\n    case SET_LOBBY_PLAYERS:\n      return {\n        ...state,\n        players: action.playerIds,\n      };\n    case SET_IS_IN_GAME:\n      return {\n        ...state,\n        isInGame: action.isInGame,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport authenticationReducer, { State as AuthenticationState } from './authentication.reducer';\nimport gameReducer, { State as GameState } from './game.reducer';\nimport lobbyReducer, { State as LobbyState } from './lobby.reducer';\n\nexport interface State {\n  authentication: AuthenticationState;\n  game: GameState;\n  lobby: LobbyState;\n}\n\nexport default combineReducers<State>({\n  authentication: authenticationReducer,\n  game: gameReducer,\n  lobby: lobbyReducer,\n});\n","export interface Theme {\n  colors: {\n    primary: string;\n    muted: string;\n    text: string;\n    error: string;\n    accent: string;\n  };\n  breakpoints: {\n    minWidth: string;\n  };\n}\n\nconst theme: Theme = {\n  colors: {\n    primary: '#006a4e',\n    muted: '#737373',\n    text: '#000',\n    error: '#ff033e',\n    accent: '#ff2400',\n  },\n  breakpoints: {\n    minWidth: '800px',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { ThemeProvider } from 'styled-components';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux';\nimport './index.css';\nimport theme from './components/styled/theme';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}